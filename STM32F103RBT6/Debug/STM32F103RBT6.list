
STM32F103RBT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f84  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08005090  08005090  00015090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005178  08005178  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08005178  08005178  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005178  08005178  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005178  08005178  00015178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800517c  0800517c  0001517c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000088  08005208  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08005208  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f898  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026bd  00000000  00000000  0002f949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00032008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  00033198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019da7  00000000  00000000  00034228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b88  00000000  00000000  0004dfcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e847  00000000  00000000  00061b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f039e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c88  00000000  00000000  000f03f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08005078 	.word	0x08005078

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08005078 	.word	0x08005078

0800014c <FaBoLCD_PCF8574>:
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)66, (uint8_t *) initData, 1, 0xffff);
	HAL_Delay(100);
}

void FaBoLCD_PCF8574(uint8_t addr)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  _i2caddr = addr;
 8000156:	4a10      	ldr	r2, [pc, #64]	; (8000198 <FaBoLCD_PCF8574+0x4c>)
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	7013      	strb	r3, [r2, #0]
  _backlight = BL;
 800015c:	4b0f      	ldr	r3, [pc, #60]	; (800019c <FaBoLCD_PCF8574+0x50>)
 800015e:	2280      	movs	r2, #128	; 0x80
 8000160:	701a      	strb	r2, [r3, #0]
  uint8_t initData[1] = {0x80};
 8000162:	2380      	movs	r3, #128	; 0x80
 8000164:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)0x42, (uint8_t *) initData, 1, 0xffff);
 8000166:	f107 020c 	add.w	r2, r7, #12
 800016a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800016e:	9300      	str	r3, [sp, #0]
 8000170:	2301      	movs	r3, #1
 8000172:	2142      	movs	r1, #66	; 0x42
 8000174:	480a      	ldr	r0, [pc, #40]	; (80001a0 <FaBoLCD_PCF8574+0x54>)
 8000176:	f002 f849 	bl	800220c <HAL_I2C_Master_Transmit>
  HAL_Delay(100);
 800017a:	2064      	movs	r0, #100	; 0x64
 800017c:	f001 fb6a 	bl	8001854 <HAL_Delay>
  init();
 8000180:	f000 f810 	bl	80001a4 <init>
  begin(LCD_COLUMN, LCD_LINE, LCD_5x8DOTS);
 8000184:	2200      	movs	r2, #0
 8000186:	2102      	movs	r1, #2
 8000188:	2010      	movs	r0, #16
 800018a:	f000 f817 	bl	80001bc <begin>
}
 800018e:	bf00      	nop
 8000190:	3710      	adds	r7, #16
 8000192:	46bd      	mov	sp, r7
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	200000ac 	.word	0x200000ac
 800019c:	200000ad 	.word	0x200000ad
 80001a0:	20000110 	.word	0x20000110

080001a4 <init>:

/**
 @brief init
*/
void init()
{
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0
  _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80001a8:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <init+0x14>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	701a      	strb	r2, [r3, #0]
}
 80001ae:	bf00      	nop
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr
 80001b6:	bf00      	nop
 80001b8:	200000a4 	.word	0x200000a4

080001bc <begin>:

/**
 @brief brgin
*/
void begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	4603      	mov	r3, r0
 80001c4:	71fb      	strb	r3, [r7, #7]
 80001c6:	460b      	mov	r3, r1
 80001c8:	71bb      	strb	r3, [r7, #6]
 80001ca:	4613      	mov	r3, r2
 80001cc:	717b      	strb	r3, [r7, #5]
  if (lines > 1) {
 80001ce:	79bb      	ldrb	r3, [r7, #6]
 80001d0:	2b01      	cmp	r3, #1
 80001d2:	d906      	bls.n	80001e2 <begin+0x26>
	_displayfunction |= LCD_2LINE;
 80001d4:	4b2b      	ldr	r3, [pc, #172]	; (8000284 <begin+0xc8>)
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	f043 0308 	orr.w	r3, r3, #8
 80001dc:	b2da      	uxtb	r2, r3
 80001de:	4b29      	ldr	r3, [pc, #164]	; (8000284 <begin+0xc8>)
 80001e0:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80001e2:	4a29      	ldr	r2, [pc, #164]	; (8000288 <begin+0xcc>)
 80001e4:	79bb      	ldrb	r3, [r7, #6]
 80001e6:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 80001e8:	79fa      	ldrb	r2, [r7, #7]
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	3340      	adds	r3, #64	; 0x40
 80001ee:	2140      	movs	r1, #64	; 0x40
 80001f0:	2000      	movs	r0, #0
 80001f2:	f000 f84f 	bl	8000294 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80001f6:	797b      	ldrb	r3, [r7, #5]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d009      	beq.n	8000210 <begin+0x54>
 80001fc:	79bb      	ldrb	r3, [r7, #6]
 80001fe:	2b01      	cmp	r3, #1
 8000200:	d106      	bne.n	8000210 <begin+0x54>
	_displayfunction |= LCD_5x10DOTS;
 8000202:	4b20      	ldr	r3, [pc, #128]	; (8000284 <begin+0xc8>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	b2da      	uxtb	r2, r3
 800020c:	4b1d      	ldr	r3, [pc, #116]	; (8000284 <begin+0xc8>)
 800020e:	701a      	strb	r2, [r3, #0]
  }

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way before 4.5V so we'll wait 50
  HAL_Delay(50);
 8000210:	2032      	movs	r0, #50	; 0x32
 8000212:	f001 fb1f 	bl	8001854 <HAL_Delay>
  // Now we pull both RS and R/W low to begin commands
  writeI2c(0x00);
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f922 	bl	8000460 <writeI2c>

  // this is according to the hitachi HD44780 datasheet
  // figure 24, pg 46

  // we start in 8bit mode, try to set 4 bit mode
  write4bits(DB4|DB5);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 f90e 	bl	800043e <write4bits>
  HAL_Delay(5); // wait min 4.1ms
 8000222:	2005      	movs	r0, #5
 8000224:	f001 fb16 	bl	8001854 <HAL_Delay>

  // second try
  write4bits(DB4|DB5);
 8000228:	2003      	movs	r0, #3
 800022a:	f000 f908 	bl	800043e <write4bits>
  HAL_Delay(5); // wait min 4.1ms
 800022e:	2005      	movs	r0, #5
 8000230:	f001 fb10 	bl	8001854 <HAL_Delay>

  // third go!
  write4bits(DB4|DB5);
 8000234:	2003      	movs	r0, #3
 8000236:	f000 f902 	bl	800043e <write4bits>
  HAL_Delay(2);
 800023a:	2002      	movs	r0, #2
 800023c:	f001 fb0a 	bl	8001854 <HAL_Delay>

  // finally, set to 4-bit interface
  write4bits(DB5);
 8000240:	2002      	movs	r0, #2
 8000242:	f000 f8fc 	bl	800043e <write4bits>

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 8000246:	4b0f      	ldr	r3, [pc, #60]	; (8000284 <begin+0xc8>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	f043 0320 	orr.w	r3, r3, #32
 800024e:	b2db      	uxtb	r3, r3
 8000250:	4618      	mov	r0, r3
 8000252:	f000 f88f 	bl	8000374 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000256:	4b0d      	ldr	r3, [pc, #52]	; (800028c <begin+0xd0>)
 8000258:	2204      	movs	r2, #4
 800025a:	701a      	strb	r2, [r3, #0]
  display();
 800025c:	f000 f874 	bl	8000348 <display>

  // clear it off
  clear();
 8000260:	f000 f836 	bl	80002d0 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000264:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <begin+0xd4>)
 8000266:	2202      	movs	r2, #2
 8000268:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800026a:	4b09      	ldr	r3, [pc, #36]	; (8000290 <begin+0xd4>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	f043 0304 	orr.w	r3, r3, #4
 8000272:	b2db      	uxtb	r3, r3
 8000274:	4618      	mov	r0, r3
 8000276:	f000 f87d 	bl	8000374 <command>

}
 800027a:	bf00      	nop
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	200000a4 	.word	0x200000a4
 8000288:	200000a7 	.word	0x200000a7
 800028c:	200000a5 	.word	0x200000a5
 8000290:	200000a6 	.word	0x200000a6

08000294 <setRowOffsets>:

/**
 @brief setRowOffsets
*/
void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	60f8      	str	r0, [r7, #12]
 800029c:	60b9      	str	r1, [r7, #8]
 800029e:	607a      	str	r2, [r7, #4]
 80002a0:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	b2da      	uxtb	r2, r3
 80002a6:	4b09      	ldr	r3, [pc, #36]	; (80002cc <setRowOffsets+0x38>)
 80002a8:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	4b07      	ldr	r3, [pc, #28]	; (80002cc <setRowOffsets+0x38>)
 80002b0:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	b2da      	uxtb	r2, r3
 80002b6:	4b05      	ldr	r3, [pc, #20]	; (80002cc <setRowOffsets+0x38>)
 80002b8:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	b2da      	uxtb	r2, r3
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <setRowOffsets+0x38>)
 80002c0:	70da      	strb	r2, [r3, #3]
}
 80002c2:	bf00      	nop
 80002c4:	3714      	adds	r7, #20
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	200000a8 	.word	0x200000a8

080002d0 <clear>:

/**
 @brief clear
*/
void clear()
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 80002d4:	2001      	movs	r0, #1
 80002d6:	f000 f84d 	bl	8000374 <command>
  HAL_Delay(2);  // this command takes a long time!
 80002da:	2002      	movs	r0, #2
 80002dc:	f001 faba 	bl	8001854 <HAL_Delay>
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <setCursor>:

/**
 @brief setCursor
*/
void setCursor(uint8_t col, uint8_t row)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	460a      	mov	r2, r1
 80002ee:	71fb      	strb	r3, [r7, #7]
 80002f0:	4613      	mov	r3, r2
 80002f2:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 80002f4:	2304      	movs	r3, #4
 80002f6:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 80002f8:	79bb      	ldrb	r3, [r7, #6]
 80002fa:	68fa      	ldr	r2, [r7, #12]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d803      	bhi.n	8000308 <setCursor+0x24>
	row = max_lines - 1;    // we count rows starting w/0
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	b2db      	uxtb	r3, r3
 8000304:	3b01      	subs	r3, #1
 8000306:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000308:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <setCursor+0x5c>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	79ba      	ldrb	r2, [r7, #6]
 800030e:	429a      	cmp	r2, r3
 8000310:	d303      	bcc.n	800031a <setCursor+0x36>
	row = _numlines - 1;    // we count rows starting w/0
 8000312:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <setCursor+0x5c>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	3b01      	subs	r3, #1
 8000318:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 800031a:	79bb      	ldrb	r3, [r7, #6]
 800031c:	4a09      	ldr	r2, [pc, #36]	; (8000344 <setCursor+0x60>)
 800031e:	5cd2      	ldrb	r2, [r2, r3]
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	4413      	add	r3, r2
 8000324:	b2db      	uxtb	r3, r3
 8000326:	b25b      	sxtb	r3, r3
 8000328:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800032c:	b25b      	sxtb	r3, r3
 800032e:	b2db      	uxtb	r3, r3
 8000330:	4618      	mov	r0, r3
 8000332:	f000 f81f 	bl	8000374 <command>
}
 8000336:	bf00      	nop
 8000338:	3710      	adds	r7, #16
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	200000a7 	.word	0x200000a7
 8000344:	200000a8 	.word	0x200000a8

08000348 <display>:
}

/**
 @brief Turn the display on (quickly)
*/
void display() {
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 800034c:	4b08      	ldr	r3, [pc, #32]	; (8000370 <display+0x28>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	f043 0304 	orr.w	r3, r3, #4
 8000354:	b2da      	uxtb	r2, r3
 8000356:	4b06      	ldr	r3, [pc, #24]	; (8000370 <display+0x28>)
 8000358:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 800035a:	4b05      	ldr	r3, [pc, #20]	; (8000370 <display+0x28>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	f043 0308 	orr.w	r3, r3, #8
 8000362:	b2db      	uxtb	r3, r3
 8000364:	4618      	mov	r0, r3
 8000366:	f000 f805 	bl	8000374 <command>
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	200000a5 	.word	0x200000a5

08000374 <command>:
/*********** mid level commands, for sending data/cmds */

/**
 @brief command
*/
inline void command(uint8_t value) {
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
  send(value, 0);
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f000 f813 	bl	80003ae <send>
}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <write>:

/**
 @brief write
*/
inline uint8_t write(uint8_t value) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
  send(value, RS);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	2140      	movs	r1, #64	; 0x40
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 f805 	bl	80003ae <send>
  return 1; // assume sucess
 80003a4:	2301      	movs	r3, #1
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}

080003ae <send>:
/************ low level data pushing commands **********/

/**
 @brief write either command or data, 4-bit
*/
void send(uint8_t value, uint8_t mode) {
 80003ae:	b580      	push	{r7, lr}
 80003b0:	b084      	sub	sp, #16
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	4603      	mov	r3, r0
 80003b6:	460a      	mov	r2, r1
 80003b8:	71fb      	strb	r3, [r7, #7]
 80003ba:	4613      	mov	r3, r2
 80003bc:	71bb      	strb	r3, [r7, #6]
  uint8_t Hbit = (value >> 4) & 0x0F;
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	091b      	lsrs	r3, r3, #4
 80003c2:	73fb      	strb	r3, [r7, #15]
  uint8_t Lbit = value & 0x0F;
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	f003 030f 	and.w	r3, r3, #15
 80003ca:	73bb      	strb	r3, [r7, #14]
  write4bits(Hbit|mode);
 80003cc:	7bfa      	ldrb	r2, [r7, #15]
 80003ce:	79bb      	ldrb	r3, [r7, #6]
 80003d0:	4313      	orrs	r3, r2
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	4618      	mov	r0, r3
 80003d6:	f000 f832 	bl	800043e <write4bits>
  write4bits(Lbit|mode);
 80003da:	7bba      	ldrb	r2, [r7, #14]
 80003dc:	79bb      	ldrb	r3, [r7, #6]
 80003de:	4313      	orrs	r3, r2
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 f82b 	bl	800043e <write4bits>
}
 80003e8:	bf00      	nop
 80003ea:	3710      	adds	r7, #16
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <pulseEnable>:

/**
 @brief pulseEnable
*/
void pulseEnable(uint8_t value) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	71fb      	strb	r3, [r7, #7]
  writeI2c(value & ~EN); // EN LOW
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	f023 0310 	bic.w	r3, r3, #16
 8000400:	b2db      	uxtb	r3, r3
 8000402:	4618      	mov	r0, r3
 8000404:	f000 f82c 	bl	8000460 <writeI2c>
  HAL_Delay(1);
 8000408:	2001      	movs	r0, #1
 800040a:	f001 fa23 	bl	8001854 <HAL_Delay>
  writeI2c(value|EN);    // EN HIGH
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	f043 0310 	orr.w	r3, r3, #16
 8000414:	b2db      	uxtb	r3, r3
 8000416:	4618      	mov	r0, r3
 8000418:	f000 f822 	bl	8000460 <writeI2c>
  HAL_Delay(1);  // enable pulse must be >450ns
 800041c:	2001      	movs	r0, #1
 800041e:	f001 fa19 	bl	8001854 <HAL_Delay>
  writeI2c(value & ~EN); // EN LOW
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	f023 0310 	bic.w	r3, r3, #16
 8000428:	b2db      	uxtb	r3, r3
 800042a:	4618      	mov	r0, r3
 800042c:	f000 f818 	bl	8000460 <writeI2c>
  HAL_Delay(1); // commands need > 37us to settle
 8000430:	2001      	movs	r0, #1
 8000432:	f001 fa0f 	bl	8001854 <HAL_Delay>
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}

0800043e <write4bits>:

/**
 @brief write4bits
*/
void write4bits(uint8_t value) {
 800043e:	b580      	push	{r7, lr}
 8000440:	b082      	sub	sp, #8
 8000442:	af00      	add	r7, sp, #0
 8000444:	4603      	mov	r3, r0
 8000446:	71fb      	strb	r3, [r7, #7]
  writeI2c(value);
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	4618      	mov	r0, r3
 800044c:	f000 f808 	bl	8000460 <writeI2c>
  pulseEnable(value);
 8000450:	79fb      	ldrb	r3, [r7, #7]
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff ffcc 	bl	80003f0 <pulseEnable>
}
 8000458:	bf00      	nop
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <writeI2c>:

/**
 @brief writeI2c
*/
void writeI2c(uint8_t data) {
 8000460:	b580      	push	{r7, lr}
 8000462:	b086      	sub	sp, #24
 8000464:	af02      	add	r7, sp, #8
 8000466:	4603      	mov	r3, r0
 8000468:	71fb      	strb	r3, [r7, #7]
  uint8_t data_t[1];
  data_t[0] = data|_backlight;
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <writeI2c+0x38>)
 800046c:	781a      	ldrb	r2, [r3, #0]
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	4313      	orrs	r3, r2
 8000472:	b2db      	uxtb	r3, r3
 8000474:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit (&hi2c1, (uint16_t)_i2caddr,(uint8_t *) data_t, 1, 0xFFFF);
 8000476:	4b09      	ldr	r3, [pc, #36]	; (800049c <writeI2c+0x3c>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	b299      	uxth	r1, r3
 800047c:	f107 020c 	add.w	r2, r7, #12
 8000480:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000484:	9300      	str	r3, [sp, #0]
 8000486:	2301      	movs	r3, #1
 8000488:	4805      	ldr	r0, [pc, #20]	; (80004a0 <writeI2c+0x40>)
 800048a:	f001 febf 	bl	800220c <HAL_I2C_Master_Transmit>
}
 800048e:	bf00      	nop
 8000490:	3710      	adds	r7, #16
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	200000ad 	.word	0x200000ad
 800049c:	200000ac 	.word	0x200000ac
 80004a0:	20000110 	.word	0x20000110

080004a4 <Lcd_Initialization>:

//////////////////////////////////////////////////////////////////////////


void Lcd_Initialization (void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	FaBoLCD_PCF8574(SLAVE_ADDRESS_LCD);
 80004a8:	2042      	movs	r0, #66	; 0x42
 80004aa:	f7ff fe4f 	bl	800014c <FaBoLCD_PCF8574>
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <Lcd_Send_Data>:
{
	command(cmd);
}

void Lcd_Send_Data (char data)
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	b082      	sub	sp, #8
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	4603      	mov	r3, r0
 80004ba:	71fb      	strb	r3, [r7, #7]
	write(data);
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff ff66 	bl	8000390 <write>
}
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <Lcd_Send_String>:

void Lcd_Send_String (char *str)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	while (*str) Lcd_Send_Data (*str++);
 80004d4:	e006      	b.n	80004e4 <Lcd_Send_String+0x18>
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	1c5a      	adds	r2, r3, #1
 80004da:	607a      	str	r2, [r7, #4]
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff ffe7 	bl	80004b2 <Lcd_Send_Data>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d1f4      	bne.n	80004d6 <Lcd_Send_String+0xa>
}
 80004ec:	bf00      	nop
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <Lcd_Goto_XY>:
{
	Lcd_Send_Cmd (0x01); //clear display
}

void Lcd_Goto_XY (int row, int col)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	b082      	sub	sp, #8
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
 80004fe:	6039      	str	r1, [r7, #0]
	setCursor(col, row);
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	b2db      	uxtb	r3, r3
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	b2d2      	uxtb	r2, r2
 8000508:	4611      	mov	r1, r2
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff feea 	bl	80002e4 <setCursor>
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <displayNum>:

	Lcd_Goto_XY(1, 0);
	Lcd_Send_String((char*)strTotalKWH);
}

void displayNum(int num1, int num2, int state1, int state2){
 8000518:	b580      	push	{r7, lr}
 800051a:	b08c      	sub	sp, #48	; 0x30
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
 8000524:	603b      	str	r3, [r7, #0]
	char str1[16];
	char str2[16];

	if (state1 == STATE_RED)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d107      	bne.n	800053c <displayNum+0x24>
		sprintf(str1, "Lane1->R: %03d", num1);
 800052c:	f107 0320 	add.w	r3, r7, #32
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	4928      	ldr	r1, [pc, #160]	; (80005d4 <displayNum+0xbc>)
 8000534:	4618      	mov	r0, r3
 8000536:	f004 f925 	bl	8004784 <siprintf>
 800053a:	e014      	b.n	8000566 <displayNum+0x4e>
	else if (state1 == STATE_GREEN)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b02      	cmp	r3, #2
 8000540:	d107      	bne.n	8000552 <displayNum+0x3a>
		sprintf(str1, "Lane1->G: %03d", num1);
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	4923      	ldr	r1, [pc, #140]	; (80005d8 <displayNum+0xc0>)
 800054a:	4618      	mov	r0, r3
 800054c:	f004 f91a 	bl	8004784 <siprintf>
 8000550:	e009      	b.n	8000566 <displayNum+0x4e>
	else if (state1 == STATE_YELLOW)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b03      	cmp	r3, #3
 8000556:	d106      	bne.n	8000566 <displayNum+0x4e>
		sprintf(str1, "Lane1->Y: %03d", num1);
 8000558:	f107 0320 	add.w	r3, r7, #32
 800055c:	68fa      	ldr	r2, [r7, #12]
 800055e:	491f      	ldr	r1, [pc, #124]	; (80005dc <displayNum+0xc4>)
 8000560:	4618      	mov	r0, r3
 8000562:	f004 f90f 	bl	8004784 <siprintf>

	if (state2 == STATE_RED)
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d107      	bne.n	800057c <displayNum+0x64>
		sprintf(str2, "Lane2->R: %03d", num2);
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	68ba      	ldr	r2, [r7, #8]
 8000572:	491b      	ldr	r1, [pc, #108]	; (80005e0 <displayNum+0xc8>)
 8000574:	4618      	mov	r0, r3
 8000576:	f004 f905 	bl	8004784 <siprintf>
 800057a:	e014      	b.n	80005a6 <displayNum+0x8e>
	else if (state2 == STATE_GREEN)
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	2b02      	cmp	r3, #2
 8000580:	d107      	bne.n	8000592 <displayNum+0x7a>
		sprintf(str2, "Lane2->G: %03d", num2);
 8000582:	f107 0310 	add.w	r3, r7, #16
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	4916      	ldr	r1, [pc, #88]	; (80005e4 <displayNum+0xcc>)
 800058a:	4618      	mov	r0, r3
 800058c:	f004 f8fa 	bl	8004784 <siprintf>
 8000590:	e009      	b.n	80005a6 <displayNum+0x8e>
	else if (state2 == STATE_YELLOW)
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	2b03      	cmp	r3, #3
 8000596:	d106      	bne.n	80005a6 <displayNum+0x8e>
		sprintf(str2, "Lane2->Y: %03d", num2);
 8000598:	f107 0310 	add.w	r3, r7, #16
 800059c:	68ba      	ldr	r2, [r7, #8]
 800059e:	4912      	ldr	r1, [pc, #72]	; (80005e8 <displayNum+0xd0>)
 80005a0:	4618      	mov	r0, r3
 80005a2:	f004 f8ef 	bl	8004784 <siprintf>

	Lcd_Goto_XY(0, 0);
 80005a6:	2100      	movs	r1, #0
 80005a8:	2000      	movs	r0, #0
 80005aa:	f7ff ffa4 	bl	80004f6 <Lcd_Goto_XY>
	Lcd_Send_String((char*)str1);
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff ff8a 	bl	80004cc <Lcd_Send_String>

	Lcd_Goto_XY(1, 0);
 80005b8:	2100      	movs	r1, #0
 80005ba:	2001      	movs	r0, #1
 80005bc:	f7ff ff9b 	bl	80004f6 <Lcd_Goto_XY>
	Lcd_Send_String((char*)str2);
 80005c0:	f107 0310 	add.w	r3, r7, #16
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff ff81 	bl	80004cc <Lcd_Send_String>
}
 80005ca:	bf00      	nop
 80005cc:	3730      	adds	r7, #48	; 0x30
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	080050ac 	.word	0x080050ac
 80005d8:	080050bc 	.word	0x080050bc
 80005dc:	080050cc 	.word	0x080050cc
 80005e0:	080050dc 	.word	0x080050dc
 80005e4:	080050ec 	.word	0x080050ec
 80005e8:	080050fc 	.word	0x080050fc

080005ec <play_music>:
uint16_t beep[3] = {1, 1, 1};
static const uint16_t melody[] = {NOTE_C6, NOTE_C6, NOTE_D6, NOTE_D6, NOTE_E6, NOTE_E6, NOTE_C6, 1};
static const uint16_t melodyLength = sizeof(melody) / sizeof(uint16_t);


void play_music(void){
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 10 + beep[i%3]);
 80005f0:	4b17      	ldr	r3, [pc, #92]	; (8000650 <play_music+0x64>)
 80005f2:	781a      	ldrb	r2, [r3, #0]
 80005f4:	4b17      	ldr	r3, [pc, #92]	; (8000654 <play_music+0x68>)
 80005f6:	fba3 1302 	umull	r1, r3, r3, r2
 80005fa:	0859      	lsrs	r1, r3, #1
 80005fc:	460b      	mov	r3, r1
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	440b      	add	r3, r1
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	b2db      	uxtb	r3, r3
 8000606:	461a      	mov	r2, r3
 8000608:	4b13      	ldr	r3, [pc, #76]	; (8000658 <play_music+0x6c>)
 800060a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800060e:	f103 020a 	add.w	r2, r3, #10
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <play_music+0x70>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->PSC = 64000/melody[i%melodyLength];
 8000618:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <play_music+0x64>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2208      	movs	r2, #8
 800061e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000622:	fb01 f202 	mul.w	r2, r1, r2
 8000626:	1a9b      	subs	r3, r3, r2
 8000628:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <play_music+0x74>)
 800062a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800062e:	461a      	mov	r2, r3
 8000630:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 8000634:	fb93 f2f2 	sdiv	r2, r3, r2
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <play_music+0x78>)
 800063a:	629a      	str	r2, [r3, #40]	; 0x28
	i++;
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <play_music+0x64>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	3301      	adds	r3, #1
 8000642:	b2da      	uxtb	r2, r3
 8000644:	4b02      	ldr	r3, [pc, #8]	; (8000650 <play_music+0x64>)
 8000646:	701a      	strb	r2, [r3, #0]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	200000ae 	.word	0x200000ae
 8000654:	aaaaaaab 	.word	0xaaaaaaab
 8000658:	20000000 	.word	0x20000000
 800065c:	200001ac 	.word	0x200001ac
 8000660:	0800511c 	.word	0x0800511c
 8000664:	40000400 	.word	0x40000400

08000668 <fsm_automatic_run>:
#include "fsm_automatic.h"

int num_buffer[2] = {0,0};
int state_buffer[2] = {0,0};

void fsm_automatic_run(void){
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	if (mode == MODE1){
 800066c:	4b63      	ldr	r3, [pc, #396]	; (80007fc <fsm_automatic_run+0x194>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b01      	cmp	r3, #1
 8000672:	f040 80c0 	bne.w	80007f6 <fsm_automatic_run+0x18e>
		switch (statusAUTO1){
 8000676:	4b62      	ldr	r3, [pc, #392]	; (8000800 <fsm_automatic_run+0x198>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b03      	cmp	r3, #3
 800067c:	f200 80aa 	bhi.w	80007d4 <fsm_automatic_run+0x16c>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <fsm_automatic_run+0x20>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	08000699 	.word	0x08000699
 800068c:	080006a7 	.word	0x080006a7
 8000690:	0800072b 	.word	0x0800072b
 8000694:	08000783 	.word	0x08000783
			case INIT:
				statusAUTO1 = STATE_RED;
 8000698:	4b59      	ldr	r3, [pc, #356]	; (8000800 <fsm_automatic_run+0x198>)
 800069a:	2201      	movs	r2, #1
 800069c:	601a      	str	r2, [r3, #0]
				setTimer2(1);
 800069e:	2001      	movs	r0, #1
 80006a0:	f000 fcde 	bl	8001060 <setTimer2>
				break;
 80006a4:	e09d      	b.n	80007e2 <fsm_automatic_run+0x17a>
			case STATE_RED:
				state_buffer[0] = STATE_RED;
 80006a6:	4b57      	ldr	r3, [pc, #348]	; (8000804 <fsm_automatic_run+0x19c>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	601a      	str	r2, [r3, #0]
				if (timer2_flag == 1){
 80006ac:	4b56      	ldr	r3, [pc, #344]	; (8000808 <fsm_automatic_run+0x1a0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	f040 8091 	bne.w	80007d8 <fsm_automatic_run+0x170>
					if (counterRed > AUTO_YELLOW){
 80006b6:	4b55      	ldr	r3, [pc, #340]	; (800080c <fsm_automatic_run+0x1a4>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	4b55      	ldr	r3, [pc, #340]	; (8000810 <fsm_automatic_run+0x1a8>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	429a      	cmp	r2, r3
 80006c0:	dd11      	ble.n	80006e6 <fsm_automatic_run+0x7e>
						state_buffer[1] = STATE_GREEN;
 80006c2:	4b50      	ldr	r3, [pc, #320]	; (8000804 <fsm_automatic_run+0x19c>)
 80006c4:	2202      	movs	r2, #2
 80006c6:	605a      	str	r2, [r3, #4]
						enableLedPannel(1);
 80006c8:	2001      	movs	r0, #1
 80006ca:	f000 fa25 	bl	8000b18 <enableLedPannel>
						num_buffer[0] = counterRed;
 80006ce:	4b4f      	ldr	r3, [pc, #316]	; (800080c <fsm_automatic_run+0x1a4>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a50      	ldr	r2, [pc, #320]	; (8000814 <fsm_automatic_run+0x1ac>)
 80006d4:	6013      	str	r3, [r2, #0]
						num_buffer[1] = counterRed - counterYellow;
 80006d6:	4b4d      	ldr	r3, [pc, #308]	; (800080c <fsm_automatic_run+0x1a4>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	4b4f      	ldr	r3, [pc, #316]	; (8000818 <fsm_automatic_run+0x1b0>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	4a4c      	ldr	r2, [pc, #304]	; (8000814 <fsm_automatic_run+0x1ac>)
 80006e2:	6053      	str	r3, [r2, #4]
 80006e4:	e00d      	b.n	8000702 <fsm_automatic_run+0x9a>
					}
					else{
						state_buffer[1] = STATE_YELLOW;
 80006e6:	4b47      	ldr	r3, [pc, #284]	; (8000804 <fsm_automatic_run+0x19c>)
 80006e8:	2203      	movs	r2, #3
 80006ea:	605a      	str	r2, [r3, #4]
						enableLedPannel(2);
 80006ec:	2002      	movs	r0, #2
 80006ee:	f000 fa13 	bl	8000b18 <enableLedPannel>
						num_buffer[0] = counterRed;
 80006f2:	4b46      	ldr	r3, [pc, #280]	; (800080c <fsm_automatic_run+0x1a4>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a47      	ldr	r2, [pc, #284]	; (8000814 <fsm_automatic_run+0x1ac>)
 80006f8:	6013      	str	r3, [r2, #0]
						num_buffer[1] = counterRed;
 80006fa:	4b44      	ldr	r3, [pc, #272]	; (800080c <fsm_automatic_run+0x1a4>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a45      	ldr	r2, [pc, #276]	; (8000814 <fsm_automatic_run+0x1ac>)
 8000700:	6053      	str	r3, [r2, #4]
					}
					counterRed--;
 8000702:	4b42      	ldr	r3, [pc, #264]	; (800080c <fsm_automatic_run+0x1a4>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	3b01      	subs	r3, #1
 8000708:	4a40      	ldr	r2, [pc, #256]	; (800080c <fsm_automatic_run+0x1a4>)
 800070a:	6013      	str	r3, [r2, #0]
					if (counterRed == INIT){
 800070c:	4b3f      	ldr	r3, [pc, #252]	; (800080c <fsm_automatic_run+0x1a4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d106      	bne.n	8000722 <fsm_automatic_run+0xba>
						counterRed = AUTO_RED;
 8000714:	4b41      	ldr	r3, [pc, #260]	; (800081c <fsm_automatic_run+0x1b4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a3c      	ldr	r2, [pc, #240]	; (800080c <fsm_automatic_run+0x1a4>)
 800071a:	6013      	str	r3, [r2, #0]
						statusAUTO1 = STATE_GREEN;
 800071c:	4b38      	ldr	r3, [pc, #224]	; (8000800 <fsm_automatic_run+0x198>)
 800071e:	2202      	movs	r2, #2
 8000720:	601a      	str	r2, [r3, #0]
					}
					setTimer2(100);
 8000722:	2064      	movs	r0, #100	; 0x64
 8000724:	f000 fc9c 	bl	8001060 <setTimer2>
				}
				break;
 8000728:	e056      	b.n	80007d8 <fsm_automatic_run+0x170>
			case STATE_GREEN:
				state_buffer[0] = STATE_GREEN;
 800072a:	4b36      	ldr	r3, [pc, #216]	; (8000804 <fsm_automatic_run+0x19c>)
 800072c:	2202      	movs	r2, #2
 800072e:	601a      	str	r2, [r3, #0]
				state_buffer[1] = STATE_RED;
 8000730:	4b34      	ldr	r3, [pc, #208]	; (8000804 <fsm_automatic_run+0x19c>)
 8000732:	2201      	movs	r2, #1
 8000734:	605a      	str	r2, [r3, #4]
				if (timer2_flag == 1){
 8000736:	4b34      	ldr	r3, [pc, #208]	; (8000808 <fsm_automatic_run+0x1a0>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d14e      	bne.n	80007dc <fsm_automatic_run+0x174>
					enableLedPannel(3);
 800073e:	2003      	movs	r0, #3
 8000740:	f000 f9ea 	bl	8000b18 <enableLedPannel>
					num_buffer[0] = counterGreen;
 8000744:	4b36      	ldr	r3, [pc, #216]	; (8000820 <fsm_automatic_run+0x1b8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a32      	ldr	r2, [pc, #200]	; (8000814 <fsm_automatic_run+0x1ac>)
 800074a:	6013      	str	r3, [r2, #0]
					num_buffer[1] = counterGreen + counterYellow;
 800074c:	4b34      	ldr	r3, [pc, #208]	; (8000820 <fsm_automatic_run+0x1b8>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b31      	ldr	r3, [pc, #196]	; (8000818 <fsm_automatic_run+0x1b0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4413      	add	r3, r2
 8000756:	4a2f      	ldr	r2, [pc, #188]	; (8000814 <fsm_automatic_run+0x1ac>)
 8000758:	6053      	str	r3, [r2, #4]
					counterGreen--;
 800075a:	4b31      	ldr	r3, [pc, #196]	; (8000820 <fsm_automatic_run+0x1b8>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	3b01      	subs	r3, #1
 8000760:	4a2f      	ldr	r2, [pc, #188]	; (8000820 <fsm_automatic_run+0x1b8>)
 8000762:	6013      	str	r3, [r2, #0]
					if (counterGreen == INIT){
 8000764:	4b2e      	ldr	r3, [pc, #184]	; (8000820 <fsm_automatic_run+0x1b8>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d106      	bne.n	800077a <fsm_automatic_run+0x112>
						counterGreen = AUTO_GREEN;
 800076c:	4b2d      	ldr	r3, [pc, #180]	; (8000824 <fsm_automatic_run+0x1bc>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a2b      	ldr	r2, [pc, #172]	; (8000820 <fsm_automatic_run+0x1b8>)
 8000772:	6013      	str	r3, [r2, #0]
						statusAUTO1 = STATE_YELLOW;
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <fsm_automatic_run+0x198>)
 8000776:	2203      	movs	r2, #3
 8000778:	601a      	str	r2, [r3, #0]
					}
					setTimer2(100);
 800077a:	2064      	movs	r0, #100	; 0x64
 800077c:	f000 fc70 	bl	8001060 <setTimer2>
				}
				break;
 8000780:	e02c      	b.n	80007dc <fsm_automatic_run+0x174>
			case STATE_YELLOW:
				state_buffer[0] = STATE_YELLOW;
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <fsm_automatic_run+0x19c>)
 8000784:	2203      	movs	r2, #3
 8000786:	601a      	str	r2, [r3, #0]
				state_buffer[1] = STATE_RED;
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <fsm_automatic_run+0x19c>)
 800078a:	2201      	movs	r2, #1
 800078c:	605a      	str	r2, [r3, #4]
				if (timer2_flag == 1){
 800078e:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <fsm_automatic_run+0x1a0>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d124      	bne.n	80007e0 <fsm_automatic_run+0x178>
					enableLedPannel(4);
 8000796:	2004      	movs	r0, #4
 8000798:	f000 f9be 	bl	8000b18 <enableLedPannel>
					num_buffer[0] = counterYellow;
 800079c:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <fsm_automatic_run+0x1b0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <fsm_automatic_run+0x1ac>)
 80007a2:	6013      	str	r3, [r2, #0]
					num_buffer[1] = counterYellow;
 80007a4:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <fsm_automatic_run+0x1b0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a1a      	ldr	r2, [pc, #104]	; (8000814 <fsm_automatic_run+0x1ac>)
 80007aa:	6053      	str	r3, [r2, #4]
					counterYellow--;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <fsm_automatic_run+0x1b0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	3b01      	subs	r3, #1
 80007b2:	4a19      	ldr	r2, [pc, #100]	; (8000818 <fsm_automatic_run+0x1b0>)
 80007b4:	6013      	str	r3, [r2, #0]
					if (counterYellow == INIT){
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <fsm_automatic_run+0x1b0>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d106      	bne.n	80007cc <fsm_automatic_run+0x164>
						counterYellow = AUTO_YELLOW;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <fsm_automatic_run+0x1a8>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a15      	ldr	r2, [pc, #84]	; (8000818 <fsm_automatic_run+0x1b0>)
 80007c4:	6013      	str	r3, [r2, #0]
						statusAUTO1 = STATE_RED;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <fsm_automatic_run+0x198>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	601a      	str	r2, [r3, #0]
					}
					setTimer2(100);
 80007cc:	2064      	movs	r0, #100	; 0x64
 80007ce:	f000 fc47 	bl	8001060 <setTimer2>
				}
				break;
 80007d2:	e005      	b.n	80007e0 <fsm_automatic_run+0x178>
			default:
				break;
 80007d4:	bf00      	nop
 80007d6:	e004      	b.n	80007e2 <fsm_automatic_run+0x17a>
				break;
 80007d8:	bf00      	nop
 80007da:	e002      	b.n	80007e2 <fsm_automatic_run+0x17a>
				break;
 80007dc:	bf00      	nop
 80007de:	e000      	b.n	80007e2 <fsm_automatic_run+0x17a>
				break;
 80007e0:	bf00      	nop
		}


		displayNum(num_buffer[0], num_buffer[1], state_buffer[0], state_buffer[1]);
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <fsm_automatic_run+0x1ac>)
 80007e4:	6818      	ldr	r0, [r3, #0]
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <fsm_automatic_run+0x1ac>)
 80007e8:	6859      	ldr	r1, [r3, #4]
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <fsm_automatic_run+0x19c>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	4b05      	ldr	r3, [pc, #20]	; (8000804 <fsm_automatic_run+0x19c>)
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	f7ff fe91 	bl	8000518 <displayNum>
//			default:
//				break;
//		}
	}

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200000c0 	.word	0x200000c0
 8000800:	200000c4 	.word	0x200000c4
 8000804:	200000b8 	.word	0x200000b8
 8000808:	20000244 	.word	0x20000244
 800080c:	20000104 	.word	0x20000104
 8000810:	20000100 	.word	0x20000100
 8000814:	200000b0 	.word	0x200000b0
 8000818:	2000010c 	.word	0x2000010c
 800081c:	200000f8 	.word	0x200000f8
 8000820:	20000108 	.word	0x20000108
 8000824:	200000fc 	.word	0x200000fc

08000828 <initWaitingTime>:

int counterRed = 0;
int counterGreen = 0;
int counterYellow = 0;

void initWaitingTime(void){
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
	AUTO_GREEN = 18;
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <initWaitingTime+0x28>)
 800082e:	2212      	movs	r2, #18
 8000830:	601a      	str	r2, [r3, #0]
	AUTO_YELLOW = 7;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <initWaitingTime+0x2c>)
 8000834:	2207      	movs	r2, #7
 8000836:	601a      	str	r2, [r3, #0]
	AUTO_RED = AUTO_GREEN + AUTO_YELLOW;
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <initWaitingTime+0x28>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <initWaitingTime+0x2c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4413      	add	r3, r2
 8000842:	4a05      	ldr	r2, [pc, #20]	; (8000858 <initWaitingTime+0x30>)
 8000844:	6013      	str	r3, [r2, #0]
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	200000fc 	.word	0x200000fc
 8000854:	20000100 	.word	0x20000100
 8000858:	200000f8 	.word	0x200000f8

0800085c <initVar>:

void initVar(void){
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
	mode = MODE1;
 8000860:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <initVar+0x78>)
 8000862:	2201      	movs	r2, #1
 8000864:	601a      	str	r2, [r3, #0]

	statusAUTO1 = INIT;
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <initVar+0x7c>)
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
	statusAUTO2 = INIT;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <initVar+0x80>)
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
	statusAUTO3 = INIT;
 8000872:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <initVar+0x84>)
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
	statusAUTO4 = INIT;
 8000878:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <initVar+0x88>)
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]

	statusMODE2_1 = INIT;
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <initVar+0x8c>)
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
	statusMODE2_2 = INIT;
 8000884:	4b19      	ldr	r3, [pc, #100]	; (80008ec <initVar+0x90>)
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
	statusMODE2_3 = INIT;
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <initVar+0x94>)
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]

	statusMODE3_1 = INIT;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <initVar+0x98>)
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
	statusMODE3_2 = INIT;
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <initVar+0x9c>)
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
	statusMODE3_3 = INIT;
 800089c:	4b17      	ldr	r3, [pc, #92]	; (80008fc <initVar+0xa0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]

	statusMODE4_1 = INIT;
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <initVar+0xa4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
	statusMODE4_2 = INIT;
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <initVar+0xa8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
	statusMODE4_3 = INIT;
 80008ae:	4b16      	ldr	r3, [pc, #88]	; (8000908 <initVar+0xac>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]

	counterRed = AUTO_RED;
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <initVar+0xb0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a15      	ldr	r2, [pc, #84]	; (8000910 <initVar+0xb4>)
 80008ba:	6013      	str	r3, [r2, #0]
	counterGreen = AUTO_GREEN;
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <initVar+0xb8>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a15      	ldr	r2, [pc, #84]	; (8000918 <initVar+0xbc>)
 80008c2:	6013      	str	r3, [r2, #0]
	counterYellow = AUTO_YELLOW;
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <initVar+0xc0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a15      	ldr	r2, [pc, #84]	; (8000920 <initVar+0xc4>)
 80008ca:	6013      	str	r3, [r2, #0]
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	200000c0 	.word	0x200000c0
 80008d8:	200000c4 	.word	0x200000c4
 80008dc:	200000c8 	.word	0x200000c8
 80008e0:	200000cc 	.word	0x200000cc
 80008e4:	200000d0 	.word	0x200000d0
 80008e8:	200000d4 	.word	0x200000d4
 80008ec:	200000d8 	.word	0x200000d8
 80008f0:	200000dc 	.word	0x200000dc
 80008f4:	200000e0 	.word	0x200000e0
 80008f8:	200000e4 	.word	0x200000e4
 80008fc:	200000e8 	.word	0x200000e8
 8000900:	200000ec 	.word	0x200000ec
 8000904:	200000f0 	.word	0x200000f0
 8000908:	200000f4 	.word	0x200000f4
 800090c:	200000f8 	.word	0x200000f8
 8000910:	20000104 	.word	0x20000104
 8000914:	200000fc 	.word	0x200000fc
 8000918:	20000108 	.word	0x20000108
 800091c:	20000100 	.word	0x20000100
 8000920:	2000010c 	.word	0x2000010c

08000924 <latchEnable>:
 *      Author: Admin
 */

#include "led_pannel.h"

void latchEnable (void){
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_LE_GPIO_Port, LED_LE_Pin, RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	2110      	movs	r1, #16
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <latchEnable+0x14>)
 800092e:	f001 faf7 	bl	8001f20 <HAL_GPIO_WritePin>
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40011000 	.word	0x40011000

0800093c <latchDisable>:

void latchDisable (void){
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_LE_GPIO_Port, LED_LE_Pin, SET);
 8000940:	2201      	movs	r2, #1
 8000942:	2110      	movs	r1, #16
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <latchDisable+0x14>)
 8000946:	f001 faeb 	bl	8001f20 <HAL_GPIO_WritePin>
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40011000 	.word	0x40011000

08000954 <outputEnable>:

void outputEnable (void){
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_OE_GPIO_Port, LED_OE_Pin, SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2120      	movs	r1, #32
 800095c:	4802      	ldr	r0, [pc, #8]	; (8000968 <outputEnable+0x14>)
 800095e:	f001 fadf 	bl	8001f20 <HAL_GPIO_WritePin>
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40011000 	.word	0x40011000

0800096c <clockON>:

void outputDisable (void){
	HAL_GPIO_WritePin(LED_OE_GPIO_Port, LED_OE_Pin, RESET);
}

void clockON (void){
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_SCK_GPIO_Port, LED_SCK_Pin, RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	2108      	movs	r1, #8
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <clockON+0x14>)
 8000976:	f001 fad3 	bl	8001f20 <HAL_GPIO_WritePin>
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40011000 	.word	0x40011000

08000984 <clockOFF>:

void clockOFF (void){
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_SCK_GPIO_Port, LED_SCK_Pin, SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2108      	movs	r1, #8
 800098c:	4802      	ldr	r0, [pc, #8]	; (8000998 <clockOFF+0x14>)
 800098e:	f001 fac7 	bl	8001f20 <HAL_GPIO_WritePin>
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40011000 	.word	0x40011000

0800099c <dataOUT>:

void dataOUT (GPIO_PinState state){
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_SDI_GPIO_Port, LED_SDI_Pin, state);
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	461a      	mov	r2, r3
 80009aa:	2140      	movs	r1, #64	; 0x40
 80009ac:	4803      	ldr	r0, [pc, #12]	; (80009bc <dataOUT+0x20>)
 80009ae:	f001 fab7 	bl	8001f20 <HAL_GPIO_WritePin>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40011000 	.word	0x40011000

080009c0 <getBitValue>:

uint8_t getBitValue (uint32_t data, uint32_t index){
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
	data = (data >> index) & 0x01;
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	fa22 f303 	lsr.w	r3, r2, r3
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	607b      	str	r3, [r7, #4]
	return data;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	b2db      	uxtb	r3, r3
}
 80009dc:	4618      	mov	r0, r3
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
	...

080009e8 <ledDisplay1>:


uint32_t data[4] = {0x40800, 0x40300, 0x21000, 0x0D000};

void ledDisplay1 (void){	//red1 + green2
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
	uint8_t i;
	uint32_t temp1 = data[0];
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <ledDisplay1+0x48>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	603b      	str	r3, [r7, #0]
	latchDisable();
 80009f4:	f7ff ffa2 	bl	800093c <latchDisable>
	for(i = 0; i < 20; i++){
 80009f8:	2300      	movs	r3, #0
 80009fa:	71fb      	strb	r3, [r7, #7]
 80009fc:	e00f      	b.n	8000a1e <ledDisplay1+0x36>
		clockOFF();
 80009fe:	f7ff ffc1 	bl	8000984 <clockOFF>
		dataOUT(getBitValue(temp1, i));
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	4619      	mov	r1, r3
 8000a06:	6838      	ldr	r0, [r7, #0]
 8000a08:	f7ff ffda 	bl	80009c0 <getBitValue>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff ffc4 	bl	800099c <dataOUT>
		clockON();
 8000a14:	f7ff ffaa 	bl	800096c <clockON>
	for(i = 0; i < 20; i++){
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	71fb      	strb	r3, [r7, #7]
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	2b13      	cmp	r3, #19
 8000a22:	d9ec      	bls.n	80009fe <ledDisplay1+0x16>
	}
	latchEnable();
 8000a24:	f7ff ff7e 	bl	8000924 <latchEnable>
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000008 	.word	0x20000008

08000a34 <ledDisplay2>:

void ledDisplay2 (void){	//red1 + yellow2
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
	uint8_t i;
	uint32_t temp1 = data[1];
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <ledDisplay2+0x48>)
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	603b      	str	r3, [r7, #0]
	latchDisable();
 8000a40:	f7ff ff7c 	bl	800093c <latchDisable>
	for(i = 0; i < 20; i++){
 8000a44:	2300      	movs	r3, #0
 8000a46:	71fb      	strb	r3, [r7, #7]
 8000a48:	e00f      	b.n	8000a6a <ledDisplay2+0x36>
		clockOFF();
 8000a4a:	f7ff ff9b 	bl	8000984 <clockOFF>
		dataOUT(getBitValue(temp1, i));
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	4619      	mov	r1, r3
 8000a52:	6838      	ldr	r0, [r7, #0]
 8000a54:	f7ff ffb4 	bl	80009c0 <getBitValue>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff ff9e 	bl	800099c <dataOUT>
		clockON();
 8000a60:	f7ff ff84 	bl	800096c <clockON>
	for(i = 0; i < 20; i++){
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	3301      	adds	r3, #1
 8000a68:	71fb      	strb	r3, [r7, #7]
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b13      	cmp	r3, #19
 8000a6e:	d9ec      	bls.n	8000a4a <ledDisplay2+0x16>
	}
	latchEnable();
 8000a70:	f7ff ff58 	bl	8000924 <latchEnable>
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000008 	.word	0x20000008

08000a80 <ledDisplay3>:

void ledDisplay3 (void){	//Green1 + Red2
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
	uint8_t i;
	uint32_t temp1 = data[2];
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <ledDisplay3+0x48>)
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	603b      	str	r3, [r7, #0]
	latchDisable();
 8000a8c:	f7ff ff56 	bl	800093c <latchDisable>
	for(i = 0; i < 20; i++){
 8000a90:	2300      	movs	r3, #0
 8000a92:	71fb      	strb	r3, [r7, #7]
 8000a94:	e00f      	b.n	8000ab6 <ledDisplay3+0x36>
		clockOFF();
 8000a96:	f7ff ff75 	bl	8000984 <clockOFF>
		dataOUT(getBitValue(temp1, i));
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	6838      	ldr	r0, [r7, #0]
 8000aa0:	f7ff ff8e 	bl	80009c0 <getBitValue>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ff78 	bl	800099c <dataOUT>
		clockON();
 8000aac:	f7ff ff5e 	bl	800096c <clockON>
	for(i = 0; i < 20; i++){
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	71fb      	strb	r3, [r7, #7]
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b13      	cmp	r3, #19
 8000aba:	d9ec      	bls.n	8000a96 <ledDisplay3+0x16>
	}
	latchEnable();
 8000abc:	f7ff ff32 	bl	8000924 <latchEnable>
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000008 	.word	0x20000008

08000acc <ledDisplay4>:

void ledDisplay4 (void){	//Yellow1 + Red2
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
	uint8_t i;
	uint32_t temp1 = data[3];
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <ledDisplay4+0x48>)
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	603b      	str	r3, [r7, #0]
	latchDisable();
 8000ad8:	f7ff ff30 	bl	800093c <latchDisable>
	for(i = 0; i < 20; i++){
 8000adc:	2300      	movs	r3, #0
 8000ade:	71fb      	strb	r3, [r7, #7]
 8000ae0:	e00f      	b.n	8000b02 <ledDisplay4+0x36>
		clockOFF();
 8000ae2:	f7ff ff4f 	bl	8000984 <clockOFF>
		dataOUT(getBitValue(temp1, i));
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	6838      	ldr	r0, [r7, #0]
 8000aec:	f7ff ff68 	bl	80009c0 <getBitValue>
 8000af0:	4603      	mov	r3, r0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff ff52 	bl	800099c <dataOUT>
		clockON();
 8000af8:	f7ff ff38 	bl	800096c <clockON>
	for(i = 0; i < 20; i++){
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	3301      	adds	r3, #1
 8000b00:	71fb      	strb	r3, [r7, #7]
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	2b13      	cmp	r3, #19
 8000b06:	d9ec      	bls.n	8000ae2 <ledDisplay4+0x16>
	}
	latchEnable();
 8000b08:	f7ff ff0c 	bl	8000924 <latchEnable>
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000008 	.word	0x20000008

08000b18 <enableLedPannel>:


void enableLedPannel (int index){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	switch (index){
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	2b03      	cmp	r3, #3
 8000b26:	d817      	bhi.n	8000b58 <enableLedPannel+0x40>
 8000b28:	a201      	add	r2, pc, #4	; (adr r2, 8000b30 <enableLedPannel+0x18>)
 8000b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b2e:	bf00      	nop
 8000b30:	08000b41 	.word	0x08000b41
 8000b34:	08000b47 	.word	0x08000b47
 8000b38:	08000b4d 	.word	0x08000b4d
 8000b3c:	08000b53 	.word	0x08000b53
		case 1:
			ledDisplay1();
 8000b40:	f7ff ff52 	bl	80009e8 <ledDisplay1>
			break;
 8000b44:	e009      	b.n	8000b5a <enableLedPannel+0x42>
		case 2:
			ledDisplay2();
 8000b46:	f7ff ff75 	bl	8000a34 <ledDisplay2>
			break;
 8000b4a:	e006      	b.n	8000b5a <enableLedPannel+0x42>
		case 3:
			ledDisplay3();
 8000b4c:	f7ff ff98 	bl	8000a80 <ledDisplay3>
			break;
 8000b50:	e003      	b.n	8000b5a <enableLedPannel+0x42>
		case 4:
			ledDisplay4();
 8000b52:	f7ff ffbb 	bl	8000acc <ledDisplay4>
			break;
 8000b56:	e000      	b.n	8000b5a <enableLedPannel+0x42>
		default:
			break;
 8000b58:	bf00      	nop
	}
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop

08000b64 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3){
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <HAL_UART_RxCpltCallback+0x60>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d122      	bne.n	8000bbc <HAL_UART_RxCpltCallback+0x58>
		HAL_UART_Transmit(&huart3, &buffer_byte, 1, 500);
 8000b76:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	4912      	ldr	r1, [pc, #72]	; (8000bc8 <HAL_UART_RxCpltCallback+0x64>)
 8000b7e:	4813      	ldr	r0, [pc, #76]	; (8000bcc <HAL_UART_RxCpltCallback+0x68>)
 8000b80:	f003 f8e3 	bl	8003d4a <HAL_UART_Transmit>
		buffer[index_buffer] = buffer_byte;
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_UART_RxCpltCallback+0x6c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <HAL_UART_RxCpltCallback+0x64>)
 8000b8c:	7819      	ldrb	r1, [r3, #0]
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <HAL_UART_RxCpltCallback+0x70>)
 8000b90:	5499      	strb	r1, [r3, r2]
		index_buffer++;
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <HAL_UART_RxCpltCallback+0x6c>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	3301      	adds	r3, #1
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <HAL_UART_RxCpltCallback+0x6c>)
 8000b9c:	701a      	strb	r2, [r3, #0]
		if (index_buffer == MAX_BUFFER_SIZE) index_buffer = 0;
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <HAL_UART_RxCpltCallback+0x6c>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b1e      	cmp	r3, #30
 8000ba4:	d102      	bne.n	8000bac <HAL_UART_RxCpltCallback+0x48>
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <HAL_UART_RxCpltCallback+0x6c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <HAL_UART_RxCpltCallback+0x74>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, &buffer_byte, 1);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4904      	ldr	r1, [pc, #16]	; (8000bc8 <HAL_UART_RxCpltCallback+0x64>)
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <HAL_UART_RxCpltCallback+0x68>)
 8000bb8:	f003 f959 	bl	8003e6e <HAL_UART_Receive_IT>
	}
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40004800 	.word	0x40004800
 8000bc8:	2000028c 	.word	0x2000028c
 8000bcc:	200001f4 	.word	0x200001f4
 8000bd0:	200002ae 	.word	0x200002ae
 8000bd4:	20000290 	.word	0x20000290
 8000bd8:	200002af 	.word	0x200002af

08000bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be0:	f000 fdd6 	bl	8001790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be4:	f000 f842 	bl	8000c6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be8:	f000 f996 	bl	8000f18 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bec:	f000 f8a8 	bl	8000d40 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000bf0:	f000 f878 	bl	8000ce4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000bf4:	f000 f966 	bl	8000ec4 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000bf8:	f000 f8ee 	bl	8000dd8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000bfc:	4815      	ldr	r0, [pc, #84]	; (8000c54 <main+0x78>)
 8000bfe:	f002 fa75 	bl	80030ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000c02:	4815      	ldr	r0, [pc, #84]	; (8000c58 <main+0x7c>)
 8000c04:	f002 fa72 	bl	80030ec <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart3, &buffer_byte, 1);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	4914      	ldr	r1, [pc, #80]	; (8000c5c <main+0x80>)
 8000c0c:	4814      	ldr	r0, [pc, #80]	; (8000c60 <main+0x84>)
 8000c0e:	f003 f92e 	bl	8003e6e <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2104      	movs	r1, #4
 8000c16:	4813      	ldr	r0, [pc, #76]	; (8000c64 <main+0x88>)
 8000c18:	f001 f982 	bl	8001f20 <HAL_GPIO_WritePin>
  outputEnable();
 8000c1c:	f7ff fe9a 	bl	8000954 <outputEnable>
  Lcd_Initialization();
 8000c20:	f7ff fc40 	bl	80004a4 <Lcd_Initialization>
  initWaitingTime();
 8000c24:	f7ff fe00 	bl	8000828 <initWaitingTime>
  initVar();
 8000c28:	f7ff fe18 	bl	800085c <initVar>
  setTimer1(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f000 fa03 	bl	8001038 <setTimer1>
  play_music();
 8000c32:	f7ff fcdb 	bl	80005ec <play_music>
//	if (timer1_flag == 1){
//		HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
//		setTimer1(100);
//	}

	fsm_automatic_run();
 8000c36:	f7ff fd17 	bl	8000668 <fsm_automatic_run>

	if (buffer_flag == 1){
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <main+0x8c>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d104      	bne.n	8000c4c <main+0x70>
		cmd_parser_fsm();
 8000c42:	f000 fcf7 	bl	8001634 <cmd_parser_fsm>
		buffer_flag = 0;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <main+0x8c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
	}
	uart_comms_fsm();
 8000c4c:	f000 fd52 	bl	80016f4 <uart_comms_fsm>
	fsm_automatic_run();
 8000c50:	e7f1      	b.n	8000c36 <main+0x5a>
 8000c52:	bf00      	nop
 8000c54:	20000164 	.word	0x20000164
 8000c58:	200001ac 	.word	0x200001ac
 8000c5c:	2000028c 	.word	0x2000028c
 8000c60:	200001f4 	.word	0x200001f4
 8000c64:	40011400 	.word	0x40011400
 8000c68:	200002af 	.word	0x200002af

08000c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b090      	sub	sp, #64	; 0x40
 8000c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c72:	f107 0318 	add.w	r3, r7, #24
 8000c76:	2228      	movs	r2, #40	; 0x28
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f003 fd7a 	bl	8004774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c92:	2301      	movs	r3, #1
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c96:	2310      	movs	r3, #16
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9e:	f107 0318 	add.w	r3, r7, #24
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f001 fdb8 	bl	8002818 <HAL_RCC_OscConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cae:	f000 f9bd 	bl	800102c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb2:	230f      	movs	r3, #15
 8000cb4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f002 f826 	bl	8002d1c <HAL_RCC_ClockConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cd6:	f000 f9a9 	bl	800102c <Error_Handler>
  }
}
 8000cda:	bf00      	nop
 8000cdc:	3740      	adds	r7, #64	; 0x40
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000cea:	4a13      	ldr	r2, [pc, #76]	; (8000d38 <MX_I2C1_Init+0x54>)
 8000cec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000cf0:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <MX_I2C1_Init+0x58>)
 8000cf2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000d02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d08:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d20:	4804      	ldr	r0, [pc, #16]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000d22:	f001 f92f 	bl	8001f84 <HAL_I2C_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d2c:	f000 f97e 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000110 	.word	0x20000110
 8000d38:	40005400 	.word	0x40005400
 8000d3c:	000186a0 	.word	0x000186a0

08000d40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d46:	f107 0308 	add.w	r3, r7, #8
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d54:	463b      	mov	r3, r7
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <MX_TIM2_Init+0x94>)
 8000d5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d64:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <MX_TIM2_Init+0x94>)
 8000d66:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <MX_TIM2_Init+0x94>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <MX_TIM2_Init+0x94>)
 8000d74:	2209      	movs	r2, #9
 8000d76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <MX_TIM2_Init+0x94>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <MX_TIM2_Init+0x94>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d84:	4813      	ldr	r0, [pc, #76]	; (8000dd4 <MX_TIM2_Init+0x94>)
 8000d86:	f002 f961 	bl	800304c <HAL_TIM_Base_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d90:	f000 f94c 	bl	800102c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d9a:	f107 0308 	add.w	r3, r7, #8
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <MX_TIM2_Init+0x94>)
 8000da2:	f002 fbad 	bl	8003500 <HAL_TIM_ConfigClockSource>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000dac:	f000 f93e 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db0:	2300      	movs	r3, #0
 8000db2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000db8:	463b      	mov	r3, r7
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_TIM2_Init+0x94>)
 8000dbe:	f002 ff07 	bl	8003bd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000dc8:	f000 f930 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000164 	.word	0x20000164

08000dd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08e      	sub	sp, #56	; 0x38
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dec:	f107 0320 	add.w	r3, r7, #32
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
 8000e04:	615a      	str	r2, [r3, #20]
 8000e06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e08:	4b2c      	ldr	r3, [pc, #176]	; (8000ebc <MX_TIM3_Init+0xe4>)
 8000e0a:	4a2d      	ldr	r2, [pc, #180]	; (8000ec0 <MX_TIM3_Init+0xe8>)
 8000e0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <MX_TIM3_Init+0xe4>)
 8000e10:	223f      	movs	r2, #63	; 0x3f
 8000e12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e14:	4b29      	ldr	r3, [pc, #164]	; (8000ebc <MX_TIM3_Init+0xe4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000e1a:	4b28      	ldr	r3, [pc, #160]	; (8000ebc <MX_TIM3_Init+0xe4>)
 8000e1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e22:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <MX_TIM3_Init+0xe4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e28:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <MX_TIM3_Init+0xe4>)
 8000e2a:	2280      	movs	r2, #128	; 0x80
 8000e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e2e:	4823      	ldr	r0, [pc, #140]	; (8000ebc <MX_TIM3_Init+0xe4>)
 8000e30:	f002 f90c 	bl	800304c <HAL_TIM_Base_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000e3a:	f000 f8f7 	bl	800102c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	481c      	ldr	r0, [pc, #112]	; (8000ebc <MX_TIM3_Init+0xe4>)
 8000e4c:	f002 fb58 	bl	8003500 <HAL_TIM_ConfigClockSource>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000e56:	f000 f8e9 	bl	800102c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000e5a:	4818      	ldr	r0, [pc, #96]	; (8000ebc <MX_TIM3_Init+0xe4>)
 8000e5c:	f002 f998 	bl	8003190 <HAL_TIM_OC_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000e66:	f000 f8e1 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e72:	f107 0320 	add.w	r3, r7, #32
 8000e76:	4619      	mov	r1, r3
 8000e78:	4810      	ldr	r0, [pc, #64]	; (8000ebc <MX_TIM3_Init+0xe4>)
 8000e7a:	f002 fea9 	bl	8003bd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e84:	f000 f8d2 	bl	800102c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4807      	ldr	r0, [pc, #28]	; (8000ebc <MX_TIM3_Init+0xe4>)
 8000ea0:	f002 fad6 	bl	8003450 <HAL_TIM_OC_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000eaa:	f000 f8bf 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000eae:	4803      	ldr	r0, [pc, #12]	; (8000ebc <MX_TIM3_Init+0xe4>)
 8000eb0:	f000 fa74 	bl	800139c <HAL_TIM_MspPostInit>

}
 8000eb4:	bf00      	nop
 8000eb6:	3738      	adds	r7, #56	; 0x38
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	200001ac 	.word	0x200001ac
 8000ec0:	40000400 	.word	0x40000400

08000ec4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_USART3_UART_Init+0x4c>)
 8000eca:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <MX_USART3_UART_Init+0x50>)
 8000ecc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <MX_USART3_UART_Init+0x4c>)
 8000ed0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ed4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_USART3_UART_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_USART3_UART_Init+0x4c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MX_USART3_UART_Init+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_USART3_UART_Init+0x4c>)
 8000eea:	220c      	movs	r2, #12
 8000eec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_USART3_UART_Init+0x4c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_USART3_UART_Init+0x4c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_USART3_UART_Init+0x4c>)
 8000efc:	f002 fed8 	bl	8003cb0 <HAL_UART_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f06:	f000 f891 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200001f4 	.word	0x200001f4
 8000f14:	40004800 	.word	0x40004800

08000f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	f107 0310 	add.w	r3, r7, #16
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2c:	4b36      	ldr	r3, [pc, #216]	; (8001008 <MX_GPIO_Init+0xf0>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a35      	ldr	r2, [pc, #212]	; (8001008 <MX_GPIO_Init+0xf0>)
 8000f32:	f043 0310 	orr.w	r3, r3, #16
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b33      	ldr	r3, [pc, #204]	; (8001008 <MX_GPIO_Init+0xf0>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0310 	and.w	r3, r3, #16
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	4b30      	ldr	r3, [pc, #192]	; (8001008 <MX_GPIO_Init+0xf0>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	4a2f      	ldr	r2, [pc, #188]	; (8001008 <MX_GPIO_Init+0xf0>)
 8000f4a:	f043 0308 	orr.w	r3, r3, #8
 8000f4e:	6193      	str	r3, [r2, #24]
 8000f50:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <MX_GPIO_Init+0xf0>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	f003 0308 	and.w	r3, r3, #8
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5c:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <MX_GPIO_Init+0xf0>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4a29      	ldr	r2, [pc, #164]	; (8001008 <MX_GPIO_Init+0xf0>)
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	4b27      	ldr	r3, [pc, #156]	; (8001008 <MX_GPIO_Init+0xf0>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f74:	4b24      	ldr	r3, [pc, #144]	; (8001008 <MX_GPIO_Init+0xf0>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a23      	ldr	r2, [pc, #140]	; (8001008 <MX_GPIO_Init+0xf0>)
 8000f7a:	f043 0320 	orr.w	r3, r3, #32
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b21      	ldr	r3, [pc, #132]	; (8001008 <MX_GPIO_Init+0xf0>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0320 	and.w	r3, r3, #32
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_SCK_Pin|LED_LE_Pin|LED_OE_Pin|LED_SDI_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2178      	movs	r1, #120	; 0x78
 8000f90:	481e      	ldr	r0, [pc, #120]	; (800100c <MX_GPIO_Init+0xf4>)
 8000f92:	f000 ffc5 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2104      	movs	r1, #4
 8000f9a:	481d      	ldr	r0, [pc, #116]	; (8001010 <MX_GPIO_Init+0xf8>)
 8000f9c:	f000 ffc0 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2104      	movs	r1, #4
 8000fa4:	481b      	ldr	r0, [pc, #108]	; (8001014 <MX_GPIO_Init+0xfc>)
 8000fa6:	f000 ffbb 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_SCK_Pin LED_LE_Pin LED_OE_Pin LED_SDI_Pin */
  GPIO_InitStruct.Pin = LED_SCK_Pin|LED_LE_Pin|LED_OE_Pin|LED_SDI_Pin;
 8000faa:	2378      	movs	r3, #120	; 0x78
 8000fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4812      	ldr	r0, [pc, #72]	; (800100c <MX_GPIO_Init+0xf4>)
 8000fc2:	f000 fe29 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	f107 0310 	add.w	r3, r7, #16
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480c      	ldr	r0, [pc, #48]	; (8001010 <MX_GPIO_Init+0xf8>)
 8000fde:	f000 fe1b 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 0310 	add.w	r3, r7, #16
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4806      	ldr	r0, [pc, #24]	; (8001014 <MX_GPIO_Init+0xfc>)
 8000ffa:	f000 fe0d 	bl	8001c18 <HAL_GPIO_Init>

}
 8000ffe:	bf00      	nop
 8001000:	3720      	adds	r7, #32
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40021000 	.word	0x40021000
 800100c:	40011000 	.word	0x40011000
 8001010:	40010c00 	.word	0x40010c00
 8001014:	40011400 	.word	0x40011400

08001018 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Interrupt is invoked every 10ms
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]

	/*ledBlink(50, 50);
	UpdateStatus();
	buzzerProcess();*/
	timerRun();
 8001020:	f000 f846 	bl	80010b0 <timerRun>
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001034:	e7fe      	b.n	8001034 <Error_Handler+0x8>
	...

08001038 <setTimer1>:
int timer9_flag = 0;

int timer10_counter = 0;
int timer10_flag = 0;

void setTimer1(int duration){
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001040:	4a05      	ldr	r2, [pc, #20]	; (8001058 <setTimer1+0x20>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001046:	4b05      	ldr	r3, [pc, #20]	; (800105c <setTimer1+0x24>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000238 	.word	0x20000238
 800105c:	2000023c 	.word	0x2000023c

08001060 <setTimer2>:

void setTimer2(int duration){
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8001068:	4a05      	ldr	r2, [pc, #20]	; (8001080 <setTimer2+0x20>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800106e:	4b05      	ldr	r3, [pc, #20]	; (8001084 <setTimer2+0x24>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000240 	.word	0x20000240
 8001084:	20000244 	.word	0x20000244

08001088 <setTimer3>:

void setTimer3(int duration){
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8001090:	4a05      	ldr	r2, [pc, #20]	; (80010a8 <setTimer3+0x20>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <setTimer3+0x24>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000248 	.word	0x20000248
 80010ac:	2000024c 	.word	0x2000024c

080010b0 <timerRun>:
void setTimer10(int duration){
	timer10_counter = duration;
	timer10_flag = 0;
}

void timerRun(){
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 80010b4:	4b51      	ldr	r3, [pc, #324]	; (80011fc <timerRun+0x14c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	dd0b      	ble.n	80010d4 <timerRun+0x24>
		timer1_counter--;
 80010bc:	4b4f      	ldr	r3, [pc, #316]	; (80011fc <timerRun+0x14c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	4a4e      	ldr	r2, [pc, #312]	; (80011fc <timerRun+0x14c>)
 80010c4:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0){
 80010c6:	4b4d      	ldr	r3, [pc, #308]	; (80011fc <timerRun+0x14c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d102      	bne.n	80010d4 <timerRun+0x24>
			timer1_flag = 1;
 80010ce:	4b4c      	ldr	r3, [pc, #304]	; (8001200 <timerRun+0x150>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 80010d4:	4b4b      	ldr	r3, [pc, #300]	; (8001204 <timerRun+0x154>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	dd0b      	ble.n	80010f4 <timerRun+0x44>
		timer2_counter--;
 80010dc:	4b49      	ldr	r3, [pc, #292]	; (8001204 <timerRun+0x154>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	3b01      	subs	r3, #1
 80010e2:	4a48      	ldr	r2, [pc, #288]	; (8001204 <timerRun+0x154>)
 80010e4:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0){
 80010e6:	4b47      	ldr	r3, [pc, #284]	; (8001204 <timerRun+0x154>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d102      	bne.n	80010f4 <timerRun+0x44>
			timer2_flag = 1;
 80010ee:	4b46      	ldr	r3, [pc, #280]	; (8001208 <timerRun+0x158>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 80010f4:	4b45      	ldr	r3, [pc, #276]	; (800120c <timerRun+0x15c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	dd0b      	ble.n	8001114 <timerRun+0x64>
		timer3_counter--;
 80010fc:	4b43      	ldr	r3, [pc, #268]	; (800120c <timerRun+0x15c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	3b01      	subs	r3, #1
 8001102:	4a42      	ldr	r2, [pc, #264]	; (800120c <timerRun+0x15c>)
 8001104:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0){
 8001106:	4b41      	ldr	r3, [pc, #260]	; (800120c <timerRun+0x15c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d102      	bne.n	8001114 <timerRun+0x64>
			timer3_flag = 1;
 800110e:	4b40      	ldr	r3, [pc, #256]	; (8001210 <timerRun+0x160>)
 8001110:	2201      	movs	r2, #1
 8001112:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 8001114:	4b3f      	ldr	r3, [pc, #252]	; (8001214 <timerRun+0x164>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	dd0b      	ble.n	8001134 <timerRun+0x84>
		timer4_counter--;
 800111c:	4b3d      	ldr	r3, [pc, #244]	; (8001214 <timerRun+0x164>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	3b01      	subs	r3, #1
 8001122:	4a3c      	ldr	r2, [pc, #240]	; (8001214 <timerRun+0x164>)
 8001124:	6013      	str	r3, [r2, #0]
		if(timer4_counter == 0){
 8001126:	4b3b      	ldr	r3, [pc, #236]	; (8001214 <timerRun+0x164>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d102      	bne.n	8001134 <timerRun+0x84>
			timer4_flag = 1;
 800112e:	4b3a      	ldr	r3, [pc, #232]	; (8001218 <timerRun+0x168>)
 8001130:	2201      	movs	r2, #1
 8001132:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer5_counter > 0){
 8001134:	4b39      	ldr	r3, [pc, #228]	; (800121c <timerRun+0x16c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	dd0b      	ble.n	8001154 <timerRun+0xa4>
		timer5_counter--;
 800113c:	4b37      	ldr	r3, [pc, #220]	; (800121c <timerRun+0x16c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	3b01      	subs	r3, #1
 8001142:	4a36      	ldr	r2, [pc, #216]	; (800121c <timerRun+0x16c>)
 8001144:	6013      	str	r3, [r2, #0]
		if(timer5_counter == 0){
 8001146:	4b35      	ldr	r3, [pc, #212]	; (800121c <timerRun+0x16c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d102      	bne.n	8001154 <timerRun+0xa4>
			timer5_flag = 1;
 800114e:	4b34      	ldr	r3, [pc, #208]	; (8001220 <timerRun+0x170>)
 8001150:	2201      	movs	r2, #1
 8001152:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer6_counter > 0){
 8001154:	4b33      	ldr	r3, [pc, #204]	; (8001224 <timerRun+0x174>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	dd0b      	ble.n	8001174 <timerRun+0xc4>
		timer6_counter--;
 800115c:	4b31      	ldr	r3, [pc, #196]	; (8001224 <timerRun+0x174>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	3b01      	subs	r3, #1
 8001162:	4a30      	ldr	r2, [pc, #192]	; (8001224 <timerRun+0x174>)
 8001164:	6013      	str	r3, [r2, #0]
		if(timer6_counter == 0){
 8001166:	4b2f      	ldr	r3, [pc, #188]	; (8001224 <timerRun+0x174>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d102      	bne.n	8001174 <timerRun+0xc4>
			timer6_flag = 1;
 800116e:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <timerRun+0x178>)
 8001170:	2201      	movs	r2, #1
 8001172:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer7_counter > 0){
 8001174:	4b2d      	ldr	r3, [pc, #180]	; (800122c <timerRun+0x17c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	dd0b      	ble.n	8001194 <timerRun+0xe4>
		timer7_counter--;
 800117c:	4b2b      	ldr	r3, [pc, #172]	; (800122c <timerRun+0x17c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	3b01      	subs	r3, #1
 8001182:	4a2a      	ldr	r2, [pc, #168]	; (800122c <timerRun+0x17c>)
 8001184:	6013      	str	r3, [r2, #0]
		if(timer7_counter == 0){
 8001186:	4b29      	ldr	r3, [pc, #164]	; (800122c <timerRun+0x17c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d102      	bne.n	8001194 <timerRun+0xe4>
			timer7_flag = 1;
 800118e:	4b28      	ldr	r3, [pc, #160]	; (8001230 <timerRun+0x180>)
 8001190:	2201      	movs	r2, #1
 8001192:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer8_counter > 0){
 8001194:	4b27      	ldr	r3, [pc, #156]	; (8001234 <timerRun+0x184>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	dd0b      	ble.n	80011b4 <timerRun+0x104>
		timer8_counter--;
 800119c:	4b25      	ldr	r3, [pc, #148]	; (8001234 <timerRun+0x184>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	3b01      	subs	r3, #1
 80011a2:	4a24      	ldr	r2, [pc, #144]	; (8001234 <timerRun+0x184>)
 80011a4:	6013      	str	r3, [r2, #0]
		if(timer8_counter == 0){
 80011a6:	4b23      	ldr	r3, [pc, #140]	; (8001234 <timerRun+0x184>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d102      	bne.n	80011b4 <timerRun+0x104>
			timer8_flag = 1;
 80011ae:	4b22      	ldr	r3, [pc, #136]	; (8001238 <timerRun+0x188>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer9_counter > 0){
 80011b4:	4b21      	ldr	r3, [pc, #132]	; (800123c <timerRun+0x18c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	dd0b      	ble.n	80011d4 <timerRun+0x124>
		timer9_counter--;
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <timerRun+0x18c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	4a1e      	ldr	r2, [pc, #120]	; (800123c <timerRun+0x18c>)
 80011c4:	6013      	str	r3, [r2, #0]
		if(timer9_counter == 0){
 80011c6:	4b1d      	ldr	r3, [pc, #116]	; (800123c <timerRun+0x18c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d102      	bne.n	80011d4 <timerRun+0x124>
			timer9_flag = 1;
 80011ce:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <timerRun+0x190>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer10_counter > 0){
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <timerRun+0x194>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	dd0b      	ble.n	80011f4 <timerRun+0x144>
		timer10_counter--;
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <timerRun+0x194>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	4a18      	ldr	r2, [pc, #96]	; (8001244 <timerRun+0x194>)
 80011e4:	6013      	str	r3, [r2, #0]
		if(timer10_counter == 0){
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <timerRun+0x194>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d102      	bne.n	80011f4 <timerRun+0x144>
			timer10_flag = 1;
 80011ee:	4b16      	ldr	r3, [pc, #88]	; (8001248 <timerRun+0x198>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	601a      	str	r2, [r3, #0]
		}
	}
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	20000238 	.word	0x20000238
 8001200:	2000023c 	.word	0x2000023c
 8001204:	20000240 	.word	0x20000240
 8001208:	20000244 	.word	0x20000244
 800120c:	20000248 	.word	0x20000248
 8001210:	2000024c 	.word	0x2000024c
 8001214:	20000250 	.word	0x20000250
 8001218:	20000254 	.word	0x20000254
 800121c:	20000258 	.word	0x20000258
 8001220:	2000025c 	.word	0x2000025c
 8001224:	20000260 	.word	0x20000260
 8001228:	20000264 	.word	0x20000264
 800122c:	20000268 	.word	0x20000268
 8001230:	2000026c 	.word	0x2000026c
 8001234:	20000270 	.word	0x20000270
 8001238:	20000274 	.word	0x20000274
 800123c:	20000278 	.word	0x20000278
 8001240:	2000027c 	.word	0x2000027c
 8001244:	20000280 	.word	0x20000280
 8001248:	20000284 	.word	0x20000284

0800124c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_MspInit+0x5c>)
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <HAL_MspInit+0x5c>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6193      	str	r3, [r2, #24]
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_MspInit+0x5c>)
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <HAL_MspInit+0x5c>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <HAL_MspInit+0x5c>)
 8001270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001274:	61d3      	str	r3, [r2, #28]
 8001276:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <HAL_MspInit+0x5c>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_MspInit+0x60>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	4a04      	ldr	r2, [pc, #16]	; (80012ac <HAL_MspInit+0x60>)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40010000 	.word	0x40010000

080012b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a15      	ldr	r2, [pc, #84]	; (8001320 <HAL_I2C_MspInit+0x70>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d123      	bne.n	8001318 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <HAL_I2C_MspInit+0x74>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	4a13      	ldr	r2, [pc, #76]	; (8001324 <HAL_I2C_MspInit+0x74>)
 80012d6:	f043 0308 	orr.w	r3, r3, #8
 80012da:	6193      	str	r3, [r2, #24]
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_I2C_MspInit+0x74>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f003 0308 	and.w	r3, r3, #8
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012e8:	23c0      	movs	r3, #192	; 0xc0
 80012ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ec:	2312      	movs	r3, #18
 80012ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	4619      	mov	r1, r3
 80012fa:	480b      	ldr	r0, [pc, #44]	; (8001328 <HAL_I2C_MspInit+0x78>)
 80012fc:	f000 fc8c 	bl	8001c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <HAL_I2C_MspInit+0x74>)
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	4a07      	ldr	r2, [pc, #28]	; (8001324 <HAL_I2C_MspInit+0x74>)
 8001306:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800130a:	61d3      	str	r3, [r2, #28]
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_I2C_MspInit+0x74>)
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001318:	bf00      	nop
 800131a:	3720      	adds	r7, #32
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40005400 	.word	0x40005400
 8001324:	40021000 	.word	0x40021000
 8001328:	40010c00 	.word	0x40010c00

0800132c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800133c:	d114      	bne.n	8001368 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <HAL_TIM_Base_MspInit+0x68>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	4a14      	ldr	r2, [pc, #80]	; (8001394 <HAL_TIM_Base_MspInit+0x68>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	61d3      	str	r3, [r2, #28]
 800134a:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_TIM_Base_MspInit+0x68>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	201c      	movs	r0, #28
 800135c:	f000 fb75 	bl	8001a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001360:	201c      	movs	r0, #28
 8001362:	f000 fb8e 	bl	8001a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001366:	e010      	b.n	800138a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <HAL_TIM_Base_MspInit+0x6c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d10b      	bne.n	800138a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <HAL_TIM_Base_MspInit+0x68>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	4a07      	ldr	r2, [pc, #28]	; (8001394 <HAL_TIM_Base_MspInit+0x68>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	61d3      	str	r3, [r2, #28]
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_TIM_Base_MspInit+0x68>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
}
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000
 8001398:	40000400 	.word	0x40000400

0800139c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a18      	ldr	r2, [pc, #96]	; (8001418 <HAL_TIM_MspPostInit+0x7c>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d129      	bne.n	8001410 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013bc:	4b17      	ldr	r3, [pc, #92]	; (800141c <HAL_TIM_MspPostInit+0x80>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a16      	ldr	r2, [pc, #88]	; (800141c <HAL_TIM_MspPostInit+0x80>)
 80013c2:	f043 0308 	orr.w	r3, r3, #8
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <HAL_TIM_MspPostInit+0x80>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f003 0308 	and.w	r3, r3, #8
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013d4:	2320      	movs	r3, #32
 80013d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2302      	movs	r3, #2
 80013de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	4619      	mov	r1, r3
 80013e6:	480e      	ldr	r0, [pc, #56]	; (8001420 <HAL_TIM_MspPostInit+0x84>)
 80013e8:	f000 fc16 	bl	8001c18 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <HAL_TIM_MspPostInit+0x88>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	61fb      	str	r3, [r7, #28]
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80013f8:	61fb      	str	r3, [r7, #28]
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001408:	61fb      	str	r3, [r7, #28]
 800140a:	4a06      	ldr	r2, [pc, #24]	; (8001424 <HAL_TIM_MspPostInit+0x88>)
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001410:	bf00      	nop
 8001412:	3720      	adds	r7, #32
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40000400 	.word	0x40000400
 800141c:	40021000 	.word	0x40021000
 8001420:	40010c00 	.word	0x40010c00
 8001424:	40010000 	.word	0x40010000

08001428 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a20      	ldr	r2, [pc, #128]	; (80014c4 <HAL_UART_MspInit+0x9c>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d139      	bne.n	80014bc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001448:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <HAL_UART_MspInit+0xa0>)
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <HAL_UART_MspInit+0xa0>)
 800144e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001452:	61d3      	str	r3, [r2, #28]
 8001454:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <HAL_UART_MspInit+0xa0>)
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <HAL_UART_MspInit+0xa0>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a18      	ldr	r2, [pc, #96]	; (80014c8 <HAL_UART_MspInit+0xa0>)
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <HAL_UART_MspInit+0xa0>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001478:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800147c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001482:	2303      	movs	r3, #3
 8001484:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001486:	f107 0310 	add.w	r3, r7, #16
 800148a:	4619      	mov	r1, r3
 800148c:	480f      	ldr	r0, [pc, #60]	; (80014cc <HAL_UART_MspInit+0xa4>)
 800148e:	f000 fbc3 	bl	8001c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001492:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001496:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	4619      	mov	r1, r3
 80014a6:	4809      	ldr	r0, [pc, #36]	; (80014cc <HAL_UART_MspInit+0xa4>)
 80014a8:	f000 fbb6 	bl	8001c18 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80014ac:	2200      	movs	r2, #0
 80014ae:	2100      	movs	r1, #0
 80014b0:	2027      	movs	r0, #39	; 0x27
 80014b2:	f000 faca 	bl	8001a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014b6:	2027      	movs	r0, #39	; 0x27
 80014b8:	f000 fae3 	bl	8001a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014bc:	bf00      	nop
 80014be:	3720      	adds	r7, #32
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40004800 	.word	0x40004800
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40010c00 	.word	0x40010c00

080014d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <NMI_Handler+0x4>

080014d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <HardFault_Handler+0x4>

080014dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <MemManage_Handler+0x4>

080014e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <BusFault_Handler+0x4>

080014e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <UsageFault_Handler+0x4>

080014ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr

080014fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr

08001512 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001516:	f000 f981 	bl	800181c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <TIM2_IRQHandler+0x10>)
 8001526:	f001 fe8b 	bl	8003240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000164 	.word	0x20000164

08001534 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <USART3_IRQHandler+0x10>)
 800153a:	f002 fcc9 	bl	8003ed0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200001f4 	.word	0x200001f4

08001548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001550:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <_sbrk+0x5c>)
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <_sbrk+0x60>)
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <_sbrk+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <_sbrk+0x64>)
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <_sbrk+0x68>)
 8001568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	429a      	cmp	r2, r3
 8001576:	d207      	bcs.n	8001588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001578:	f003 f8d2 	bl	8004720 <__errno>
 800157c:	4603      	mov	r3, r0
 800157e:	220c      	movs	r2, #12
 8001580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	e009      	b.n	800159c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	4a05      	ldr	r2, [pc, #20]	; (80015ac <_sbrk+0x64>)
 8001598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159a:	68fb      	ldr	r3, [r7, #12]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20005000 	.word	0x20005000
 80015a8:	00000400 	.word	0x00000400
 80015ac:	20000288 	.word	0x20000288
 80015b0:	200002d8 	.word	0x200002d8

080015b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <isCmdEqualToRST>:
uint8_t cmd_flag = INIT;
uint8_t cmd_data[MAX_CMD_SIZE];
uint8_t cmd_data_index = 0;
int ADC_value = 0;

int isCmdEqualToRST(uint8_t str[]){
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	int flag = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
	if (str[0] == 'R' && str[1] == 'S' && str[2] == 'T')
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b52      	cmp	r3, #82	; 0x52
 80015d2:	d10c      	bne.n	80015ee <isCmdEqualToRST+0x2e>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3301      	adds	r3, #1
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b53      	cmp	r3, #83	; 0x53
 80015dc:	d107      	bne.n	80015ee <isCmdEqualToRST+0x2e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3302      	adds	r3, #2
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b54      	cmp	r3, #84	; 0x54
 80015e6:	d102      	bne.n	80015ee <isCmdEqualToRST+0x2e>
		flag = 1;
 80015e8:	2301      	movs	r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	e001      	b.n	80015f2 <isCmdEqualToRST+0x32>
	else
		flag = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
	return flag;
 80015f2:	68fb      	ldr	r3, [r7, #12]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr

080015fe <isCmdEqualToOK>:

int isCmdEqualToOK(uint8_t str[]){
 80015fe:	b480      	push	{r7}
 8001600:	b085      	sub	sp, #20
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
	int flag = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
	if (str[0] == 'O' && str[1] == 'K')
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b4f      	cmp	r3, #79	; 0x4f
 8001610:	d107      	bne.n	8001622 <isCmdEqualToOK+0x24>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3301      	adds	r3, #1
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b4b      	cmp	r3, #75	; 0x4b
 800161a:	d102      	bne.n	8001622 <isCmdEqualToOK+0x24>
		flag = 1;
 800161c:	2301      	movs	r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	e001      	b.n	8001626 <isCmdEqualToOK+0x28>
	else
		flag = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
	return flag;
 8001626:	68fb      	ldr	r3, [r7, #12]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
	...

08001634 <cmd_parser_fsm>:
	else
		flag = 0;
	return flag;
}

void cmd_parser_fsm(){
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	switch(status1){
 8001638:	4b29      	ldr	r3, [pc, #164]	; (80016e0 <cmd_parser_fsm+0xac>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d02e      	beq.n	800169e <cmd_parser_fsm+0x6a>
 8001640:	2b02      	cmp	r3, #2
 8001642:	dc46      	bgt.n	80016d2 <cmd_parser_fsm+0x9e>
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <cmd_parser_fsm+0x1a>
 8001648:	2b01      	cmp	r3, #1
 800164a:	d008      	beq.n	800165e <cmd_parser_fsm+0x2a>
				cmd_flag = OK;
			}
			status1 = INIT;
			break;
		default:
			break;
 800164c:	e041      	b.n	80016d2 <cmd_parser_fsm+0x9e>
			if (buffer_byte == '!') status1 = READING;
 800164e:	4b25      	ldr	r3, [pc, #148]	; (80016e4 <cmd_parser_fsm+0xb0>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b21      	cmp	r3, #33	; 0x21
 8001654:	d13f      	bne.n	80016d6 <cmd_parser_fsm+0xa2>
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <cmd_parser_fsm+0xac>)
 8001658:	2201      	movs	r2, #1
 800165a:	601a      	str	r2, [r3, #0]
			break;
 800165c:	e03b      	b.n	80016d6 <cmd_parser_fsm+0xa2>
			if (buffer_byte != '!' && buffer_byte != '#'){
 800165e:	4b21      	ldr	r3, [pc, #132]	; (80016e4 <cmd_parser_fsm+0xb0>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b21      	cmp	r3, #33	; 0x21
 8001664:	d010      	beq.n	8001688 <cmd_parser_fsm+0x54>
 8001666:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <cmd_parser_fsm+0xb0>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b23      	cmp	r3, #35	; 0x23
 800166c:	d00c      	beq.n	8001688 <cmd_parser_fsm+0x54>
				cmd_data[cmd_data_index] = buffer_byte;
 800166e:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <cmd_parser_fsm+0xb4>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <cmd_parser_fsm+0xb0>)
 8001676:	7819      	ldrb	r1, [r3, #0]
 8001678:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <cmd_parser_fsm+0xb8>)
 800167a:	5499      	strb	r1, [r3, r2]
				cmd_data_index++;
 800167c:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <cmd_parser_fsm+0xb4>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	3301      	adds	r3, #1
 8001682:	b2da      	uxtb	r2, r3
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <cmd_parser_fsm+0xb4>)
 8001686:	701a      	strb	r2, [r3, #0]
			if (buffer_byte == '#') {status1 = STOP; cmd_data_index = 0;}
 8001688:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <cmd_parser_fsm+0xb0>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b23      	cmp	r3, #35	; 0x23
 800168e:	d124      	bne.n	80016da <cmd_parser_fsm+0xa6>
 8001690:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <cmd_parser_fsm+0xac>)
 8001692:	2202      	movs	r2, #2
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <cmd_parser_fsm+0xb4>)
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
			break;
 800169c:	e01d      	b.n	80016da <cmd_parser_fsm+0xa6>
			if (isCmdEqualToRST(cmd_data)==1){
 800169e:	4813      	ldr	r0, [pc, #76]	; (80016ec <cmd_parser_fsm+0xb8>)
 80016a0:	f7ff ff8e 	bl	80015c0 <isCmdEqualToRST>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d106      	bne.n	80016b8 <cmd_parser_fsm+0x84>
				cmd_flag = RST;
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <cmd_parser_fsm+0xbc>)
 80016ac:	2208      	movs	r2, #8
 80016ae:	701a      	strb	r2, [r3, #0]
				setTimer3(1);
 80016b0:	2001      	movs	r0, #1
 80016b2:	f7ff fce9 	bl	8001088 <setTimer3>
 80016b6:	e008      	b.n	80016ca <cmd_parser_fsm+0x96>
			else if (isCmdEqualToOK(cmd_data)==1){
 80016b8:	480c      	ldr	r0, [pc, #48]	; (80016ec <cmd_parser_fsm+0xb8>)
 80016ba:	f7ff ffa0 	bl	80015fe <isCmdEqualToOK>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d102      	bne.n	80016ca <cmd_parser_fsm+0x96>
				cmd_flag = OK;
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <cmd_parser_fsm+0xbc>)
 80016c6:	2209      	movs	r2, #9
 80016c8:	701a      	strb	r2, [r3, #0]
			status1 = INIT;
 80016ca:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <cmd_parser_fsm+0xac>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
			break;
 80016d0:	e004      	b.n	80016dc <cmd_parser_fsm+0xa8>
			break;
 80016d2:	bf00      	nop
 80016d4:	e002      	b.n	80016dc <cmd_parser_fsm+0xa8>
			break;
 80016d6:	bf00      	nop
 80016d8:	e000      	b.n	80016dc <cmd_parser_fsm+0xa8>
			break;
 80016da:	bf00      	nop
	}
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200002b0 	.word	0x200002b0
 80016e4:	2000028c 	.word	0x2000028c
 80016e8:	200002bb 	.word	0x200002bb
 80016ec:	200002b8 	.word	0x200002b8
 80016f0:	200002b4 	.word	0x200002b4

080016f4 <uart_comms_fsm>:


void uart_comms_fsm(){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
//	char str[50];
	switch(cmd_flag){
 80016f8:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <uart_comms_fsm+0x40>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d002      	beq.n	8001706 <uart_comms_fsm+0x12>
 8001700:	2b09      	cmp	r3, #9
 8001702:	d00c      	beq.n	800171e <uart_comms_fsm+0x2a>
		case OK:
			ADC_value = -1;
			cmd_flag = INIT;
			break;
		default:
			break;
 8001704:	e014      	b.n	8001730 <uart_comms_fsm+0x3c>
			if (timer3_flag == 1){
 8001706:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <uart_comms_fsm+0x44>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d10f      	bne.n	800172e <uart_comms_fsm+0x3a>
				HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 800170e:	2104      	movs	r1, #4
 8001710:	480a      	ldr	r0, [pc, #40]	; (800173c <uart_comms_fsm+0x48>)
 8001712:	f000 fc1d 	bl	8001f50 <HAL_GPIO_TogglePin>
				setTimer3(100);
 8001716:	2064      	movs	r0, #100	; 0x64
 8001718:	f7ff fcb6 	bl	8001088 <setTimer3>
		    break;
 800171c:	e007      	b.n	800172e <uart_comms_fsm+0x3a>
			ADC_value = -1;
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <uart_comms_fsm+0x4c>)
 8001720:	f04f 32ff 	mov.w	r2, #4294967295
 8001724:	601a      	str	r2, [r3, #0]
			cmd_flag = INIT;
 8001726:	4b03      	ldr	r3, [pc, #12]	; (8001734 <uart_comms_fsm+0x40>)
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
			break;
 800172c:	e000      	b.n	8001730 <uart_comms_fsm+0x3c>
		    break;
 800172e:	bf00      	nop
	}
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200002b4 	.word	0x200002b4
 8001738:	2000024c 	.word	0x2000024c
 800173c:	40010c00 	.word	0x40010c00
 8001740:	200002bc 	.word	0x200002bc

08001744 <Reset_Handler>:
 8001744:	480c      	ldr	r0, [pc, #48]	; (8001778 <LoopFillZerobss+0x12>)
 8001746:	490d      	ldr	r1, [pc, #52]	; (800177c <LoopFillZerobss+0x16>)
 8001748:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <LoopFillZerobss+0x1a>)
 800174a:	2300      	movs	r3, #0
 800174c:	e002      	b.n	8001754 <LoopCopyDataInit>

0800174e <CopyDataInit>:
 800174e:	58d4      	ldr	r4, [r2, r3]
 8001750:	50c4      	str	r4, [r0, r3]
 8001752:	3304      	adds	r3, #4

08001754 <LoopCopyDataInit>:
 8001754:	18c4      	adds	r4, r0, r3
 8001756:	428c      	cmp	r4, r1
 8001758:	d3f9      	bcc.n	800174e <CopyDataInit>
 800175a:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <LoopFillZerobss+0x1e>)
 800175c:	4c0a      	ldr	r4, [pc, #40]	; (8001788 <LoopFillZerobss+0x22>)
 800175e:	2300      	movs	r3, #0
 8001760:	e001      	b.n	8001766 <LoopFillZerobss>

08001762 <FillZerobss>:
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	3204      	adds	r2, #4

08001766 <LoopFillZerobss>:
 8001766:	42a2      	cmp	r2, r4
 8001768:	d3fb      	bcc.n	8001762 <FillZerobss>
 800176a:	f7ff ff23 	bl	80015b4 <SystemInit>
 800176e:	f002 ffdd 	bl	800472c <__libc_init_array>
 8001772:	f7ff fa33 	bl	8000bdc <main>
 8001776:	4770      	bx	lr
 8001778:	20000000 	.word	0x20000000
 800177c:	20000088 	.word	0x20000088
 8001780:	08005180 	.word	0x08005180
 8001784:	20000088 	.word	0x20000088
 8001788:	200002d4 	.word	0x200002d4

0800178c <ADC1_2_IRQHandler>:
 800178c:	e7fe      	b.n	800178c <ADC1_2_IRQHandler>
	...

08001790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <HAL_Init+0x28>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <HAL_Init+0x28>)
 800179a:	f043 0310 	orr.w	r3, r3, #16
 800179e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a0:	2003      	movs	r0, #3
 80017a2:	f000 f947 	bl	8001a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a6:	200f      	movs	r0, #15
 80017a8:	f000 f808 	bl	80017bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ac:	f7ff fd4e 	bl	800124c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40022000 	.word	0x40022000

080017bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_InitTick+0x54>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_InitTick+0x58>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	4619      	mov	r1, r3
 80017ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f95f 	bl	8001a9e <HAL_SYSTICK_Config>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00e      	b.n	8001808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b0f      	cmp	r3, #15
 80017ee:	d80a      	bhi.n	8001806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f0:	2200      	movs	r2, #0
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	f000 f927 	bl	8001a4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017fc:	4a06      	ldr	r2, [pc, #24]	; (8001818 <HAL_InitTick+0x5c>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	e000      	b.n	8001808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000018 	.word	0x20000018
 8001814:	20000020 	.word	0x20000020
 8001818:	2000001c 	.word	0x2000001c

0800181c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <HAL_IncTick+0x1c>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_IncTick+0x20>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4413      	add	r3, r2
 800182c:	4a03      	ldr	r2, [pc, #12]	; (800183c <HAL_IncTick+0x20>)
 800182e:	6013      	str	r3, [r2, #0]
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	20000020 	.word	0x20000020
 800183c:	200002c0 	.word	0x200002c0

08001840 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return uwTick;
 8001844:	4b02      	ldr	r3, [pc, #8]	; (8001850 <HAL_GetTick+0x10>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	200002c0 	.word	0x200002c0

08001854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800185c:	f7ff fff0 	bl	8001840 <HAL_GetTick>
 8001860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186c:	d005      	beq.n	800187a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_Delay+0x44>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800187a:	bf00      	nop
 800187c:	f7ff ffe0 	bl	8001840 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	429a      	cmp	r2, r3
 800188a:	d8f7      	bhi.n	800187c <HAL_Delay+0x28>
  {
  }
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000020 	.word	0x20000020

0800189c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018b8:	4013      	ands	r3, r2
 80018ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ce:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	60d3      	str	r3, [r2, #12]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <__NVIC_GetPriorityGrouping+0x18>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	0a1b      	lsrs	r3, r3, #8
 80018ee:	f003 0307 	and.w	r3, r3, #7
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	2b00      	cmp	r3, #0
 8001910:	db0b      	blt.n	800192a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	f003 021f 	and.w	r2, r3, #31
 8001918:	4906      	ldr	r1, [pc, #24]	; (8001934 <__NVIC_EnableIRQ+0x34>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	095b      	lsrs	r3, r3, #5
 8001920:	2001      	movs	r0, #1
 8001922:	fa00 f202 	lsl.w	r2, r0, r2
 8001926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	e000e100 	.word	0xe000e100

08001938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	6039      	str	r1, [r7, #0]
 8001942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	2b00      	cmp	r3, #0
 800194a:	db0a      	blt.n	8001962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	b2da      	uxtb	r2, r3
 8001950:	490c      	ldr	r1, [pc, #48]	; (8001984 <__NVIC_SetPriority+0x4c>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	0112      	lsls	r2, r2, #4
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	440b      	add	r3, r1
 800195c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001960:	e00a      	b.n	8001978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4908      	ldr	r1, [pc, #32]	; (8001988 <__NVIC_SetPriority+0x50>)
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	3b04      	subs	r3, #4
 8001970:	0112      	lsls	r2, r2, #4
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	440b      	add	r3, r1
 8001976:	761a      	strb	r2, [r3, #24]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000e100 	.word	0xe000e100
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800198c:	b480      	push	{r7}
 800198e:	b089      	sub	sp, #36	; 0x24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f1c3 0307 	rsb	r3, r3, #7
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	bf28      	it	cs
 80019aa:	2304      	movcs	r3, #4
 80019ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3304      	adds	r3, #4
 80019b2:	2b06      	cmp	r3, #6
 80019b4:	d902      	bls.n	80019bc <NVIC_EncodePriority+0x30>
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3b03      	subs	r3, #3
 80019ba:	e000      	b.n	80019be <NVIC_EncodePriority+0x32>
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	f04f 32ff 	mov.w	r2, #4294967295
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43da      	mvns	r2, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	401a      	ands	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa01 f303 	lsl.w	r3, r1, r3
 80019de:	43d9      	mvns	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	4313      	orrs	r3, r2
         );
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3724      	adds	r7, #36	; 0x24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a00:	d301      	bcc.n	8001a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a02:	2301      	movs	r3, #1
 8001a04:	e00f      	b.n	8001a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a06:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <SysTick_Config+0x40>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0e:	210f      	movs	r1, #15
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	f7ff ff90 	bl	8001938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <SysTick_Config+0x40>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1e:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <SysTick_Config+0x40>)
 8001a20:	2207      	movs	r2, #7
 8001a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	e000e010 	.word	0xe000e010

08001a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ff2d 	bl	800189c <__NVIC_SetPriorityGrouping>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a5c:	f7ff ff42 	bl	80018e4 <__NVIC_GetPriorityGrouping>
 8001a60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	6978      	ldr	r0, [r7, #20]
 8001a68:	f7ff ff90 	bl	800198c <NVIC_EncodePriority>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff5f 	bl	8001938 <__NVIC_SetPriority>
}
 8001a7a:	bf00      	nop
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff35 	bl	8001900 <__NVIC_EnableIRQ>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ffa2 	bl	80019f0 <SysTick_Config>
 8001aac:	4603      	mov	r3, r0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b085      	sub	sp, #20
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d008      	beq.n	8001ade <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2204      	movs	r2, #4
 8001ad0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e020      	b.n	8001b20 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 020e 	bic.w	r2, r2, #14
 8001aec:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0201 	bic.w	r2, r2, #1
 8001afc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b06:	2101      	movs	r1, #1
 8001b08:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
	...

08001b2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d005      	beq.n	8001b4e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2204      	movs	r2, #4
 8001b46:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	73fb      	strb	r3, [r7, #15]
 8001b4c:	e051      	b.n	8001bf2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 020e 	bic.w	r2, r2, #14
 8001b5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0201 	bic.w	r2, r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a22      	ldr	r2, [pc, #136]	; (8001bfc <HAL_DMA_Abort_IT+0xd0>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d029      	beq.n	8001bcc <HAL_DMA_Abort_IT+0xa0>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a20      	ldr	r2, [pc, #128]	; (8001c00 <HAL_DMA_Abort_IT+0xd4>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d022      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0x9c>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a1f      	ldr	r2, [pc, #124]	; (8001c04 <HAL_DMA_Abort_IT+0xd8>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d01a      	beq.n	8001bc2 <HAL_DMA_Abort_IT+0x96>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a1d      	ldr	r2, [pc, #116]	; (8001c08 <HAL_DMA_Abort_IT+0xdc>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d012      	beq.n	8001bbc <HAL_DMA_Abort_IT+0x90>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <HAL_DMA_Abort_IT+0xe0>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d00a      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x8a>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a1a      	ldr	r2, [pc, #104]	; (8001c10 <HAL_DMA_Abort_IT+0xe4>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d102      	bne.n	8001bb0 <HAL_DMA_Abort_IT+0x84>
 8001baa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001bae:	e00e      	b.n	8001bce <HAL_DMA_Abort_IT+0xa2>
 8001bb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bb4:	e00b      	b.n	8001bce <HAL_DMA_Abort_IT+0xa2>
 8001bb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bba:	e008      	b.n	8001bce <HAL_DMA_Abort_IT+0xa2>
 8001bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc0:	e005      	b.n	8001bce <HAL_DMA_Abort_IT+0xa2>
 8001bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bc6:	e002      	b.n	8001bce <HAL_DMA_Abort_IT+0xa2>
 8001bc8:	2310      	movs	r3, #16
 8001bca:	e000      	b.n	8001bce <HAL_DMA_Abort_IT+0xa2>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	4a11      	ldr	r2, [pc, #68]	; (8001c14 <HAL_DMA_Abort_IT+0xe8>)
 8001bd0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	4798      	blx	r3
    } 
  }
  return status;
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40020008 	.word	0x40020008
 8001c00:	4002001c 	.word	0x4002001c
 8001c04:	40020030 	.word	0x40020030
 8001c08:	40020044 	.word	0x40020044
 8001c0c:	40020058 	.word	0x40020058
 8001c10:	4002006c 	.word	0x4002006c
 8001c14:	40020000 	.word	0x40020000

08001c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b08b      	sub	sp, #44	; 0x2c
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c22:	2300      	movs	r3, #0
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c26:	2300      	movs	r3, #0
 8001c28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c2a:	e169      	b.n	8001f00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	f040 8158 	bne.w	8001efa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	4a9a      	ldr	r2, [pc, #616]	; (8001eb8 <HAL_GPIO_Init+0x2a0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d05e      	beq.n	8001d12 <HAL_GPIO_Init+0xfa>
 8001c54:	4a98      	ldr	r2, [pc, #608]	; (8001eb8 <HAL_GPIO_Init+0x2a0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d875      	bhi.n	8001d46 <HAL_GPIO_Init+0x12e>
 8001c5a:	4a98      	ldr	r2, [pc, #608]	; (8001ebc <HAL_GPIO_Init+0x2a4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d058      	beq.n	8001d12 <HAL_GPIO_Init+0xfa>
 8001c60:	4a96      	ldr	r2, [pc, #600]	; (8001ebc <HAL_GPIO_Init+0x2a4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d86f      	bhi.n	8001d46 <HAL_GPIO_Init+0x12e>
 8001c66:	4a96      	ldr	r2, [pc, #600]	; (8001ec0 <HAL_GPIO_Init+0x2a8>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d052      	beq.n	8001d12 <HAL_GPIO_Init+0xfa>
 8001c6c:	4a94      	ldr	r2, [pc, #592]	; (8001ec0 <HAL_GPIO_Init+0x2a8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d869      	bhi.n	8001d46 <HAL_GPIO_Init+0x12e>
 8001c72:	4a94      	ldr	r2, [pc, #592]	; (8001ec4 <HAL_GPIO_Init+0x2ac>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d04c      	beq.n	8001d12 <HAL_GPIO_Init+0xfa>
 8001c78:	4a92      	ldr	r2, [pc, #584]	; (8001ec4 <HAL_GPIO_Init+0x2ac>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d863      	bhi.n	8001d46 <HAL_GPIO_Init+0x12e>
 8001c7e:	4a92      	ldr	r2, [pc, #584]	; (8001ec8 <HAL_GPIO_Init+0x2b0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d046      	beq.n	8001d12 <HAL_GPIO_Init+0xfa>
 8001c84:	4a90      	ldr	r2, [pc, #576]	; (8001ec8 <HAL_GPIO_Init+0x2b0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d85d      	bhi.n	8001d46 <HAL_GPIO_Init+0x12e>
 8001c8a:	2b12      	cmp	r3, #18
 8001c8c:	d82a      	bhi.n	8001ce4 <HAL_GPIO_Init+0xcc>
 8001c8e:	2b12      	cmp	r3, #18
 8001c90:	d859      	bhi.n	8001d46 <HAL_GPIO_Init+0x12e>
 8001c92:	a201      	add	r2, pc, #4	; (adr r2, 8001c98 <HAL_GPIO_Init+0x80>)
 8001c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c98:	08001d13 	.word	0x08001d13
 8001c9c:	08001ced 	.word	0x08001ced
 8001ca0:	08001cff 	.word	0x08001cff
 8001ca4:	08001d41 	.word	0x08001d41
 8001ca8:	08001d47 	.word	0x08001d47
 8001cac:	08001d47 	.word	0x08001d47
 8001cb0:	08001d47 	.word	0x08001d47
 8001cb4:	08001d47 	.word	0x08001d47
 8001cb8:	08001d47 	.word	0x08001d47
 8001cbc:	08001d47 	.word	0x08001d47
 8001cc0:	08001d47 	.word	0x08001d47
 8001cc4:	08001d47 	.word	0x08001d47
 8001cc8:	08001d47 	.word	0x08001d47
 8001ccc:	08001d47 	.word	0x08001d47
 8001cd0:	08001d47 	.word	0x08001d47
 8001cd4:	08001d47 	.word	0x08001d47
 8001cd8:	08001d47 	.word	0x08001d47
 8001cdc:	08001cf5 	.word	0x08001cf5
 8001ce0:	08001d09 	.word	0x08001d09
 8001ce4:	4a79      	ldr	r2, [pc, #484]	; (8001ecc <HAL_GPIO_Init+0x2b4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d013      	beq.n	8001d12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cea:	e02c      	b.n	8001d46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	623b      	str	r3, [r7, #32]
          break;
 8001cf2:	e029      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	623b      	str	r3, [r7, #32]
          break;
 8001cfc:	e024      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	3308      	adds	r3, #8
 8001d04:	623b      	str	r3, [r7, #32]
          break;
 8001d06:	e01f      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	330c      	adds	r3, #12
 8001d0e:	623b      	str	r3, [r7, #32]
          break;
 8001d10:	e01a      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d102      	bne.n	8001d20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	623b      	str	r3, [r7, #32]
          break;
 8001d1e:	e013      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d105      	bne.n	8001d34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d28:	2308      	movs	r3, #8
 8001d2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69fa      	ldr	r2, [r7, #28]
 8001d30:	611a      	str	r2, [r3, #16]
          break;
 8001d32:	e009      	b.n	8001d48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d34:	2308      	movs	r3, #8
 8001d36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	615a      	str	r2, [r3, #20]
          break;
 8001d3e:	e003      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d40:	2300      	movs	r3, #0
 8001d42:	623b      	str	r3, [r7, #32]
          break;
 8001d44:	e000      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          break;
 8001d46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	2bff      	cmp	r3, #255	; 0xff
 8001d4c:	d801      	bhi.n	8001d52 <HAL_GPIO_Init+0x13a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	e001      	b.n	8001d56 <HAL_GPIO_Init+0x13e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3304      	adds	r3, #4
 8001d56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	2bff      	cmp	r3, #255	; 0xff
 8001d5c:	d802      	bhi.n	8001d64 <HAL_GPIO_Init+0x14c>
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	e002      	b.n	8001d6a <HAL_GPIO_Init+0x152>
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	3b08      	subs	r3, #8
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	210f      	movs	r1, #15
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	6a39      	ldr	r1, [r7, #32]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	fa01 f303 	lsl.w	r3, r1, r3
 8001d84:	431a      	orrs	r2, r3
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 80b1 	beq.w	8001efa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d98:	4b4d      	ldr	r3, [pc, #308]	; (8001ed0 <HAL_GPIO_Init+0x2b8>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	4a4c      	ldr	r2, [pc, #304]	; (8001ed0 <HAL_GPIO_Init+0x2b8>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6193      	str	r3, [r2, #24]
 8001da4:	4b4a      	ldr	r3, [pc, #296]	; (8001ed0 <HAL_GPIO_Init+0x2b8>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001db0:	4a48      	ldr	r2, [pc, #288]	; (8001ed4 <HAL_GPIO_Init+0x2bc>)
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	089b      	lsrs	r3, r3, #2
 8001db6:	3302      	adds	r3, #2
 8001db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	220f      	movs	r2, #15
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a40      	ldr	r2, [pc, #256]	; (8001ed8 <HAL_GPIO_Init+0x2c0>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d013      	beq.n	8001e04 <HAL_GPIO_Init+0x1ec>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a3f      	ldr	r2, [pc, #252]	; (8001edc <HAL_GPIO_Init+0x2c4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d00d      	beq.n	8001e00 <HAL_GPIO_Init+0x1e8>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a3e      	ldr	r2, [pc, #248]	; (8001ee0 <HAL_GPIO_Init+0x2c8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d007      	beq.n	8001dfc <HAL_GPIO_Init+0x1e4>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a3d      	ldr	r2, [pc, #244]	; (8001ee4 <HAL_GPIO_Init+0x2cc>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d101      	bne.n	8001df8 <HAL_GPIO_Init+0x1e0>
 8001df4:	2303      	movs	r3, #3
 8001df6:	e006      	b.n	8001e06 <HAL_GPIO_Init+0x1ee>
 8001df8:	2304      	movs	r3, #4
 8001dfa:	e004      	b.n	8001e06 <HAL_GPIO_Init+0x1ee>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e002      	b.n	8001e06 <HAL_GPIO_Init+0x1ee>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <HAL_GPIO_Init+0x1ee>
 8001e04:	2300      	movs	r3, #0
 8001e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e08:	f002 0203 	and.w	r2, r2, #3
 8001e0c:	0092      	lsls	r2, r2, #2
 8001e0e:	4093      	lsls	r3, r2
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e16:	492f      	ldr	r1, [pc, #188]	; (8001ed4 <HAL_GPIO_Init+0x2bc>)
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d006      	beq.n	8001e3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e30:	4b2d      	ldr	r3, [pc, #180]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	492c      	ldr	r1, [pc, #176]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	600b      	str	r3, [r1, #0]
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	4928      	ldr	r1, [pc, #160]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d006      	beq.n	8001e66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e58:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	4922      	ldr	r1, [pc, #136]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
 8001e64:	e006      	b.n	8001e74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e66:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	491e      	ldr	r1, [pc, #120]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d006      	beq.n	8001e8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e80:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	4918      	ldr	r1, [pc, #96]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	608b      	str	r3, [r1, #8]
 8001e8c:	e006      	b.n	8001e9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	4914      	ldr	r1, [pc, #80]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d021      	beq.n	8001eec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	490e      	ldr	r1, [pc, #56]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	60cb      	str	r3, [r1, #12]
 8001eb4:	e021      	b.n	8001efa <HAL_GPIO_Init+0x2e2>
 8001eb6:	bf00      	nop
 8001eb8:	10320000 	.word	0x10320000
 8001ebc:	10310000 	.word	0x10310000
 8001ec0:	10220000 	.word	0x10220000
 8001ec4:	10210000 	.word	0x10210000
 8001ec8:	10120000 	.word	0x10120000
 8001ecc:	10110000 	.word	0x10110000
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40010000 	.word	0x40010000
 8001ed8:	40010800 	.word	0x40010800
 8001edc:	40010c00 	.word	0x40010c00
 8001ee0:	40011000 	.word	0x40011000
 8001ee4:	40011400 	.word	0x40011400
 8001ee8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	4909      	ldr	r1, [pc, #36]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	3301      	adds	r3, #1
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f47f ae8e 	bne.w	8001c2c <HAL_GPIO_Init+0x14>
  }
}
 8001f10:	bf00      	nop
 8001f12:	bf00      	nop
 8001f14:	372c      	adds	r7, #44	; 0x2c
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr
 8001f1c:	40010400 	.word	0x40010400

08001f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f30:	787b      	ldrb	r3, [r7, #1]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f36:	887a      	ldrh	r2, [r7, #2]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f3c:	e003      	b.n	8001f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f3e:	887b      	ldrh	r3, [r7, #2]
 8001f40:	041a      	lsls	r2, r3, #16
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	611a      	str	r2, [r3, #16]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f62:	887a      	ldrh	r2, [r7, #2]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4013      	ands	r3, r2
 8001f68:	041a      	lsls	r2, r3, #16
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	43d9      	mvns	r1, r3
 8001f6e:	887b      	ldrh	r3, [r7, #2]
 8001f70:	400b      	ands	r3, r1
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	611a      	str	r2, [r3, #16]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
	...

08001f84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e12b      	b.n	80021ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d106      	bne.n	8001fb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff f980 	bl	80012b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2224      	movs	r2, #36	; 0x24
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0201 	bic.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fe6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fe8:	f000 ffea 	bl	8002fc0 <HAL_RCC_GetPCLK1Freq>
 8001fec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	4a81      	ldr	r2, [pc, #516]	; (80021f8 <HAL_I2C_Init+0x274>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d807      	bhi.n	8002008 <HAL_I2C_Init+0x84>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4a80      	ldr	r2, [pc, #512]	; (80021fc <HAL_I2C_Init+0x278>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	bf94      	ite	ls
 8002000:	2301      	movls	r3, #1
 8002002:	2300      	movhi	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	e006      	b.n	8002016 <HAL_I2C_Init+0x92>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4a7d      	ldr	r2, [pc, #500]	; (8002200 <HAL_I2C_Init+0x27c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	bf94      	ite	ls
 8002010:	2301      	movls	r3, #1
 8002012:	2300      	movhi	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e0e7      	b.n	80021ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4a78      	ldr	r2, [pc, #480]	; (8002204 <HAL_I2C_Init+0x280>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	0c9b      	lsrs	r3, r3, #18
 8002028:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	430a      	orrs	r2, r1
 800203c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	4a6a      	ldr	r2, [pc, #424]	; (80021f8 <HAL_I2C_Init+0x274>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d802      	bhi.n	8002058 <HAL_I2C_Init+0xd4>
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	3301      	adds	r3, #1
 8002056:	e009      	b.n	800206c <HAL_I2C_Init+0xe8>
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800205e:	fb02 f303 	mul.w	r3, r2, r3
 8002062:	4a69      	ldr	r2, [pc, #420]	; (8002208 <HAL_I2C_Init+0x284>)
 8002064:	fba2 2303 	umull	r2, r3, r2, r3
 8002068:	099b      	lsrs	r3, r3, #6
 800206a:	3301      	adds	r3, #1
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	430b      	orrs	r3, r1
 8002072:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800207e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	495c      	ldr	r1, [pc, #368]	; (80021f8 <HAL_I2C_Init+0x274>)
 8002088:	428b      	cmp	r3, r1
 800208a:	d819      	bhi.n	80020c0 <HAL_I2C_Init+0x13c>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	1e59      	subs	r1, r3, #1
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fbb1 f3f3 	udiv	r3, r1, r3
 800209a:	1c59      	adds	r1, r3, #1
 800209c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020a0:	400b      	ands	r3, r1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00a      	beq.n	80020bc <HAL_I2C_Init+0x138>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1e59      	subs	r1, r3, #1
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80020b4:	3301      	adds	r3, #1
 80020b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ba:	e051      	b.n	8002160 <HAL_I2C_Init+0x1dc>
 80020bc:	2304      	movs	r3, #4
 80020be:	e04f      	b.n	8002160 <HAL_I2C_Init+0x1dc>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d111      	bne.n	80020ec <HAL_I2C_Init+0x168>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	1e58      	subs	r0, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6859      	ldr	r1, [r3, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	440b      	add	r3, r1
 80020d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020da:	3301      	adds	r3, #1
 80020dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	bf0c      	ite	eq
 80020e4:	2301      	moveq	r3, #1
 80020e6:	2300      	movne	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	e012      	b.n	8002112 <HAL_I2C_Init+0x18e>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1e58      	subs	r0, r3, #1
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6859      	ldr	r1, [r3, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	0099      	lsls	r1, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002102:	3301      	adds	r3, #1
 8002104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002108:	2b00      	cmp	r3, #0
 800210a:	bf0c      	ite	eq
 800210c:	2301      	moveq	r3, #1
 800210e:	2300      	movne	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_I2C_Init+0x196>
 8002116:	2301      	movs	r3, #1
 8002118:	e022      	b.n	8002160 <HAL_I2C_Init+0x1dc>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10e      	bne.n	8002140 <HAL_I2C_Init+0x1bc>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	1e58      	subs	r0, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6859      	ldr	r1, [r3, #4]
 800212a:	460b      	mov	r3, r1
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	440b      	add	r3, r1
 8002130:	fbb0 f3f3 	udiv	r3, r0, r3
 8002134:	3301      	adds	r3, #1
 8002136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800213a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800213e:	e00f      	b.n	8002160 <HAL_I2C_Init+0x1dc>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1e58      	subs	r0, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6859      	ldr	r1, [r3, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	0099      	lsls	r1, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	fbb0 f3f3 	udiv	r3, r0, r3
 8002156:	3301      	adds	r3, #1
 8002158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800215c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	6809      	ldr	r1, [r1, #0]
 8002164:	4313      	orrs	r3, r2
 8002166:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69da      	ldr	r2, [r3, #28]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800218e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6911      	ldr	r1, [r2, #16]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	68d2      	ldr	r2, [r2, #12]
 800219a:	4311      	orrs	r1, r2
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	430b      	orrs	r3, r1
 80021a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695a      	ldr	r2, [r3, #20]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0201 	orr.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2220      	movs	r2, #32
 80021da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	000186a0 	.word	0x000186a0
 80021fc:	001e847f 	.word	0x001e847f
 8002200:	003d08ff 	.word	0x003d08ff
 8002204:	431bde83 	.word	0x431bde83
 8002208:	10624dd3 	.word	0x10624dd3

0800220c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b088      	sub	sp, #32
 8002210:	af02      	add	r7, sp, #8
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	607a      	str	r2, [r7, #4]
 8002216:	461a      	mov	r2, r3
 8002218:	460b      	mov	r3, r1
 800221a:	817b      	strh	r3, [r7, #10]
 800221c:	4613      	mov	r3, r2
 800221e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002220:	f7ff fb0e 	bl	8001840 <HAL_GetTick>
 8002224:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b20      	cmp	r3, #32
 8002230:	f040 80e0 	bne.w	80023f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	2319      	movs	r3, #25
 800223a:	2201      	movs	r2, #1
 800223c:	4970      	ldr	r1, [pc, #448]	; (8002400 <HAL_I2C_Master_Transmit+0x1f4>)
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 f964 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800224a:	2302      	movs	r3, #2
 800224c:	e0d3      	b.n	80023f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002254:	2b01      	cmp	r3, #1
 8002256:	d101      	bne.n	800225c <HAL_I2C_Master_Transmit+0x50>
 8002258:	2302      	movs	r3, #2
 800225a:	e0cc      	b.n	80023f6 <HAL_I2C_Master_Transmit+0x1ea>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b01      	cmp	r3, #1
 8002270:	d007      	beq.n	8002282 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 0201 	orr.w	r2, r2, #1
 8002280:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002290:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2221      	movs	r2, #33	; 0x21
 8002296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2210      	movs	r2, #16
 800229e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	893a      	ldrh	r2, [r7, #8]
 80022b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4a50      	ldr	r2, [pc, #320]	; (8002404 <HAL_I2C_Master_Transmit+0x1f8>)
 80022c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022c4:	8979      	ldrh	r1, [r7, #10]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	6a3a      	ldr	r2, [r7, #32]
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 f89c 	bl	8002408 <I2C_MasterRequestWrite>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e08d      	b.n	80023f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022f0:	e066      	b.n	80023c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	6a39      	ldr	r1, [r7, #32]
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 f9de 	bl	80026b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00d      	beq.n	800231e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	2b04      	cmp	r3, #4
 8002308:	d107      	bne.n	800231a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002318:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e06b      	b.n	80023f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	781a      	ldrb	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002338:	b29b      	uxth	r3, r3
 800233a:	3b01      	subs	r3, #1
 800233c:	b29a      	uxth	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b04      	cmp	r3, #4
 800235a:	d11b      	bne.n	8002394 <HAL_I2C_Master_Transmit+0x188>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002360:	2b00      	cmp	r3, #0
 8002362:	d017      	beq.n	8002394 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	781a      	ldrb	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237e:	b29b      	uxth	r3, r3
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238c:	3b01      	subs	r3, #1
 800238e:	b29a      	uxth	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	6a39      	ldr	r1, [r7, #32]
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 f9ce 	bl	800273a <I2C_WaitOnBTFFlagUntilTimeout>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00d      	beq.n	80023c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d107      	bne.n	80023bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e01a      	b.n	80023f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d194      	bne.n	80022f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	e000      	b.n	80023f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023f4:	2302      	movs	r3, #2
  }
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	00100002 	.word	0x00100002
 8002404:	ffff0000 	.word	0xffff0000

08002408 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b088      	sub	sp, #32
 800240c:	af02      	add	r7, sp, #8
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	607a      	str	r2, [r7, #4]
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	460b      	mov	r3, r1
 8002416:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2b08      	cmp	r3, #8
 8002422:	d006      	beq.n	8002432 <I2C_MasterRequestWrite+0x2a>
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d003      	beq.n	8002432 <I2C_MasterRequestWrite+0x2a>
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002430:	d108      	bne.n	8002444 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	e00b      	b.n	800245c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	2b12      	cmp	r3, #18
 800244a:	d107      	bne.n	800245c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800245a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 f84f 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00d      	beq.n	8002490 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002482:	d103      	bne.n	800248c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f44f 7200 	mov.w	r2, #512	; 0x200
 800248a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e035      	b.n	80024fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002498:	d108      	bne.n	80024ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800249a:	897b      	ldrh	r3, [r7, #10]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	461a      	mov	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024a8:	611a      	str	r2, [r3, #16]
 80024aa:	e01b      	b.n	80024e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024ac:	897b      	ldrh	r3, [r7, #10]
 80024ae:	11db      	asrs	r3, r3, #7
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	f003 0306 	and.w	r3, r3, #6
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	f063 030f 	orn	r3, r3, #15
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	490e      	ldr	r1, [pc, #56]	; (8002504 <I2C_MasterRequestWrite+0xfc>)
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 f875 	bl	80025ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e010      	b.n	80024fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024da:	897b      	ldrh	r3, [r7, #10]
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	4907      	ldr	r1, [pc, #28]	; (8002508 <I2C_MasterRequestWrite+0x100>)
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 f865 	bl	80025ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	00010008 	.word	0x00010008
 8002508:	00010002 	.word	0x00010002

0800250c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	4613      	mov	r3, r2
 800251a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800251c:	e025      	b.n	800256a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002524:	d021      	beq.n	800256a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002526:	f7ff f98b 	bl	8001840 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d302      	bcc.n	800253c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d116      	bne.n	800256a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2220      	movs	r2, #32
 8002546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f043 0220 	orr.w	r2, r3, #32
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e023      	b.n	80025b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	0c1b      	lsrs	r3, r3, #16
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b01      	cmp	r3, #1
 8002572:	d10d      	bne.n	8002590 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	43da      	mvns	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4013      	ands	r3, r2
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	bf0c      	ite	eq
 8002586:	2301      	moveq	r3, #1
 8002588:	2300      	movne	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	e00c      	b.n	80025aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	43da      	mvns	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4013      	ands	r3, r2
 800259c:	b29b      	uxth	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	bf0c      	ite	eq
 80025a2:	2301      	moveq	r3, #1
 80025a4:	2300      	movne	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	461a      	mov	r2, r3
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d0b6      	beq.n	800251e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b084      	sub	sp, #16
 80025be:	af00      	add	r7, sp, #0
 80025c0:	60f8      	str	r0, [r7, #12]
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
 80025c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025c8:	e051      	b.n	800266e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d8:	d123      	bne.n	8002622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2220      	movs	r2, #32
 80025fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f043 0204 	orr.w	r2, r3, #4
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e046      	b.n	80026b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d021      	beq.n	800266e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262a:	f7ff f909 	bl	8001840 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	429a      	cmp	r2, r3
 8002638:	d302      	bcc.n	8002640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d116      	bne.n	800266e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2220      	movs	r2, #32
 800264a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f043 0220 	orr.w	r2, r3, #32
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e020      	b.n	80026b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	0c1b      	lsrs	r3, r3, #16
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b01      	cmp	r3, #1
 8002676:	d10c      	bne.n	8002692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	43da      	mvns	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	4013      	ands	r3, r2
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	bf14      	ite	ne
 800268a:	2301      	movne	r3, #1
 800268c:	2300      	moveq	r3, #0
 800268e:	b2db      	uxtb	r3, r3
 8002690:	e00b      	b.n	80026aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	43da      	mvns	r2, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	4013      	ands	r3, r2
 800269e:	b29b      	uxth	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	bf14      	ite	ne
 80026a4:	2301      	movne	r3, #1
 80026a6:	2300      	moveq	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d18d      	bne.n	80025ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026c4:	e02d      	b.n	8002722 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 f878 	bl	80027bc <I2C_IsAcknowledgeFailed>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e02d      	b.n	8002732 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026dc:	d021      	beq.n	8002722 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026de:	f7ff f8af 	bl	8001840 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d302      	bcc.n	80026f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d116      	bne.n	8002722 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f043 0220 	orr.w	r2, r3, #32
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e007      	b.n	8002732 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272c:	2b80      	cmp	r3, #128	; 0x80
 800272e:	d1ca      	bne.n	80026c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	60f8      	str	r0, [r7, #12]
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002746:	e02d      	b.n	80027a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 f837 	bl	80027bc <I2C_IsAcknowledgeFailed>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e02d      	b.n	80027b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275e:	d021      	beq.n	80027a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002760:	f7ff f86e 	bl	8001840 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	429a      	cmp	r2, r3
 800276e:	d302      	bcc.n	8002776 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d116      	bne.n	80027a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	f043 0220 	orr.w	r2, r3, #32
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e007      	b.n	80027b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d1ca      	bne.n	8002748 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d2:	d11b      	bne.n	800280c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2220      	movs	r2, #32
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	f043 0204 	orr.w	r2, r3, #4
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr

08002818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e272      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 8087 	beq.w	8002946 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002838:	4b92      	ldr	r3, [pc, #584]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 030c 	and.w	r3, r3, #12
 8002840:	2b04      	cmp	r3, #4
 8002842:	d00c      	beq.n	800285e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002844:	4b8f      	ldr	r3, [pc, #572]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 030c 	and.w	r3, r3, #12
 800284c:	2b08      	cmp	r3, #8
 800284e:	d112      	bne.n	8002876 <HAL_RCC_OscConfig+0x5e>
 8002850:	4b8c      	ldr	r3, [pc, #560]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800285c:	d10b      	bne.n	8002876 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285e:	4b89      	ldr	r3, [pc, #548]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d06c      	beq.n	8002944 <HAL_RCC_OscConfig+0x12c>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d168      	bne.n	8002944 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e24c      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287e:	d106      	bne.n	800288e <HAL_RCC_OscConfig+0x76>
 8002880:	4b80      	ldr	r3, [pc, #512]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a7f      	ldr	r2, [pc, #508]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288a:	6013      	str	r3, [r2, #0]
 800288c:	e02e      	b.n	80028ec <HAL_RCC_OscConfig+0xd4>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x98>
 8002896:	4b7b      	ldr	r3, [pc, #492]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a7a      	ldr	r2, [pc, #488]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 800289c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	4b78      	ldr	r3, [pc, #480]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a77      	ldr	r2, [pc, #476]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	e01d      	b.n	80028ec <HAL_RCC_OscConfig+0xd4>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0xbc>
 80028ba:	4b72      	ldr	r3, [pc, #456]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a71      	ldr	r2, [pc, #452]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	4b6f      	ldr	r3, [pc, #444]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a6e      	ldr	r2, [pc, #440]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e00b      	b.n	80028ec <HAL_RCC_OscConfig+0xd4>
 80028d4:	4b6b      	ldr	r3, [pc, #428]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a6a      	ldr	r2, [pc, #424]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	4b68      	ldr	r3, [pc, #416]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a67      	ldr	r2, [pc, #412]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d013      	beq.n	800291c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe ffa4 	bl	8001840 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028fc:	f7fe ffa0 	bl	8001840 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	; 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e200      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290e:	4b5d      	ldr	r3, [pc, #372]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0xe4>
 800291a:	e014      	b.n	8002946 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7fe ff90 	bl	8001840 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002924:	f7fe ff8c 	bl	8001840 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b64      	cmp	r3, #100	; 0x64
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e1ec      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002936:	4b53      	ldr	r3, [pc, #332]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x10c>
 8002942:	e000      	b.n	8002946 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d063      	beq.n	8002a1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002952:	4b4c      	ldr	r3, [pc, #304]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00b      	beq.n	8002976 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800295e:	4b49      	ldr	r3, [pc, #292]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b08      	cmp	r3, #8
 8002968:	d11c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x18c>
 800296a:	4b46      	ldr	r3, [pc, #280]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d116      	bne.n	80029a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002976:	4b43      	ldr	r3, [pc, #268]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <HAL_RCC_OscConfig+0x176>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d001      	beq.n	800298e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e1c0      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298e:	4b3d      	ldr	r3, [pc, #244]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4939      	ldr	r1, [pc, #228]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a2:	e03a      	b.n	8002a1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d020      	beq.n	80029ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ac:	4b36      	ldr	r3, [pc, #216]	; (8002a88 <HAL_RCC_OscConfig+0x270>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b2:	f7fe ff45 	bl	8001840 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ba:	f7fe ff41 	bl	8001840 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e1a1      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029cc:	4b2d      	ldr	r3, [pc, #180]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d8:	4b2a      	ldr	r3, [pc, #168]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4927      	ldr	r1, [pc, #156]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	600b      	str	r3, [r1, #0]
 80029ec:	e015      	b.n	8002a1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ee:	4b26      	ldr	r3, [pc, #152]	; (8002a88 <HAL_RCC_OscConfig+0x270>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7fe ff24 	bl	8001840 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029fc:	f7fe ff20 	bl	8001840 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e180      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0e:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d03a      	beq.n	8002a9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d019      	beq.n	8002a62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a2e:	4b17      	ldr	r3, [pc, #92]	; (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a34:	f7fe ff04 	bl	8001840 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a3c:	f7fe ff00 	bl	8001840 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e160      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	f000 fad8 	bl	8003010 <RCC_Delay>
 8002a60:	e01c      	b.n	8002a9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a68:	f7fe feea 	bl	8001840 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a6e:	e00f      	b.n	8002a90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a70:	f7fe fee6 	bl	8001840 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d908      	bls.n	8002a90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e146      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000
 8002a88:	42420000 	.word	0x42420000
 8002a8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a90:	4b92      	ldr	r3, [pc, #584]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1e9      	bne.n	8002a70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 80a6 	beq.w	8002bf6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aae:	4b8b      	ldr	r3, [pc, #556]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10d      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aba:	4b88      	ldr	r3, [pc, #544]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	4a87      	ldr	r2, [pc, #540]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	61d3      	str	r3, [r2, #28]
 8002ac6:	4b85      	ldr	r3, [pc, #532]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad6:	4b82      	ldr	r3, [pc, #520]	; (8002ce0 <HAL_RCC_OscConfig+0x4c8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d118      	bne.n	8002b14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae2:	4b7f      	ldr	r3, [pc, #508]	; (8002ce0 <HAL_RCC_OscConfig+0x4c8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a7e      	ldr	r2, [pc, #504]	; (8002ce0 <HAL_RCC_OscConfig+0x4c8>)
 8002ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aee:	f7fe fea7 	bl	8001840 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af6:	f7fe fea3 	bl	8001840 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b64      	cmp	r3, #100	; 0x64
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e103      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b08:	4b75      	ldr	r3, [pc, #468]	; (8002ce0 <HAL_RCC_OscConfig+0x4c8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d106      	bne.n	8002b2a <HAL_RCC_OscConfig+0x312>
 8002b1c:	4b6f      	ldr	r3, [pc, #444]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	4a6e      	ldr	r2, [pc, #440]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6213      	str	r3, [r2, #32]
 8002b28:	e02d      	b.n	8002b86 <HAL_RCC_OscConfig+0x36e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10c      	bne.n	8002b4c <HAL_RCC_OscConfig+0x334>
 8002b32:	4b6a      	ldr	r3, [pc, #424]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	4a69      	ldr	r2, [pc, #420]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	6213      	str	r3, [r2, #32]
 8002b3e:	4b67      	ldr	r3, [pc, #412]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	4a66      	ldr	r2, [pc, #408]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b44:	f023 0304 	bic.w	r3, r3, #4
 8002b48:	6213      	str	r3, [r2, #32]
 8002b4a:	e01c      	b.n	8002b86 <HAL_RCC_OscConfig+0x36e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	2b05      	cmp	r3, #5
 8002b52:	d10c      	bne.n	8002b6e <HAL_RCC_OscConfig+0x356>
 8002b54:	4b61      	ldr	r3, [pc, #388]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	4a60      	ldr	r2, [pc, #384]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b5a:	f043 0304 	orr.w	r3, r3, #4
 8002b5e:	6213      	str	r3, [r2, #32]
 8002b60:	4b5e      	ldr	r3, [pc, #376]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	4a5d      	ldr	r2, [pc, #372]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6213      	str	r3, [r2, #32]
 8002b6c:	e00b      	b.n	8002b86 <HAL_RCC_OscConfig+0x36e>
 8002b6e:	4b5b      	ldr	r3, [pc, #364]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	4a5a      	ldr	r2, [pc, #360]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	6213      	str	r3, [r2, #32]
 8002b7a:	4b58      	ldr	r3, [pc, #352]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	4a57      	ldr	r2, [pc, #348]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b80:	f023 0304 	bic.w	r3, r3, #4
 8002b84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d015      	beq.n	8002bba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8e:	f7fe fe57 	bl	8001840 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b94:	e00a      	b.n	8002bac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b96:	f7fe fe53 	bl	8001840 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e0b1      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bac:	4b4b      	ldr	r3, [pc, #300]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0ee      	beq.n	8002b96 <HAL_RCC_OscConfig+0x37e>
 8002bb8:	e014      	b.n	8002be4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bba:	f7fe fe41 	bl	8001840 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc0:	e00a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc2:	f7fe fe3d 	bl	8001840 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e09b      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd8:	4b40      	ldr	r3, [pc, #256]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1ee      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d105      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bea:	4b3c      	ldr	r3, [pc, #240]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	4a3b      	ldr	r2, [pc, #236]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 8087 	beq.w	8002d0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c00:	4b36      	ldr	r3, [pc, #216]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d061      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d146      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c14:	4b33      	ldr	r3, [pc, #204]	; (8002ce4 <HAL_RCC_OscConfig+0x4cc>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1a:	f7fe fe11 	bl	8001840 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c22:	f7fe fe0d 	bl	8001840 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e06d      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c34:	4b29      	ldr	r3, [pc, #164]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f0      	bne.n	8002c22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c48:	d108      	bne.n	8002c5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c4a:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	4921      	ldr	r1, [pc, #132]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c5c:	4b1f      	ldr	r3, [pc, #124]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a19      	ldr	r1, [r3, #32]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	491b      	ldr	r1, [pc, #108]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c74:	4b1b      	ldr	r3, [pc, #108]	; (8002ce4 <HAL_RCC_OscConfig+0x4cc>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7a:	f7fe fde1 	bl	8001840 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c82:	f7fe fddd 	bl	8001840 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e03d      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c94:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCC_OscConfig+0x46a>
 8002ca0:	e035      	b.n	8002d0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca2:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <HAL_RCC_OscConfig+0x4cc>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7fe fdca 	bl	8001840 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7fe fdc6 	bl	8001840 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e026      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x498>
 8002cce:	e01e      	b.n	8002d0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d107      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e019      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40007000 	.word	0x40007000
 8002ce4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <HAL_RCC_OscConfig+0x500>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d106      	bne.n	8002d0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40021000 	.word	0x40021000

08002d1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0d0      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d30:	4b6a      	ldr	r3, [pc, #424]	; (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d910      	bls.n	8002d60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b67      	ldr	r3, [pc, #412]	; (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 0207 	bic.w	r2, r3, #7
 8002d46:	4965      	ldr	r1, [pc, #404]	; (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4e:	4b63      	ldr	r3, [pc, #396]	; (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0b8      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d020      	beq.n	8002dae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d78:	4b59      	ldr	r3, [pc, #356]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	4a58      	ldr	r2, [pc, #352]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d90:	4b53      	ldr	r3, [pc, #332]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4a52      	ldr	r2, [pc, #328]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d9c:	4b50      	ldr	r3, [pc, #320]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	494d      	ldr	r1, [pc, #308]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d040      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	4b47      	ldr	r3, [pc, #284]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d115      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e07f      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d107      	bne.n	8002dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dda:	4b41      	ldr	r3, [pc, #260]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d109      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e073      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dea:	4b3d      	ldr	r3, [pc, #244]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e06b      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dfa:	4b39      	ldr	r3, [pc, #228]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f023 0203 	bic.w	r2, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4936      	ldr	r1, [pc, #216]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e0c:	f7fe fd18 	bl	8001840 <HAL_GetTick>
 8002e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e12:	e00a      	b.n	8002e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e14:	f7fe fd14 	bl	8001840 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e053      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 020c 	and.w	r2, r3, #12
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d1eb      	bne.n	8002e14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e3c:	4b27      	ldr	r3, [pc, #156]	; (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d210      	bcs.n	8002e6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4a:	4b24      	ldr	r3, [pc, #144]	; (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 0207 	bic.w	r2, r3, #7
 8002e52:	4922      	ldr	r1, [pc, #136]	; (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5a:	4b20      	ldr	r3, [pc, #128]	; (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e032      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e78:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	4916      	ldr	r1, [pc, #88]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d009      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e96:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	490e      	ldr	r1, [pc, #56]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eaa:	f000 f821 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	490a      	ldr	r1, [pc, #40]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ebc:	5ccb      	ldrb	r3, [r1, r3]
 8002ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec2:	4a09      	ldr	r2, [pc, #36]	; (8002ee8 <HAL_RCC_ClockConfig+0x1cc>)
 8002ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ec6:	4b09      	ldr	r3, [pc, #36]	; (8002eec <HAL_RCC_ClockConfig+0x1d0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe fc76 	bl	80017bc <HAL_InitTick>

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40022000 	.word	0x40022000
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	0800512c 	.word	0x0800512c
 8002ee8:	20000018 	.word	0x20000018
 8002eec:	2000001c 	.word	0x2000001c

08002ef0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef0:	b490      	push	{r4, r7}
 8002ef2:	b08a      	sub	sp, #40	; 0x28
 8002ef4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ef6:	4b29      	ldr	r3, [pc, #164]	; (8002f9c <HAL_RCC_GetSysClockFreq+0xac>)
 8002ef8:	1d3c      	adds	r4, r7, #4
 8002efa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002efc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f00:	f240 2301 	movw	r3, #513	; 0x201
 8002f04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61bb      	str	r3, [r7, #24]
 8002f0e:	2300      	movs	r3, #0
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f1a:	4b21      	ldr	r3, [pc, #132]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d002      	beq.n	8002f30 <HAL_RCC_GetSysClockFreq+0x40>
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d003      	beq.n	8002f36 <HAL_RCC_GetSysClockFreq+0x46>
 8002f2e:	e02b      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f30:	4b1c      	ldr	r3, [pc, #112]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f32:	623b      	str	r3, [r7, #32]
      break;
 8002f34:	e02b      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	0c9b      	lsrs	r3, r3, #18
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	3328      	adds	r3, #40	; 0x28
 8002f40:	443b      	add	r3, r7
 8002f42:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f46:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d012      	beq.n	8002f78 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f52:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	0c5b      	lsrs	r3, r3, #17
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	3328      	adds	r3, #40	; 0x28
 8002f5e:	443b      	add	r3, r7
 8002f60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	4a0e      	ldr	r2, [pc, #56]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f6a:	fb03 f202 	mul.w	r2, r3, r2
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
 8002f76:	e004      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	4a0b      	ldr	r2, [pc, #44]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f7c:	fb02 f303 	mul.w	r3, r2, r3
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	623b      	str	r3, [r7, #32]
      break;
 8002f86:	e002      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f8a:	623b      	str	r3, [r7, #32]
      break;
 8002f8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3728      	adds	r7, #40	; 0x28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc90      	pop	{r4, r7}
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	0800510c 	.word	0x0800510c
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	007a1200 	.word	0x007a1200
 8002fa8:	003d0900 	.word	0x003d0900

08002fac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fb0:	4b02      	ldr	r3, [pc, #8]	; (8002fbc <HAL_RCC_GetHCLKFreq+0x10>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr
 8002fbc:	20000018 	.word	0x20000018

08002fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fc4:	f7ff fff2 	bl	8002fac <HAL_RCC_GetHCLKFreq>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	0a1b      	lsrs	r3, r3, #8
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	4903      	ldr	r1, [pc, #12]	; (8002fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fd6:	5ccb      	ldrb	r3, [r1, r3]
 8002fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	0800513c 	.word	0x0800513c

08002fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fec:	f7ff ffde 	bl	8002fac <HAL_RCC_GetHCLKFreq>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	4b05      	ldr	r3, [pc, #20]	; (8003008 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	0adb      	lsrs	r3, r3, #11
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	4903      	ldr	r1, [pc, #12]	; (800300c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ffe:	5ccb      	ldrb	r3, [r1, r3]
 8003000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003004:	4618      	mov	r0, r3
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40021000 	.word	0x40021000
 800300c:	0800513c 	.word	0x0800513c

08003010 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003018:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <RCC_Delay+0x34>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a0a      	ldr	r2, [pc, #40]	; (8003048 <RCC_Delay+0x38>)
 800301e:	fba2 2303 	umull	r2, r3, r2, r3
 8003022:	0a5b      	lsrs	r3, r3, #9
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	fb02 f303 	mul.w	r3, r2, r3
 800302a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800302c:	bf00      	nop
  }
  while (Delay --);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	1e5a      	subs	r2, r3, #1
 8003032:	60fa      	str	r2, [r7, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1f9      	bne.n	800302c <RCC_Delay+0x1c>
}
 8003038:	bf00      	nop
 800303a:	bf00      	nop
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr
 8003044:	20000018 	.word	0x20000018
 8003048:	10624dd3 	.word	0x10624dd3

0800304c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e041      	b.n	80030e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7fe f95a 	bl	800132c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3304      	adds	r3, #4
 8003088:	4619      	mov	r1, r3
 800308a:	4610      	mov	r0, r2
 800308c:	f000 fb20 	bl	80036d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d001      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e03a      	b.n	800317a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a18      	ldr	r2, [pc, #96]	; (8003184 <HAL_TIM_Base_Start_IT+0x98>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00e      	beq.n	8003144 <HAL_TIM_Base_Start_IT+0x58>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800312e:	d009      	beq.n	8003144 <HAL_TIM_Base_Start_IT+0x58>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a14      	ldr	r2, [pc, #80]	; (8003188 <HAL_TIM_Base_Start_IT+0x9c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d004      	beq.n	8003144 <HAL_TIM_Base_Start_IT+0x58>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a13      	ldr	r2, [pc, #76]	; (800318c <HAL_TIM_Base_Start_IT+0xa0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d111      	bne.n	8003168 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b06      	cmp	r3, #6
 8003154:	d010      	beq.n	8003178 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f042 0201 	orr.w	r2, r2, #1
 8003164:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003166:	e007      	b.n	8003178 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr
 8003184:	40012c00 	.word	0x40012c00
 8003188:	40000400 	.word	0x40000400
 800318c:	40000800 	.word	0x40000800

08003190 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e041      	b.n	8003226 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d106      	bne.n	80031bc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f839 	bl	800322e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3304      	adds	r3, #4
 80031cc:	4619      	mov	r1, r3
 80031ce:	4610      	mov	r0, r2
 80031d0:	f000 fa7e 	bl	80036d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b02      	cmp	r3, #2
 8003254:	d122      	bne.n	800329c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b02      	cmp	r3, #2
 8003262:	d11b      	bne.n	800329c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f06f 0202 	mvn.w	r2, #2
 800326c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 fa09 	bl	800369a <HAL_TIM_IC_CaptureCallback>
 8003288:	e005      	b.n	8003296 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f9fc 	bl	8003688 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 fa0b 	bl	80036ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d122      	bne.n	80032f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d11b      	bne.n	80032f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0204 	mvn.w	r2, #4
 80032c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2202      	movs	r2, #2
 80032c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f9df 	bl	800369a <HAL_TIM_IC_CaptureCallback>
 80032dc:	e005      	b.n	80032ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f9d2 	bl	8003688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f9e1 	bl	80036ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d122      	bne.n	8003344 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b08      	cmp	r3, #8
 800330a:	d11b      	bne.n	8003344 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0208 	mvn.w	r2, #8
 8003314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2204      	movs	r2, #4
 800331a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f9b5 	bl	800369a <HAL_TIM_IC_CaptureCallback>
 8003330:	e005      	b.n	800333e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f9a8 	bl	8003688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f9b7 	bl	80036ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f003 0310 	and.w	r3, r3, #16
 800334e:	2b10      	cmp	r3, #16
 8003350:	d122      	bne.n	8003398 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	2b10      	cmp	r3, #16
 800335e:	d11b      	bne.n	8003398 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0210 	mvn.w	r2, #16
 8003368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2208      	movs	r2, #8
 800336e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f98b 	bl	800369a <HAL_TIM_IC_CaptureCallback>
 8003384:	e005      	b.n	8003392 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f97e 	bl	8003688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f98d 	bl	80036ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d10e      	bne.n	80033c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d107      	bne.n	80033c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0201 	mvn.w	r2, #1
 80033bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fd fe2a 	bl	8001018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ce:	2b80      	cmp	r3, #128	; 0x80
 80033d0:	d10e      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033dc:	2b80      	cmp	r3, #128	; 0x80
 80033de:	d107      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 fc57 	bl	8003c9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fa:	2b40      	cmp	r3, #64	; 0x40
 80033fc:	d10e      	bne.n	800341c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003408:	2b40      	cmp	r3, #64	; 0x40
 800340a:	d107      	bne.n	800341c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f951 	bl	80036be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b20      	cmp	r3, #32
 8003428:	d10e      	bne.n	8003448 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0320 	and.w	r3, r3, #32
 8003434:	2b20      	cmp	r3, #32
 8003436:	d107      	bne.n	8003448 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0220 	mvn.w	r2, #32
 8003440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fc22 	bl	8003c8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003448:	bf00      	nop
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_TIM_OC_ConfigChannel+0x1a>
 8003466:	2302      	movs	r3, #2
 8003468:	e046      	b.n	80034f8 <HAL_TIM_OC_ConfigChannel+0xa8>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b0c      	cmp	r3, #12
 8003476:	d839      	bhi.n	80034ec <HAL_TIM_OC_ConfigChannel+0x9c>
 8003478:	a201      	add	r2, pc, #4	; (adr r2, 8003480 <HAL_TIM_OC_ConfigChannel+0x30>)
 800347a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347e:	bf00      	nop
 8003480:	080034b5 	.word	0x080034b5
 8003484:	080034ed 	.word	0x080034ed
 8003488:	080034ed 	.word	0x080034ed
 800348c:	080034ed 	.word	0x080034ed
 8003490:	080034c3 	.word	0x080034c3
 8003494:	080034ed 	.word	0x080034ed
 8003498:	080034ed 	.word	0x080034ed
 800349c:	080034ed 	.word	0x080034ed
 80034a0:	080034d1 	.word	0x080034d1
 80034a4:	080034ed 	.word	0x080034ed
 80034a8:	080034ed 	.word	0x080034ed
 80034ac:	080034ed 	.word	0x080034ed
 80034b0:	080034df 	.word	0x080034df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68b9      	ldr	r1, [r7, #8]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 f96a 	bl	8003794 <TIM_OC1_SetConfig>
      break;
 80034c0:	e015      	b.n	80034ee <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 f9c9 	bl	8003860 <TIM_OC2_SetConfig>
      break;
 80034ce:	e00e      	b.n	80034ee <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68b9      	ldr	r1, [r7, #8]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fa2c 	bl	8003934 <TIM_OC3_SetConfig>
      break;
 80034dc:	e007      	b.n	80034ee <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68b9      	ldr	r1, [r7, #8]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 fa8f 	bl	8003a08 <TIM_OC4_SetConfig>
      break;
 80034ea:	e000      	b.n	80034ee <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80034ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_TIM_ConfigClockSource+0x18>
 8003514:	2302      	movs	r3, #2
 8003516:	e0b3      	b.n	8003680 <HAL_TIM_ConfigClockSource+0x180>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003536:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800353e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003550:	d03e      	beq.n	80035d0 <HAL_TIM_ConfigClockSource+0xd0>
 8003552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003556:	f200 8087 	bhi.w	8003668 <HAL_TIM_ConfigClockSource+0x168>
 800355a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800355e:	f000 8085 	beq.w	800366c <HAL_TIM_ConfigClockSource+0x16c>
 8003562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003566:	d87f      	bhi.n	8003668 <HAL_TIM_ConfigClockSource+0x168>
 8003568:	2b70      	cmp	r3, #112	; 0x70
 800356a:	d01a      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0xa2>
 800356c:	2b70      	cmp	r3, #112	; 0x70
 800356e:	d87b      	bhi.n	8003668 <HAL_TIM_ConfigClockSource+0x168>
 8003570:	2b60      	cmp	r3, #96	; 0x60
 8003572:	d050      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0x116>
 8003574:	2b60      	cmp	r3, #96	; 0x60
 8003576:	d877      	bhi.n	8003668 <HAL_TIM_ConfigClockSource+0x168>
 8003578:	2b50      	cmp	r3, #80	; 0x50
 800357a:	d03c      	beq.n	80035f6 <HAL_TIM_ConfigClockSource+0xf6>
 800357c:	2b50      	cmp	r3, #80	; 0x50
 800357e:	d873      	bhi.n	8003668 <HAL_TIM_ConfigClockSource+0x168>
 8003580:	2b40      	cmp	r3, #64	; 0x40
 8003582:	d058      	beq.n	8003636 <HAL_TIM_ConfigClockSource+0x136>
 8003584:	2b40      	cmp	r3, #64	; 0x40
 8003586:	d86f      	bhi.n	8003668 <HAL_TIM_ConfigClockSource+0x168>
 8003588:	2b30      	cmp	r3, #48	; 0x30
 800358a:	d064      	beq.n	8003656 <HAL_TIM_ConfigClockSource+0x156>
 800358c:	2b30      	cmp	r3, #48	; 0x30
 800358e:	d86b      	bhi.n	8003668 <HAL_TIM_ConfigClockSource+0x168>
 8003590:	2b20      	cmp	r3, #32
 8003592:	d060      	beq.n	8003656 <HAL_TIM_ConfigClockSource+0x156>
 8003594:	2b20      	cmp	r3, #32
 8003596:	d867      	bhi.n	8003668 <HAL_TIM_ConfigClockSource+0x168>
 8003598:	2b00      	cmp	r3, #0
 800359a:	d05c      	beq.n	8003656 <HAL_TIM_ConfigClockSource+0x156>
 800359c:	2b10      	cmp	r3, #16
 800359e:	d05a      	beq.n	8003656 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80035a0:	e062      	b.n	8003668 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	6899      	ldr	r1, [r3, #8]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f000 faee 	bl	8003b92 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	609a      	str	r2, [r3, #8]
      break;
 80035ce:	e04e      	b.n	800366e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6818      	ldr	r0, [r3, #0]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	6899      	ldr	r1, [r3, #8]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f000 fad7 	bl	8003b92 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035f2:	609a      	str	r2, [r3, #8]
      break;
 80035f4:	e03b      	b.n	800366e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6818      	ldr	r0, [r3, #0]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	6859      	ldr	r1, [r3, #4]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	461a      	mov	r2, r3
 8003604:	f000 fa4e 	bl	8003aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2150      	movs	r1, #80	; 0x50
 800360e:	4618      	mov	r0, r3
 8003610:	f000 faa5 	bl	8003b5e <TIM_ITRx_SetConfig>
      break;
 8003614:	e02b      	b.n	800366e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6818      	ldr	r0, [r3, #0]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	6859      	ldr	r1, [r3, #4]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	461a      	mov	r2, r3
 8003624:	f000 fa6c 	bl	8003b00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2160      	movs	r1, #96	; 0x60
 800362e:	4618      	mov	r0, r3
 8003630:	f000 fa95 	bl	8003b5e <TIM_ITRx_SetConfig>
      break;
 8003634:	e01b      	b.n	800366e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	6859      	ldr	r1, [r3, #4]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	461a      	mov	r2, r3
 8003644:	f000 fa2e 	bl	8003aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2140      	movs	r1, #64	; 0x40
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fa85 	bl	8003b5e <TIM_ITRx_SetConfig>
      break;
 8003654:	e00b      	b.n	800366e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4619      	mov	r1, r3
 8003660:	4610      	mov	r0, r2
 8003662:	f000 fa7c 	bl	8003b5e <TIM_ITRx_SetConfig>
        break;
 8003666:	e002      	b.n	800366e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003668:	bf00      	nop
 800366a:	e000      	b.n	800366e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800366c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr

0800369a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr

080036ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr

080036be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr

080036d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a29      	ldr	r2, [pc, #164]	; (8003788 <TIM_Base_SetConfig+0xb8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d00b      	beq.n	8003700 <TIM_Base_SetConfig+0x30>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ee:	d007      	beq.n	8003700 <TIM_Base_SetConfig+0x30>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a26      	ldr	r2, [pc, #152]	; (800378c <TIM_Base_SetConfig+0xbc>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d003      	beq.n	8003700 <TIM_Base_SetConfig+0x30>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a25      	ldr	r2, [pc, #148]	; (8003790 <TIM_Base_SetConfig+0xc0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d108      	bne.n	8003712 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	4313      	orrs	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a1c      	ldr	r2, [pc, #112]	; (8003788 <TIM_Base_SetConfig+0xb8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00b      	beq.n	8003732 <TIM_Base_SetConfig+0x62>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003720:	d007      	beq.n	8003732 <TIM_Base_SetConfig+0x62>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a19      	ldr	r2, [pc, #100]	; (800378c <TIM_Base_SetConfig+0xbc>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d003      	beq.n	8003732 <TIM_Base_SetConfig+0x62>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a18      	ldr	r2, [pc, #96]	; (8003790 <TIM_Base_SetConfig+0xc0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d108      	bne.n	8003744 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	4313      	orrs	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a07      	ldr	r2, [pc, #28]	; (8003788 <TIM_Base_SetConfig+0xb8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d103      	bne.n	8003778 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	615a      	str	r2, [r3, #20]
}
 800377e:	bf00      	nop
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr
 8003788:	40012c00 	.word	0x40012c00
 800378c:	40000400 	.word	0x40000400
 8003790:	40000800 	.word	0x40000800

08003794 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	f023 0201 	bic.w	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0303 	bic.w	r3, r3, #3
 80037ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f023 0302 	bic.w	r3, r3, #2
 80037dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a1c      	ldr	r2, [pc, #112]	; (800385c <TIM_OC1_SetConfig+0xc8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d10c      	bne.n	800380a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f023 0308 	bic.w	r3, r3, #8
 80037f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f023 0304 	bic.w	r3, r3, #4
 8003808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a13      	ldr	r2, [pc, #76]	; (800385c <TIM_OC1_SetConfig+0xc8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d111      	bne.n	8003836 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4313      	orrs	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	621a      	str	r2, [r3, #32]
}
 8003850:	bf00      	nop
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	40012c00 	.word	0x40012c00

08003860 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	f023 0210 	bic.w	r2, r3, #16
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800388e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	021b      	lsls	r3, r3, #8
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f023 0320 	bic.w	r3, r3, #32
 80038aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a1d      	ldr	r2, [pc, #116]	; (8003930 <TIM_OC2_SetConfig+0xd0>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d10d      	bne.n	80038dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a14      	ldr	r2, [pc, #80]	; (8003930 <TIM_OC2_SetConfig+0xd0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d113      	bne.n	800390c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	621a      	str	r2, [r3, #32]
}
 8003926:	bf00      	nop
 8003928:	371c      	adds	r7, #28
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr
 8003930:	40012c00 	.word	0x40012c00

08003934 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0303 	bic.w	r3, r3, #3
 800396a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800397c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a1d      	ldr	r2, [pc, #116]	; (8003a04 <TIM_OC3_SetConfig+0xd0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d10d      	bne.n	80039ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003998:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	021b      	lsls	r3, r3, #8
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a14      	ldr	r2, [pc, #80]	; (8003a04 <TIM_OC3_SetConfig+0xd0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d113      	bne.n	80039de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	621a      	str	r2, [r3, #32]
}
 80039f8:	bf00      	nop
 80039fa:	371c      	adds	r7, #28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40012c00 	.word	0x40012c00

08003a08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	021b      	lsls	r3, r3, #8
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	031b      	lsls	r3, r3, #12
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a0f      	ldr	r2, [pc, #60]	; (8003aa0 <TIM_OC4_SetConfig+0x98>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d109      	bne.n	8003a7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	019b      	lsls	r3, r3, #6
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	621a      	str	r2, [r3, #32]
}
 8003a96:	bf00      	nop
 8003a98:	371c      	adds	r7, #28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr
 8003aa0:	40012c00 	.word	0x40012c00

08003aa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	f023 0201 	bic.w	r2, r3, #1
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f023 030a 	bic.w	r3, r3, #10
 8003ae0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	621a      	str	r2, [r3, #32]
}
 8003af6:	bf00      	nop
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr

08003b00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	f023 0210 	bic.w	r2, r3, #16
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	031b      	lsls	r3, r3, #12
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	621a      	str	r2, [r3, #32]
}
 8003b54:	bf00      	nop
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr

08003b5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b085      	sub	sp, #20
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f043 0307 	orr.w	r3, r3, #7
 8003b80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	609a      	str	r2, [r3, #8]
}
 8003b88:	bf00      	nop
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr

08003b92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b087      	sub	sp, #28
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
 8003b9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	021a      	lsls	r2, r3, #8
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	609a      	str	r2, [r3, #8]
}
 8003bc6:	bf00      	nop
 8003bc8:	371c      	adds	r7, #28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr

08003bd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e046      	b.n	8003c76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a16      	ldr	r2, [pc, #88]	; (8003c80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00e      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c34:	d009      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a12      	ldr	r2, [pc, #72]	; (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d004      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a10      	ldr	r2, [pc, #64]	; (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d10c      	bne.n	8003c64 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr
 8003c80:	40012c00 	.word	0x40012c00
 8003c84:	40000400 	.word	0x40000400
 8003c88:	40000800 	.word	0x40000800

08003c8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr

08003c9e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr

08003cb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e03f      	b.n	8003d42 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d106      	bne.n	8003cdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7fd fba6 	bl	8001428 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2224      	movs	r2, #36	; 0x24
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fc85 	bl	8004604 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695a      	ldr	r2, [r3, #20]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b08a      	sub	sp, #40	; 0x28
 8003d4e:	af02      	add	r7, sp, #8
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	603b      	str	r3, [r7, #0]
 8003d56:	4613      	mov	r3, r2
 8003d58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	d17c      	bne.n	8003e64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <HAL_UART_Transmit+0x2c>
 8003d70:	88fb      	ldrh	r3, [r7, #6]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e075      	b.n	8003e66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_UART_Transmit+0x3e>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e06e      	b.n	8003e66 <HAL_UART_Transmit+0x11c>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2221      	movs	r2, #33	; 0x21
 8003d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d9e:	f7fd fd4f 	bl	8001840 <HAL_GetTick>
 8003da2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	88fa      	ldrh	r2, [r7, #6]
 8003da8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	88fa      	ldrh	r2, [r7, #6]
 8003dae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db8:	d108      	bne.n	8003dcc <HAL_UART_Transmit+0x82>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d104      	bne.n	8003dcc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	61bb      	str	r3, [r7, #24]
 8003dca:	e003      	b.n	8003dd4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ddc:	e02a      	b.n	8003e34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2200      	movs	r2, #0
 8003de6:	2180      	movs	r1, #128	; 0x80
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 fa38 	bl	800425e <UART_WaitOnFlagUntilTimeout>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e036      	b.n	8003e66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10b      	bne.n	8003e16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	3302      	adds	r3, #2
 8003e12:	61bb      	str	r3, [r7, #24]
 8003e14:	e007      	b.n	8003e26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	781a      	ldrb	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	3301      	adds	r3, #1
 8003e24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1cf      	bne.n	8003dde <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2200      	movs	r2, #0
 8003e46:	2140      	movs	r1, #64	; 0x40
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 fa08 	bl	800425e <UART_WaitOnFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e006      	b.n	8003e66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	e000      	b.n	8003e66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e64:	2302      	movs	r3, #2
  }
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3720      	adds	r7, #32
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b084      	sub	sp, #16
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b20      	cmp	r3, #32
 8003e86:	d11d      	bne.n	8003ec4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <HAL_UART_Receive_IT+0x26>
 8003e8e:	88fb      	ldrh	r3, [r7, #6]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e016      	b.n	8003ec6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d101      	bne.n	8003ea6 <HAL_UART_Receive_IT+0x38>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e00f      	b.n	8003ec6 <HAL_UART_Receive_IT+0x58>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003eb4:	88fb      	ldrh	r3, [r7, #6]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	68b9      	ldr	r1, [r7, #8]
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 fa19 	bl	80042f2 <UART_Start_Receive_IT>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	e000      	b.n	8003ec6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003ec4:	2302      	movs	r3, #2
  }
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08a      	sub	sp, #40	; 0x28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10d      	bne.n	8003f22 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	f003 0320 	and.w	r3, r3, #32
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_UART_IRQHandler+0x52>
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	f003 0320 	and.w	r3, r3, #32
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 fac9 	bl	80044b2 <UART_Receive_IT>
      return;
 8003f20:	e17b      	b.n	800421a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 80b1 	beq.w	800408c <HAL_UART_IRQHandler+0x1bc>
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d105      	bne.n	8003f40 <HAL_UART_IRQHandler+0x70>
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 80a6 	beq.w	800408c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_UART_IRQHandler+0x90>
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f58:	f043 0201 	orr.w	r2, r3, #1
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <HAL_UART_IRQHandler+0xb0>
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d005      	beq.n	8003f80 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	f043 0202 	orr.w	r2, r3, #2
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <HAL_UART_IRQHandler+0xd0>
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d005      	beq.n	8003fa0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	f043 0204 	orr.w	r2, r3, #4
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00f      	beq.n	8003fca <HAL_UART_IRQHandler+0xfa>
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	f003 0320 	and.w	r3, r3, #32
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d104      	bne.n	8003fbe <HAL_UART_IRQHandler+0xee>
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d005      	beq.n	8003fca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	f043 0208 	orr.w	r2, r3, #8
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 811e 	beq.w	8004210 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d007      	beq.n	8003fee <HAL_UART_IRQHandler+0x11e>
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	f003 0320 	and.w	r3, r3, #32
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 fa62 	bl	80044b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bf14      	ite	ne
 8003ffc:	2301      	movne	r3, #1
 8003ffe:	2300      	moveq	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	d102      	bne.n	8004016 <HAL_UART_IRQHandler+0x146>
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d031      	beq.n	800407a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f9a4 	bl	8004364 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004026:	2b00      	cmp	r3, #0
 8004028:	d023      	beq.n	8004072 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695a      	ldr	r2, [r3, #20]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004038:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403e:	2b00      	cmp	r3, #0
 8004040:	d013      	beq.n	800406a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	4a76      	ldr	r2, [pc, #472]	; (8004220 <HAL_UART_IRQHandler+0x350>)
 8004048:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404e:	4618      	mov	r0, r3
 8004050:	f7fd fd6c 	bl	8001b2c <HAL_DMA_Abort_IT>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d016      	beq.n	8004088 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004064:	4610      	mov	r0, r2
 8004066:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004068:	e00e      	b.n	8004088 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f8e3 	bl	8004236 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004070:	e00a      	b.n	8004088 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f8df 	bl	8004236 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004078:	e006      	b.n	8004088 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f8db 	bl	8004236 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004086:	e0c3      	b.n	8004210 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004088:	bf00      	nop
    return;
 800408a:	e0c1      	b.n	8004210 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004090:	2b01      	cmp	r3, #1
 8004092:	f040 80a1 	bne.w	80041d8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	f003 0310 	and.w	r3, r3, #16
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 809b 	beq.w	80041d8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 8095 	beq.w	80041d8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040ae:	2300      	movs	r3, #0
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d04e      	beq.n	8004170 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80040dc:	8a3b      	ldrh	r3, [r7, #16]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 8098 	beq.w	8004214 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040e8:	8a3a      	ldrh	r2, [r7, #16]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	f080 8092 	bcs.w	8004214 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8a3a      	ldrh	r2, [r7, #16]
 80040f4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	2b20      	cmp	r3, #32
 80040fe:	d02b      	beq.n	8004158 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800410e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0201 	bic.w	r2, r2, #1
 800411e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695a      	ldr	r2, [r3, #20]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800412e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0210 	bic.w	r2, r2, #16
 800414c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	4618      	mov	r0, r3
 8004154:	f7fd fcaf 	bl	8001ab6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004160:	b29b      	uxth	r3, r3
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	b29b      	uxth	r3, r3
 8004166:	4619      	mov	r1, r3
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f86d 	bl	8004248 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800416e:	e051      	b.n	8004214 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004178:	b29b      	uxth	r3, r3
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d047      	beq.n	8004218 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004188:	8a7b      	ldrh	r3, [r7, #18]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d044      	beq.n	8004218 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800419c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695a      	ldr	r2, [r3, #20]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0201 	bic.w	r2, r2, #1
 80041ac:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0210 	bic.w	r2, r2, #16
 80041ca:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041cc:	8a7b      	ldrh	r3, [r7, #18]
 80041ce:	4619      	mov	r1, r3
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f839 	bl	8004248 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80041d6:	e01f      	b.n	8004218 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d008      	beq.n	80041f4 <HAL_UART_IRQHandler+0x324>
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f8f9 	bl	80043e4 <UART_Transmit_IT>
    return;
 80041f2:	e012      	b.n	800421a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00d      	beq.n	800421a <HAL_UART_IRQHandler+0x34a>
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004204:	2b00      	cmp	r3, #0
 8004206:	d008      	beq.n	800421a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f93a 	bl	8004482 <UART_EndTransmit_IT>
    return;
 800420e:	e004      	b.n	800421a <HAL_UART_IRQHandler+0x34a>
    return;
 8004210:	bf00      	nop
 8004212:	e002      	b.n	800421a <HAL_UART_IRQHandler+0x34a>
      return;
 8004214:	bf00      	nop
 8004216:	e000      	b.n	800421a <HAL_UART_IRQHandler+0x34a>
      return;
 8004218:	bf00      	nop
  }
}
 800421a:	3728      	adds	r7, #40	; 0x28
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	080043bd 	.word	0x080043bd

08004224 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	bc80      	pop	{r7}
 8004234:	4770      	bx	lr

08004236 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr

08004248 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	460b      	mov	r3, r1
 8004252:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	bc80      	pop	{r7}
 800425c:	4770      	bx	lr

0800425e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b084      	sub	sp, #16
 8004262:	af00      	add	r7, sp, #0
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	603b      	str	r3, [r7, #0]
 800426a:	4613      	mov	r3, r2
 800426c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800426e:	e02c      	b.n	80042ca <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004276:	d028      	beq.n	80042ca <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d007      	beq.n	800428e <UART_WaitOnFlagUntilTimeout+0x30>
 800427e:	f7fd fadf 	bl	8001840 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	429a      	cmp	r2, r3
 800428c:	d21d      	bcs.n	80042ca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800429c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695a      	ldr	r2, [r3, #20]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0201 	bic.w	r2, r2, #1
 80042ac:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e00f      	b.n	80042ea <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	4013      	ands	r3, r2
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	bf0c      	ite	eq
 80042da:	2301      	moveq	r3, #1
 80042dc:	2300      	movne	r3, #0
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	461a      	mov	r2, r3
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d0c3      	beq.n	8004270 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b085      	sub	sp, #20
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	4613      	mov	r3, r2
 80042fe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	88fa      	ldrh	r2, [r7, #6]
 800430a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	88fa      	ldrh	r2, [r7, #6]
 8004310:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2222      	movs	r2, #34	; 0x22
 800431c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004336:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695a      	ldr	r2, [r3, #20]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0220 	orr.w	r2, r2, #32
 8004356:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	bc80      	pop	{r7}
 8004362:	4770      	bx	lr

08004364 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800437a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695a      	ldr	r2, [r3, #20]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0201 	bic.w	r2, r2, #1
 800438a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004390:	2b01      	cmp	r3, #1
 8004392:	d107      	bne.n	80043a4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0210 	bic.w	r2, r2, #16
 80043a2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr

080043bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f7ff ff2d 	bl	8004236 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043dc:	bf00      	nop
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b21      	cmp	r3, #33	; 0x21
 80043f6:	d13e      	bne.n	8004476 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004400:	d114      	bne.n	800442c <UART_Transmit_IT+0x48>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d110      	bne.n	800442c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	461a      	mov	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800441e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	1c9a      	adds	r2, r3, #2
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	621a      	str	r2, [r3, #32]
 800442a:	e008      	b.n	800443e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	1c59      	adds	r1, r3, #1
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6211      	str	r1, [r2, #32]
 8004436:	781a      	ldrb	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	b29b      	uxth	r3, r3
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	4619      	mov	r1, r3
 800444c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10f      	bne.n	8004472 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004460:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004470:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	e000      	b.n	8004478 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004476:	2302      	movs	r3, #2
  }
}
 8004478:	4618      	mov	r0, r3
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr

08004482 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b082      	sub	sp, #8
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004498:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2220      	movs	r2, #32
 800449e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7ff febe 	bl	8004224 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b086      	sub	sp, #24
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b22      	cmp	r3, #34	; 0x22
 80044c4:	f040 8099 	bne.w	80045fa <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d0:	d117      	bne.n	8004502 <UART_Receive_IT+0x50>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d113      	bne.n	8004502 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fa:	1c9a      	adds	r2, r3, #2
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004500:	e026      	b.n	8004550 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004506:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004508:	2300      	movs	r3, #0
 800450a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004514:	d007      	beq.n	8004526 <UART_Receive_IT+0x74>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10a      	bne.n	8004534 <UART_Receive_IT+0x82>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	b2da      	uxtb	r2, r3
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	701a      	strb	r2, [r3, #0]
 8004532:	e008      	b.n	8004546 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	b2db      	uxtb	r3, r3
 800453c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004540:	b2da      	uxtb	r2, r3
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29b      	uxth	r3, r3
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	4619      	mov	r1, r3
 800455e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004560:	2b00      	cmp	r3, #0
 8004562:	d148      	bne.n	80045f6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0220 	bic.w	r2, r2, #32
 8004572:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004582:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695a      	ldr	r2, [r3, #20]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0201 	bic.w	r2, r2, #1
 8004592:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d123      	bne.n	80045ec <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68da      	ldr	r2, [r3, #12]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0210 	bic.w	r2, r2, #16
 80045b8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0310 	and.w	r3, r3, #16
 80045c4:	2b10      	cmp	r3, #16
 80045c6:	d10a      	bne.n	80045de <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045c8:	2300      	movs	r3, #0
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045e2:	4619      	mov	r1, r3
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7ff fe2f 	bl	8004248 <HAL_UARTEx_RxEventCallback>
 80045ea:	e002      	b.n	80045f2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7fc fab9 	bl	8000b64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	e002      	b.n	80045fc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	e000      	b.n	80045fc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80045fa:	2302      	movs	r3, #2
  }
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	4313      	orrs	r3, r2
 8004632:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800463e:	f023 030c 	bic.w	r3, r3, #12
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6812      	ldr	r2, [r2, #0]
 8004646:	68b9      	ldr	r1, [r7, #8]
 8004648:	430b      	orrs	r3, r1
 800464a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699a      	ldr	r2, [r3, #24]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a2c      	ldr	r2, [pc, #176]	; (8004718 <UART_SetConfig+0x114>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d103      	bne.n	8004674 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800466c:	f7fe fcbc 	bl	8002fe8 <HAL_RCC_GetPCLK2Freq>
 8004670:	60f8      	str	r0, [r7, #12]
 8004672:	e002      	b.n	800467a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004674:	f7fe fca4 	bl	8002fc0 <HAL_RCC_GetPCLK1Freq>
 8004678:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4613      	mov	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	009a      	lsls	r2, r3, #2
 8004684:	441a      	add	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004690:	4a22      	ldr	r2, [pc, #136]	; (800471c <UART_SetConfig+0x118>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	0119      	lsls	r1, r3, #4
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	009a      	lsls	r2, r3, #2
 80046a4:	441a      	add	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80046b0:	4b1a      	ldr	r3, [pc, #104]	; (800471c <UART_SetConfig+0x118>)
 80046b2:	fba3 0302 	umull	r0, r3, r3, r2
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	2064      	movs	r0, #100	; 0x64
 80046ba:	fb00 f303 	mul.w	r3, r0, r3
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	3332      	adds	r3, #50	; 0x32
 80046c4:	4a15      	ldr	r2, [pc, #84]	; (800471c <UART_SetConfig+0x118>)
 80046c6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046d0:	4419      	add	r1, r3
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	4613      	mov	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4413      	add	r3, r2
 80046da:	009a      	lsls	r2, r3, #2
 80046dc:	441a      	add	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046e8:	4b0c      	ldr	r3, [pc, #48]	; (800471c <UART_SetConfig+0x118>)
 80046ea:	fba3 0302 	umull	r0, r3, r3, r2
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	2064      	movs	r0, #100	; 0x64
 80046f2:	fb00 f303 	mul.w	r3, r0, r3
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	3332      	adds	r3, #50	; 0x32
 80046fc:	4a07      	ldr	r2, [pc, #28]	; (800471c <UART_SetConfig+0x118>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	f003 020f 	and.w	r2, r3, #15
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	440a      	add	r2, r1
 800470e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004710:	bf00      	nop
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40013800 	.word	0x40013800
 800471c:	51eb851f 	.word	0x51eb851f

08004720 <__errno>:
 8004720:	4b01      	ldr	r3, [pc, #4]	; (8004728 <__errno+0x8>)
 8004722:	6818      	ldr	r0, [r3, #0]
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	20000024 	.word	0x20000024

0800472c <__libc_init_array>:
 800472c:	b570      	push	{r4, r5, r6, lr}
 800472e:	2600      	movs	r6, #0
 8004730:	4d0c      	ldr	r5, [pc, #48]	; (8004764 <__libc_init_array+0x38>)
 8004732:	4c0d      	ldr	r4, [pc, #52]	; (8004768 <__libc_init_array+0x3c>)
 8004734:	1b64      	subs	r4, r4, r5
 8004736:	10a4      	asrs	r4, r4, #2
 8004738:	42a6      	cmp	r6, r4
 800473a:	d109      	bne.n	8004750 <__libc_init_array+0x24>
 800473c:	f000 fc9c 	bl	8005078 <_init>
 8004740:	2600      	movs	r6, #0
 8004742:	4d0a      	ldr	r5, [pc, #40]	; (800476c <__libc_init_array+0x40>)
 8004744:	4c0a      	ldr	r4, [pc, #40]	; (8004770 <__libc_init_array+0x44>)
 8004746:	1b64      	subs	r4, r4, r5
 8004748:	10a4      	asrs	r4, r4, #2
 800474a:	42a6      	cmp	r6, r4
 800474c:	d105      	bne.n	800475a <__libc_init_array+0x2e>
 800474e:	bd70      	pop	{r4, r5, r6, pc}
 8004750:	f855 3b04 	ldr.w	r3, [r5], #4
 8004754:	4798      	blx	r3
 8004756:	3601      	adds	r6, #1
 8004758:	e7ee      	b.n	8004738 <__libc_init_array+0xc>
 800475a:	f855 3b04 	ldr.w	r3, [r5], #4
 800475e:	4798      	blx	r3
 8004760:	3601      	adds	r6, #1
 8004762:	e7f2      	b.n	800474a <__libc_init_array+0x1e>
 8004764:	08005178 	.word	0x08005178
 8004768:	08005178 	.word	0x08005178
 800476c:	08005178 	.word	0x08005178
 8004770:	0800517c 	.word	0x0800517c

08004774 <memset>:
 8004774:	4603      	mov	r3, r0
 8004776:	4402      	add	r2, r0
 8004778:	4293      	cmp	r3, r2
 800477a:	d100      	bne.n	800477e <memset+0xa>
 800477c:	4770      	bx	lr
 800477e:	f803 1b01 	strb.w	r1, [r3], #1
 8004782:	e7f9      	b.n	8004778 <memset+0x4>

08004784 <siprintf>:
 8004784:	b40e      	push	{r1, r2, r3}
 8004786:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800478a:	b500      	push	{lr}
 800478c:	b09c      	sub	sp, #112	; 0x70
 800478e:	ab1d      	add	r3, sp, #116	; 0x74
 8004790:	9002      	str	r0, [sp, #8]
 8004792:	9006      	str	r0, [sp, #24]
 8004794:	9107      	str	r1, [sp, #28]
 8004796:	9104      	str	r1, [sp, #16]
 8004798:	4808      	ldr	r0, [pc, #32]	; (80047bc <siprintf+0x38>)
 800479a:	4909      	ldr	r1, [pc, #36]	; (80047c0 <siprintf+0x3c>)
 800479c:	f853 2b04 	ldr.w	r2, [r3], #4
 80047a0:	9105      	str	r1, [sp, #20]
 80047a2:	6800      	ldr	r0, [r0, #0]
 80047a4:	a902      	add	r1, sp, #8
 80047a6:	9301      	str	r3, [sp, #4]
 80047a8:	f000 f868 	bl	800487c <_svfiprintf_r>
 80047ac:	2200      	movs	r2, #0
 80047ae:	9b02      	ldr	r3, [sp, #8]
 80047b0:	701a      	strb	r2, [r3, #0]
 80047b2:	b01c      	add	sp, #112	; 0x70
 80047b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80047b8:	b003      	add	sp, #12
 80047ba:	4770      	bx	lr
 80047bc:	20000024 	.word	0x20000024
 80047c0:	ffff0208 	.word	0xffff0208

080047c4 <__ssputs_r>:
 80047c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047c8:	688e      	ldr	r6, [r1, #8]
 80047ca:	4682      	mov	sl, r0
 80047cc:	429e      	cmp	r6, r3
 80047ce:	460c      	mov	r4, r1
 80047d0:	4690      	mov	r8, r2
 80047d2:	461f      	mov	r7, r3
 80047d4:	d838      	bhi.n	8004848 <__ssputs_r+0x84>
 80047d6:	898a      	ldrh	r2, [r1, #12]
 80047d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047dc:	d032      	beq.n	8004844 <__ssputs_r+0x80>
 80047de:	6825      	ldr	r5, [r4, #0]
 80047e0:	6909      	ldr	r1, [r1, #16]
 80047e2:	3301      	adds	r3, #1
 80047e4:	eba5 0901 	sub.w	r9, r5, r1
 80047e8:	6965      	ldr	r5, [r4, #20]
 80047ea:	444b      	add	r3, r9
 80047ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047f4:	106d      	asrs	r5, r5, #1
 80047f6:	429d      	cmp	r5, r3
 80047f8:	bf38      	it	cc
 80047fa:	461d      	movcc	r5, r3
 80047fc:	0553      	lsls	r3, r2, #21
 80047fe:	d531      	bpl.n	8004864 <__ssputs_r+0xa0>
 8004800:	4629      	mov	r1, r5
 8004802:	f000 fb6f 	bl	8004ee4 <_malloc_r>
 8004806:	4606      	mov	r6, r0
 8004808:	b950      	cbnz	r0, 8004820 <__ssputs_r+0x5c>
 800480a:	230c      	movs	r3, #12
 800480c:	f04f 30ff 	mov.w	r0, #4294967295
 8004810:	f8ca 3000 	str.w	r3, [sl]
 8004814:	89a3      	ldrh	r3, [r4, #12]
 8004816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800481a:	81a3      	strh	r3, [r4, #12]
 800481c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004820:	464a      	mov	r2, r9
 8004822:	6921      	ldr	r1, [r4, #16]
 8004824:	f000 face 	bl	8004dc4 <memcpy>
 8004828:	89a3      	ldrh	r3, [r4, #12]
 800482a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800482e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004832:	81a3      	strh	r3, [r4, #12]
 8004834:	6126      	str	r6, [r4, #16]
 8004836:	444e      	add	r6, r9
 8004838:	6026      	str	r6, [r4, #0]
 800483a:	463e      	mov	r6, r7
 800483c:	6165      	str	r5, [r4, #20]
 800483e:	eba5 0509 	sub.w	r5, r5, r9
 8004842:	60a5      	str	r5, [r4, #8]
 8004844:	42be      	cmp	r6, r7
 8004846:	d900      	bls.n	800484a <__ssputs_r+0x86>
 8004848:	463e      	mov	r6, r7
 800484a:	4632      	mov	r2, r6
 800484c:	4641      	mov	r1, r8
 800484e:	6820      	ldr	r0, [r4, #0]
 8004850:	f000 fac6 	bl	8004de0 <memmove>
 8004854:	68a3      	ldr	r3, [r4, #8]
 8004856:	2000      	movs	r0, #0
 8004858:	1b9b      	subs	r3, r3, r6
 800485a:	60a3      	str	r3, [r4, #8]
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	4433      	add	r3, r6
 8004860:	6023      	str	r3, [r4, #0]
 8004862:	e7db      	b.n	800481c <__ssputs_r+0x58>
 8004864:	462a      	mov	r2, r5
 8004866:	f000 fbb1 	bl	8004fcc <_realloc_r>
 800486a:	4606      	mov	r6, r0
 800486c:	2800      	cmp	r0, #0
 800486e:	d1e1      	bne.n	8004834 <__ssputs_r+0x70>
 8004870:	4650      	mov	r0, sl
 8004872:	6921      	ldr	r1, [r4, #16]
 8004874:	f000 face 	bl	8004e14 <_free_r>
 8004878:	e7c7      	b.n	800480a <__ssputs_r+0x46>
	...

0800487c <_svfiprintf_r>:
 800487c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004880:	4698      	mov	r8, r3
 8004882:	898b      	ldrh	r3, [r1, #12]
 8004884:	4607      	mov	r7, r0
 8004886:	061b      	lsls	r3, r3, #24
 8004888:	460d      	mov	r5, r1
 800488a:	4614      	mov	r4, r2
 800488c:	b09d      	sub	sp, #116	; 0x74
 800488e:	d50e      	bpl.n	80048ae <_svfiprintf_r+0x32>
 8004890:	690b      	ldr	r3, [r1, #16]
 8004892:	b963      	cbnz	r3, 80048ae <_svfiprintf_r+0x32>
 8004894:	2140      	movs	r1, #64	; 0x40
 8004896:	f000 fb25 	bl	8004ee4 <_malloc_r>
 800489a:	6028      	str	r0, [r5, #0]
 800489c:	6128      	str	r0, [r5, #16]
 800489e:	b920      	cbnz	r0, 80048aa <_svfiprintf_r+0x2e>
 80048a0:	230c      	movs	r3, #12
 80048a2:	603b      	str	r3, [r7, #0]
 80048a4:	f04f 30ff 	mov.w	r0, #4294967295
 80048a8:	e0d1      	b.n	8004a4e <_svfiprintf_r+0x1d2>
 80048aa:	2340      	movs	r3, #64	; 0x40
 80048ac:	616b      	str	r3, [r5, #20]
 80048ae:	2300      	movs	r3, #0
 80048b0:	9309      	str	r3, [sp, #36]	; 0x24
 80048b2:	2320      	movs	r3, #32
 80048b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048b8:	2330      	movs	r3, #48	; 0x30
 80048ba:	f04f 0901 	mov.w	r9, #1
 80048be:	f8cd 800c 	str.w	r8, [sp, #12]
 80048c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004a68 <_svfiprintf_r+0x1ec>
 80048c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048ca:	4623      	mov	r3, r4
 80048cc:	469a      	mov	sl, r3
 80048ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048d2:	b10a      	cbz	r2, 80048d8 <_svfiprintf_r+0x5c>
 80048d4:	2a25      	cmp	r2, #37	; 0x25
 80048d6:	d1f9      	bne.n	80048cc <_svfiprintf_r+0x50>
 80048d8:	ebba 0b04 	subs.w	fp, sl, r4
 80048dc:	d00b      	beq.n	80048f6 <_svfiprintf_r+0x7a>
 80048de:	465b      	mov	r3, fp
 80048e0:	4622      	mov	r2, r4
 80048e2:	4629      	mov	r1, r5
 80048e4:	4638      	mov	r0, r7
 80048e6:	f7ff ff6d 	bl	80047c4 <__ssputs_r>
 80048ea:	3001      	adds	r0, #1
 80048ec:	f000 80aa 	beq.w	8004a44 <_svfiprintf_r+0x1c8>
 80048f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048f2:	445a      	add	r2, fp
 80048f4:	9209      	str	r2, [sp, #36]	; 0x24
 80048f6:	f89a 3000 	ldrb.w	r3, [sl]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 80a2 	beq.w	8004a44 <_svfiprintf_r+0x1c8>
 8004900:	2300      	movs	r3, #0
 8004902:	f04f 32ff 	mov.w	r2, #4294967295
 8004906:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800490a:	f10a 0a01 	add.w	sl, sl, #1
 800490e:	9304      	str	r3, [sp, #16]
 8004910:	9307      	str	r3, [sp, #28]
 8004912:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004916:	931a      	str	r3, [sp, #104]	; 0x68
 8004918:	4654      	mov	r4, sl
 800491a:	2205      	movs	r2, #5
 800491c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004920:	4851      	ldr	r0, [pc, #324]	; (8004a68 <_svfiprintf_r+0x1ec>)
 8004922:	f000 fa41 	bl	8004da8 <memchr>
 8004926:	9a04      	ldr	r2, [sp, #16]
 8004928:	b9d8      	cbnz	r0, 8004962 <_svfiprintf_r+0xe6>
 800492a:	06d0      	lsls	r0, r2, #27
 800492c:	bf44      	itt	mi
 800492e:	2320      	movmi	r3, #32
 8004930:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004934:	0711      	lsls	r1, r2, #28
 8004936:	bf44      	itt	mi
 8004938:	232b      	movmi	r3, #43	; 0x2b
 800493a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800493e:	f89a 3000 	ldrb.w	r3, [sl]
 8004942:	2b2a      	cmp	r3, #42	; 0x2a
 8004944:	d015      	beq.n	8004972 <_svfiprintf_r+0xf6>
 8004946:	4654      	mov	r4, sl
 8004948:	2000      	movs	r0, #0
 800494a:	f04f 0c0a 	mov.w	ip, #10
 800494e:	9a07      	ldr	r2, [sp, #28]
 8004950:	4621      	mov	r1, r4
 8004952:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004956:	3b30      	subs	r3, #48	; 0x30
 8004958:	2b09      	cmp	r3, #9
 800495a:	d94e      	bls.n	80049fa <_svfiprintf_r+0x17e>
 800495c:	b1b0      	cbz	r0, 800498c <_svfiprintf_r+0x110>
 800495e:	9207      	str	r2, [sp, #28]
 8004960:	e014      	b.n	800498c <_svfiprintf_r+0x110>
 8004962:	eba0 0308 	sub.w	r3, r0, r8
 8004966:	fa09 f303 	lsl.w	r3, r9, r3
 800496a:	4313      	orrs	r3, r2
 800496c:	46a2      	mov	sl, r4
 800496e:	9304      	str	r3, [sp, #16]
 8004970:	e7d2      	b.n	8004918 <_svfiprintf_r+0x9c>
 8004972:	9b03      	ldr	r3, [sp, #12]
 8004974:	1d19      	adds	r1, r3, #4
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	9103      	str	r1, [sp, #12]
 800497a:	2b00      	cmp	r3, #0
 800497c:	bfbb      	ittet	lt
 800497e:	425b      	neglt	r3, r3
 8004980:	f042 0202 	orrlt.w	r2, r2, #2
 8004984:	9307      	strge	r3, [sp, #28]
 8004986:	9307      	strlt	r3, [sp, #28]
 8004988:	bfb8      	it	lt
 800498a:	9204      	strlt	r2, [sp, #16]
 800498c:	7823      	ldrb	r3, [r4, #0]
 800498e:	2b2e      	cmp	r3, #46	; 0x2e
 8004990:	d10c      	bne.n	80049ac <_svfiprintf_r+0x130>
 8004992:	7863      	ldrb	r3, [r4, #1]
 8004994:	2b2a      	cmp	r3, #42	; 0x2a
 8004996:	d135      	bne.n	8004a04 <_svfiprintf_r+0x188>
 8004998:	9b03      	ldr	r3, [sp, #12]
 800499a:	3402      	adds	r4, #2
 800499c:	1d1a      	adds	r2, r3, #4
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	9203      	str	r2, [sp, #12]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	bfb8      	it	lt
 80049a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80049aa:	9305      	str	r3, [sp, #20]
 80049ac:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004a6c <_svfiprintf_r+0x1f0>
 80049b0:	2203      	movs	r2, #3
 80049b2:	4650      	mov	r0, sl
 80049b4:	7821      	ldrb	r1, [r4, #0]
 80049b6:	f000 f9f7 	bl	8004da8 <memchr>
 80049ba:	b140      	cbz	r0, 80049ce <_svfiprintf_r+0x152>
 80049bc:	2340      	movs	r3, #64	; 0x40
 80049be:	eba0 000a 	sub.w	r0, r0, sl
 80049c2:	fa03 f000 	lsl.w	r0, r3, r0
 80049c6:	9b04      	ldr	r3, [sp, #16]
 80049c8:	3401      	adds	r4, #1
 80049ca:	4303      	orrs	r3, r0
 80049cc:	9304      	str	r3, [sp, #16]
 80049ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049d2:	2206      	movs	r2, #6
 80049d4:	4826      	ldr	r0, [pc, #152]	; (8004a70 <_svfiprintf_r+0x1f4>)
 80049d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049da:	f000 f9e5 	bl	8004da8 <memchr>
 80049de:	2800      	cmp	r0, #0
 80049e0:	d038      	beq.n	8004a54 <_svfiprintf_r+0x1d8>
 80049e2:	4b24      	ldr	r3, [pc, #144]	; (8004a74 <_svfiprintf_r+0x1f8>)
 80049e4:	bb1b      	cbnz	r3, 8004a2e <_svfiprintf_r+0x1b2>
 80049e6:	9b03      	ldr	r3, [sp, #12]
 80049e8:	3307      	adds	r3, #7
 80049ea:	f023 0307 	bic.w	r3, r3, #7
 80049ee:	3308      	adds	r3, #8
 80049f0:	9303      	str	r3, [sp, #12]
 80049f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049f4:	4433      	add	r3, r6
 80049f6:	9309      	str	r3, [sp, #36]	; 0x24
 80049f8:	e767      	b.n	80048ca <_svfiprintf_r+0x4e>
 80049fa:	460c      	mov	r4, r1
 80049fc:	2001      	movs	r0, #1
 80049fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a02:	e7a5      	b.n	8004950 <_svfiprintf_r+0xd4>
 8004a04:	2300      	movs	r3, #0
 8004a06:	f04f 0c0a 	mov.w	ip, #10
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	3401      	adds	r4, #1
 8004a0e:	9305      	str	r3, [sp, #20]
 8004a10:	4620      	mov	r0, r4
 8004a12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a16:	3a30      	subs	r2, #48	; 0x30
 8004a18:	2a09      	cmp	r2, #9
 8004a1a:	d903      	bls.n	8004a24 <_svfiprintf_r+0x1a8>
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0c5      	beq.n	80049ac <_svfiprintf_r+0x130>
 8004a20:	9105      	str	r1, [sp, #20]
 8004a22:	e7c3      	b.n	80049ac <_svfiprintf_r+0x130>
 8004a24:	4604      	mov	r4, r0
 8004a26:	2301      	movs	r3, #1
 8004a28:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a2c:	e7f0      	b.n	8004a10 <_svfiprintf_r+0x194>
 8004a2e:	ab03      	add	r3, sp, #12
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	462a      	mov	r2, r5
 8004a34:	4638      	mov	r0, r7
 8004a36:	4b10      	ldr	r3, [pc, #64]	; (8004a78 <_svfiprintf_r+0x1fc>)
 8004a38:	a904      	add	r1, sp, #16
 8004a3a:	f3af 8000 	nop.w
 8004a3e:	1c42      	adds	r2, r0, #1
 8004a40:	4606      	mov	r6, r0
 8004a42:	d1d6      	bne.n	80049f2 <_svfiprintf_r+0x176>
 8004a44:	89ab      	ldrh	r3, [r5, #12]
 8004a46:	065b      	lsls	r3, r3, #25
 8004a48:	f53f af2c 	bmi.w	80048a4 <_svfiprintf_r+0x28>
 8004a4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a4e:	b01d      	add	sp, #116	; 0x74
 8004a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a54:	ab03      	add	r3, sp, #12
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	462a      	mov	r2, r5
 8004a5a:	4638      	mov	r0, r7
 8004a5c:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <_svfiprintf_r+0x1fc>)
 8004a5e:	a904      	add	r1, sp, #16
 8004a60:	f000 f87c 	bl	8004b5c <_printf_i>
 8004a64:	e7eb      	b.n	8004a3e <_svfiprintf_r+0x1c2>
 8004a66:	bf00      	nop
 8004a68:	08005144 	.word	0x08005144
 8004a6c:	0800514a 	.word	0x0800514a
 8004a70:	0800514e 	.word	0x0800514e
 8004a74:	00000000 	.word	0x00000000
 8004a78:	080047c5 	.word	0x080047c5

08004a7c <_printf_common>:
 8004a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a80:	4616      	mov	r6, r2
 8004a82:	4699      	mov	r9, r3
 8004a84:	688a      	ldr	r2, [r1, #8]
 8004a86:	690b      	ldr	r3, [r1, #16]
 8004a88:	4607      	mov	r7, r0
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	bfb8      	it	lt
 8004a8e:	4613      	movlt	r3, r2
 8004a90:	6033      	str	r3, [r6, #0]
 8004a92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a96:	460c      	mov	r4, r1
 8004a98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a9c:	b10a      	cbz	r2, 8004aa2 <_printf_common+0x26>
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	6033      	str	r3, [r6, #0]
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	0699      	lsls	r1, r3, #26
 8004aa6:	bf42      	ittt	mi
 8004aa8:	6833      	ldrmi	r3, [r6, #0]
 8004aaa:	3302      	addmi	r3, #2
 8004aac:	6033      	strmi	r3, [r6, #0]
 8004aae:	6825      	ldr	r5, [r4, #0]
 8004ab0:	f015 0506 	ands.w	r5, r5, #6
 8004ab4:	d106      	bne.n	8004ac4 <_printf_common+0x48>
 8004ab6:	f104 0a19 	add.w	sl, r4, #25
 8004aba:	68e3      	ldr	r3, [r4, #12]
 8004abc:	6832      	ldr	r2, [r6, #0]
 8004abe:	1a9b      	subs	r3, r3, r2
 8004ac0:	42ab      	cmp	r3, r5
 8004ac2:	dc28      	bgt.n	8004b16 <_printf_common+0x9a>
 8004ac4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ac8:	1e13      	subs	r3, r2, #0
 8004aca:	6822      	ldr	r2, [r4, #0]
 8004acc:	bf18      	it	ne
 8004ace:	2301      	movne	r3, #1
 8004ad0:	0692      	lsls	r2, r2, #26
 8004ad2:	d42d      	bmi.n	8004b30 <_printf_common+0xb4>
 8004ad4:	4649      	mov	r1, r9
 8004ad6:	4638      	mov	r0, r7
 8004ad8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004adc:	47c0      	blx	r8
 8004ade:	3001      	adds	r0, #1
 8004ae0:	d020      	beq.n	8004b24 <_printf_common+0xa8>
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	68e5      	ldr	r5, [r4, #12]
 8004ae6:	f003 0306 	and.w	r3, r3, #6
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	bf18      	it	ne
 8004aee:	2500      	movne	r5, #0
 8004af0:	6832      	ldr	r2, [r6, #0]
 8004af2:	f04f 0600 	mov.w	r6, #0
 8004af6:	68a3      	ldr	r3, [r4, #8]
 8004af8:	bf08      	it	eq
 8004afa:	1aad      	subeq	r5, r5, r2
 8004afc:	6922      	ldr	r2, [r4, #16]
 8004afe:	bf08      	it	eq
 8004b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b04:	4293      	cmp	r3, r2
 8004b06:	bfc4      	itt	gt
 8004b08:	1a9b      	subgt	r3, r3, r2
 8004b0a:	18ed      	addgt	r5, r5, r3
 8004b0c:	341a      	adds	r4, #26
 8004b0e:	42b5      	cmp	r5, r6
 8004b10:	d11a      	bne.n	8004b48 <_printf_common+0xcc>
 8004b12:	2000      	movs	r0, #0
 8004b14:	e008      	b.n	8004b28 <_printf_common+0xac>
 8004b16:	2301      	movs	r3, #1
 8004b18:	4652      	mov	r2, sl
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	4638      	mov	r0, r7
 8004b1e:	47c0      	blx	r8
 8004b20:	3001      	adds	r0, #1
 8004b22:	d103      	bne.n	8004b2c <_printf_common+0xb0>
 8004b24:	f04f 30ff 	mov.w	r0, #4294967295
 8004b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b2c:	3501      	adds	r5, #1
 8004b2e:	e7c4      	b.n	8004aba <_printf_common+0x3e>
 8004b30:	2030      	movs	r0, #48	; 0x30
 8004b32:	18e1      	adds	r1, r4, r3
 8004b34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b3e:	4422      	add	r2, r4
 8004b40:	3302      	adds	r3, #2
 8004b42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b46:	e7c5      	b.n	8004ad4 <_printf_common+0x58>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	4622      	mov	r2, r4
 8004b4c:	4649      	mov	r1, r9
 8004b4e:	4638      	mov	r0, r7
 8004b50:	47c0      	blx	r8
 8004b52:	3001      	adds	r0, #1
 8004b54:	d0e6      	beq.n	8004b24 <_printf_common+0xa8>
 8004b56:	3601      	adds	r6, #1
 8004b58:	e7d9      	b.n	8004b0e <_printf_common+0x92>
	...

08004b5c <_printf_i>:
 8004b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b60:	7e0f      	ldrb	r7, [r1, #24]
 8004b62:	4691      	mov	r9, r2
 8004b64:	2f78      	cmp	r7, #120	; 0x78
 8004b66:	4680      	mov	r8, r0
 8004b68:	460c      	mov	r4, r1
 8004b6a:	469a      	mov	sl, r3
 8004b6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b72:	d807      	bhi.n	8004b84 <_printf_i+0x28>
 8004b74:	2f62      	cmp	r7, #98	; 0x62
 8004b76:	d80a      	bhi.n	8004b8e <_printf_i+0x32>
 8004b78:	2f00      	cmp	r7, #0
 8004b7a:	f000 80d9 	beq.w	8004d30 <_printf_i+0x1d4>
 8004b7e:	2f58      	cmp	r7, #88	; 0x58
 8004b80:	f000 80a4 	beq.w	8004ccc <_printf_i+0x170>
 8004b84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b8c:	e03a      	b.n	8004c04 <_printf_i+0xa8>
 8004b8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b92:	2b15      	cmp	r3, #21
 8004b94:	d8f6      	bhi.n	8004b84 <_printf_i+0x28>
 8004b96:	a101      	add	r1, pc, #4	; (adr r1, 8004b9c <_printf_i+0x40>)
 8004b98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b9c:	08004bf5 	.word	0x08004bf5
 8004ba0:	08004c09 	.word	0x08004c09
 8004ba4:	08004b85 	.word	0x08004b85
 8004ba8:	08004b85 	.word	0x08004b85
 8004bac:	08004b85 	.word	0x08004b85
 8004bb0:	08004b85 	.word	0x08004b85
 8004bb4:	08004c09 	.word	0x08004c09
 8004bb8:	08004b85 	.word	0x08004b85
 8004bbc:	08004b85 	.word	0x08004b85
 8004bc0:	08004b85 	.word	0x08004b85
 8004bc4:	08004b85 	.word	0x08004b85
 8004bc8:	08004d17 	.word	0x08004d17
 8004bcc:	08004c39 	.word	0x08004c39
 8004bd0:	08004cf9 	.word	0x08004cf9
 8004bd4:	08004b85 	.word	0x08004b85
 8004bd8:	08004b85 	.word	0x08004b85
 8004bdc:	08004d39 	.word	0x08004d39
 8004be0:	08004b85 	.word	0x08004b85
 8004be4:	08004c39 	.word	0x08004c39
 8004be8:	08004b85 	.word	0x08004b85
 8004bec:	08004b85 	.word	0x08004b85
 8004bf0:	08004d01 	.word	0x08004d01
 8004bf4:	682b      	ldr	r3, [r5, #0]
 8004bf6:	1d1a      	adds	r2, r3, #4
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	602a      	str	r2, [r5, #0]
 8004bfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c04:	2301      	movs	r3, #1
 8004c06:	e0a4      	b.n	8004d52 <_printf_i+0x1f6>
 8004c08:	6820      	ldr	r0, [r4, #0]
 8004c0a:	6829      	ldr	r1, [r5, #0]
 8004c0c:	0606      	lsls	r6, r0, #24
 8004c0e:	f101 0304 	add.w	r3, r1, #4
 8004c12:	d50a      	bpl.n	8004c2a <_printf_i+0xce>
 8004c14:	680e      	ldr	r6, [r1, #0]
 8004c16:	602b      	str	r3, [r5, #0]
 8004c18:	2e00      	cmp	r6, #0
 8004c1a:	da03      	bge.n	8004c24 <_printf_i+0xc8>
 8004c1c:	232d      	movs	r3, #45	; 0x2d
 8004c1e:	4276      	negs	r6, r6
 8004c20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c24:	230a      	movs	r3, #10
 8004c26:	485e      	ldr	r0, [pc, #376]	; (8004da0 <_printf_i+0x244>)
 8004c28:	e019      	b.n	8004c5e <_printf_i+0x102>
 8004c2a:	680e      	ldr	r6, [r1, #0]
 8004c2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c30:	602b      	str	r3, [r5, #0]
 8004c32:	bf18      	it	ne
 8004c34:	b236      	sxthne	r6, r6
 8004c36:	e7ef      	b.n	8004c18 <_printf_i+0xbc>
 8004c38:	682b      	ldr	r3, [r5, #0]
 8004c3a:	6820      	ldr	r0, [r4, #0]
 8004c3c:	1d19      	adds	r1, r3, #4
 8004c3e:	6029      	str	r1, [r5, #0]
 8004c40:	0601      	lsls	r1, r0, #24
 8004c42:	d501      	bpl.n	8004c48 <_printf_i+0xec>
 8004c44:	681e      	ldr	r6, [r3, #0]
 8004c46:	e002      	b.n	8004c4e <_printf_i+0xf2>
 8004c48:	0646      	lsls	r6, r0, #25
 8004c4a:	d5fb      	bpl.n	8004c44 <_printf_i+0xe8>
 8004c4c:	881e      	ldrh	r6, [r3, #0]
 8004c4e:	2f6f      	cmp	r7, #111	; 0x6f
 8004c50:	bf0c      	ite	eq
 8004c52:	2308      	moveq	r3, #8
 8004c54:	230a      	movne	r3, #10
 8004c56:	4852      	ldr	r0, [pc, #328]	; (8004da0 <_printf_i+0x244>)
 8004c58:	2100      	movs	r1, #0
 8004c5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c5e:	6865      	ldr	r5, [r4, #4]
 8004c60:	2d00      	cmp	r5, #0
 8004c62:	bfa8      	it	ge
 8004c64:	6821      	ldrge	r1, [r4, #0]
 8004c66:	60a5      	str	r5, [r4, #8]
 8004c68:	bfa4      	itt	ge
 8004c6a:	f021 0104 	bicge.w	r1, r1, #4
 8004c6e:	6021      	strge	r1, [r4, #0]
 8004c70:	b90e      	cbnz	r6, 8004c76 <_printf_i+0x11a>
 8004c72:	2d00      	cmp	r5, #0
 8004c74:	d04d      	beq.n	8004d12 <_printf_i+0x1b6>
 8004c76:	4615      	mov	r5, r2
 8004c78:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c7c:	fb03 6711 	mls	r7, r3, r1, r6
 8004c80:	5dc7      	ldrb	r7, [r0, r7]
 8004c82:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c86:	4637      	mov	r7, r6
 8004c88:	42bb      	cmp	r3, r7
 8004c8a:	460e      	mov	r6, r1
 8004c8c:	d9f4      	bls.n	8004c78 <_printf_i+0x11c>
 8004c8e:	2b08      	cmp	r3, #8
 8004c90:	d10b      	bne.n	8004caa <_printf_i+0x14e>
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	07de      	lsls	r6, r3, #31
 8004c96:	d508      	bpl.n	8004caa <_printf_i+0x14e>
 8004c98:	6923      	ldr	r3, [r4, #16]
 8004c9a:	6861      	ldr	r1, [r4, #4]
 8004c9c:	4299      	cmp	r1, r3
 8004c9e:	bfde      	ittt	le
 8004ca0:	2330      	movle	r3, #48	; 0x30
 8004ca2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ca6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004caa:	1b52      	subs	r2, r2, r5
 8004cac:	6122      	str	r2, [r4, #16]
 8004cae:	464b      	mov	r3, r9
 8004cb0:	4621      	mov	r1, r4
 8004cb2:	4640      	mov	r0, r8
 8004cb4:	f8cd a000 	str.w	sl, [sp]
 8004cb8:	aa03      	add	r2, sp, #12
 8004cba:	f7ff fedf 	bl	8004a7c <_printf_common>
 8004cbe:	3001      	adds	r0, #1
 8004cc0:	d14c      	bne.n	8004d5c <_printf_i+0x200>
 8004cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc6:	b004      	add	sp, #16
 8004cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ccc:	4834      	ldr	r0, [pc, #208]	; (8004da0 <_printf_i+0x244>)
 8004cce:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004cd2:	6829      	ldr	r1, [r5, #0]
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cda:	6029      	str	r1, [r5, #0]
 8004cdc:	061d      	lsls	r5, r3, #24
 8004cde:	d514      	bpl.n	8004d0a <_printf_i+0x1ae>
 8004ce0:	07df      	lsls	r7, r3, #31
 8004ce2:	bf44      	itt	mi
 8004ce4:	f043 0320 	orrmi.w	r3, r3, #32
 8004ce8:	6023      	strmi	r3, [r4, #0]
 8004cea:	b91e      	cbnz	r6, 8004cf4 <_printf_i+0x198>
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	f023 0320 	bic.w	r3, r3, #32
 8004cf2:	6023      	str	r3, [r4, #0]
 8004cf4:	2310      	movs	r3, #16
 8004cf6:	e7af      	b.n	8004c58 <_printf_i+0xfc>
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	f043 0320 	orr.w	r3, r3, #32
 8004cfe:	6023      	str	r3, [r4, #0]
 8004d00:	2378      	movs	r3, #120	; 0x78
 8004d02:	4828      	ldr	r0, [pc, #160]	; (8004da4 <_printf_i+0x248>)
 8004d04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d08:	e7e3      	b.n	8004cd2 <_printf_i+0x176>
 8004d0a:	0659      	lsls	r1, r3, #25
 8004d0c:	bf48      	it	mi
 8004d0e:	b2b6      	uxthmi	r6, r6
 8004d10:	e7e6      	b.n	8004ce0 <_printf_i+0x184>
 8004d12:	4615      	mov	r5, r2
 8004d14:	e7bb      	b.n	8004c8e <_printf_i+0x132>
 8004d16:	682b      	ldr	r3, [r5, #0]
 8004d18:	6826      	ldr	r6, [r4, #0]
 8004d1a:	1d18      	adds	r0, r3, #4
 8004d1c:	6961      	ldr	r1, [r4, #20]
 8004d1e:	6028      	str	r0, [r5, #0]
 8004d20:	0635      	lsls	r5, r6, #24
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	d501      	bpl.n	8004d2a <_printf_i+0x1ce>
 8004d26:	6019      	str	r1, [r3, #0]
 8004d28:	e002      	b.n	8004d30 <_printf_i+0x1d4>
 8004d2a:	0670      	lsls	r0, r6, #25
 8004d2c:	d5fb      	bpl.n	8004d26 <_printf_i+0x1ca>
 8004d2e:	8019      	strh	r1, [r3, #0]
 8004d30:	2300      	movs	r3, #0
 8004d32:	4615      	mov	r5, r2
 8004d34:	6123      	str	r3, [r4, #16]
 8004d36:	e7ba      	b.n	8004cae <_printf_i+0x152>
 8004d38:	682b      	ldr	r3, [r5, #0]
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	1d1a      	adds	r2, r3, #4
 8004d3e:	602a      	str	r2, [r5, #0]
 8004d40:	681d      	ldr	r5, [r3, #0]
 8004d42:	6862      	ldr	r2, [r4, #4]
 8004d44:	4628      	mov	r0, r5
 8004d46:	f000 f82f 	bl	8004da8 <memchr>
 8004d4a:	b108      	cbz	r0, 8004d50 <_printf_i+0x1f4>
 8004d4c:	1b40      	subs	r0, r0, r5
 8004d4e:	6060      	str	r0, [r4, #4]
 8004d50:	6863      	ldr	r3, [r4, #4]
 8004d52:	6123      	str	r3, [r4, #16]
 8004d54:	2300      	movs	r3, #0
 8004d56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d5a:	e7a8      	b.n	8004cae <_printf_i+0x152>
 8004d5c:	462a      	mov	r2, r5
 8004d5e:	4649      	mov	r1, r9
 8004d60:	4640      	mov	r0, r8
 8004d62:	6923      	ldr	r3, [r4, #16]
 8004d64:	47d0      	blx	sl
 8004d66:	3001      	adds	r0, #1
 8004d68:	d0ab      	beq.n	8004cc2 <_printf_i+0x166>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	079b      	lsls	r3, r3, #30
 8004d6e:	d413      	bmi.n	8004d98 <_printf_i+0x23c>
 8004d70:	68e0      	ldr	r0, [r4, #12]
 8004d72:	9b03      	ldr	r3, [sp, #12]
 8004d74:	4298      	cmp	r0, r3
 8004d76:	bfb8      	it	lt
 8004d78:	4618      	movlt	r0, r3
 8004d7a:	e7a4      	b.n	8004cc6 <_printf_i+0x16a>
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	4632      	mov	r2, r6
 8004d80:	4649      	mov	r1, r9
 8004d82:	4640      	mov	r0, r8
 8004d84:	47d0      	blx	sl
 8004d86:	3001      	adds	r0, #1
 8004d88:	d09b      	beq.n	8004cc2 <_printf_i+0x166>
 8004d8a:	3501      	adds	r5, #1
 8004d8c:	68e3      	ldr	r3, [r4, #12]
 8004d8e:	9903      	ldr	r1, [sp, #12]
 8004d90:	1a5b      	subs	r3, r3, r1
 8004d92:	42ab      	cmp	r3, r5
 8004d94:	dcf2      	bgt.n	8004d7c <_printf_i+0x220>
 8004d96:	e7eb      	b.n	8004d70 <_printf_i+0x214>
 8004d98:	2500      	movs	r5, #0
 8004d9a:	f104 0619 	add.w	r6, r4, #25
 8004d9e:	e7f5      	b.n	8004d8c <_printf_i+0x230>
 8004da0:	08005155 	.word	0x08005155
 8004da4:	08005166 	.word	0x08005166

08004da8 <memchr>:
 8004da8:	4603      	mov	r3, r0
 8004daa:	b510      	push	{r4, lr}
 8004dac:	b2c9      	uxtb	r1, r1
 8004dae:	4402      	add	r2, r0
 8004db0:	4293      	cmp	r3, r2
 8004db2:	4618      	mov	r0, r3
 8004db4:	d101      	bne.n	8004dba <memchr+0x12>
 8004db6:	2000      	movs	r0, #0
 8004db8:	e003      	b.n	8004dc2 <memchr+0x1a>
 8004dba:	7804      	ldrb	r4, [r0, #0]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	428c      	cmp	r4, r1
 8004dc0:	d1f6      	bne.n	8004db0 <memchr+0x8>
 8004dc2:	bd10      	pop	{r4, pc}

08004dc4 <memcpy>:
 8004dc4:	440a      	add	r2, r1
 8004dc6:	4291      	cmp	r1, r2
 8004dc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004dcc:	d100      	bne.n	8004dd0 <memcpy+0xc>
 8004dce:	4770      	bx	lr
 8004dd0:	b510      	push	{r4, lr}
 8004dd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dd6:	4291      	cmp	r1, r2
 8004dd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ddc:	d1f9      	bne.n	8004dd2 <memcpy+0xe>
 8004dde:	bd10      	pop	{r4, pc}

08004de0 <memmove>:
 8004de0:	4288      	cmp	r0, r1
 8004de2:	b510      	push	{r4, lr}
 8004de4:	eb01 0402 	add.w	r4, r1, r2
 8004de8:	d902      	bls.n	8004df0 <memmove+0x10>
 8004dea:	4284      	cmp	r4, r0
 8004dec:	4623      	mov	r3, r4
 8004dee:	d807      	bhi.n	8004e00 <memmove+0x20>
 8004df0:	1e43      	subs	r3, r0, #1
 8004df2:	42a1      	cmp	r1, r4
 8004df4:	d008      	beq.n	8004e08 <memmove+0x28>
 8004df6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dfe:	e7f8      	b.n	8004df2 <memmove+0x12>
 8004e00:	4601      	mov	r1, r0
 8004e02:	4402      	add	r2, r0
 8004e04:	428a      	cmp	r2, r1
 8004e06:	d100      	bne.n	8004e0a <memmove+0x2a>
 8004e08:	bd10      	pop	{r4, pc}
 8004e0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e12:	e7f7      	b.n	8004e04 <memmove+0x24>

08004e14 <_free_r>:
 8004e14:	b538      	push	{r3, r4, r5, lr}
 8004e16:	4605      	mov	r5, r0
 8004e18:	2900      	cmp	r1, #0
 8004e1a:	d040      	beq.n	8004e9e <_free_r+0x8a>
 8004e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e20:	1f0c      	subs	r4, r1, #4
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	bfb8      	it	lt
 8004e26:	18e4      	addlt	r4, r4, r3
 8004e28:	f000 f910 	bl	800504c <__malloc_lock>
 8004e2c:	4a1c      	ldr	r2, [pc, #112]	; (8004ea0 <_free_r+0x8c>)
 8004e2e:	6813      	ldr	r3, [r2, #0]
 8004e30:	b933      	cbnz	r3, 8004e40 <_free_r+0x2c>
 8004e32:	6063      	str	r3, [r4, #4]
 8004e34:	6014      	str	r4, [r2, #0]
 8004e36:	4628      	mov	r0, r5
 8004e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e3c:	f000 b90c 	b.w	8005058 <__malloc_unlock>
 8004e40:	42a3      	cmp	r3, r4
 8004e42:	d908      	bls.n	8004e56 <_free_r+0x42>
 8004e44:	6820      	ldr	r0, [r4, #0]
 8004e46:	1821      	adds	r1, r4, r0
 8004e48:	428b      	cmp	r3, r1
 8004e4a:	bf01      	itttt	eq
 8004e4c:	6819      	ldreq	r1, [r3, #0]
 8004e4e:	685b      	ldreq	r3, [r3, #4]
 8004e50:	1809      	addeq	r1, r1, r0
 8004e52:	6021      	streq	r1, [r4, #0]
 8004e54:	e7ed      	b.n	8004e32 <_free_r+0x1e>
 8004e56:	461a      	mov	r2, r3
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	b10b      	cbz	r3, 8004e60 <_free_r+0x4c>
 8004e5c:	42a3      	cmp	r3, r4
 8004e5e:	d9fa      	bls.n	8004e56 <_free_r+0x42>
 8004e60:	6811      	ldr	r1, [r2, #0]
 8004e62:	1850      	adds	r0, r2, r1
 8004e64:	42a0      	cmp	r0, r4
 8004e66:	d10b      	bne.n	8004e80 <_free_r+0x6c>
 8004e68:	6820      	ldr	r0, [r4, #0]
 8004e6a:	4401      	add	r1, r0
 8004e6c:	1850      	adds	r0, r2, r1
 8004e6e:	4283      	cmp	r3, r0
 8004e70:	6011      	str	r1, [r2, #0]
 8004e72:	d1e0      	bne.n	8004e36 <_free_r+0x22>
 8004e74:	6818      	ldr	r0, [r3, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	4401      	add	r1, r0
 8004e7a:	6011      	str	r1, [r2, #0]
 8004e7c:	6053      	str	r3, [r2, #4]
 8004e7e:	e7da      	b.n	8004e36 <_free_r+0x22>
 8004e80:	d902      	bls.n	8004e88 <_free_r+0x74>
 8004e82:	230c      	movs	r3, #12
 8004e84:	602b      	str	r3, [r5, #0]
 8004e86:	e7d6      	b.n	8004e36 <_free_r+0x22>
 8004e88:	6820      	ldr	r0, [r4, #0]
 8004e8a:	1821      	adds	r1, r4, r0
 8004e8c:	428b      	cmp	r3, r1
 8004e8e:	bf01      	itttt	eq
 8004e90:	6819      	ldreq	r1, [r3, #0]
 8004e92:	685b      	ldreq	r3, [r3, #4]
 8004e94:	1809      	addeq	r1, r1, r0
 8004e96:	6021      	streq	r1, [r4, #0]
 8004e98:	6063      	str	r3, [r4, #4]
 8004e9a:	6054      	str	r4, [r2, #4]
 8004e9c:	e7cb      	b.n	8004e36 <_free_r+0x22>
 8004e9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ea0:	200002c4 	.word	0x200002c4

08004ea4 <sbrk_aligned>:
 8004ea4:	b570      	push	{r4, r5, r6, lr}
 8004ea6:	4e0e      	ldr	r6, [pc, #56]	; (8004ee0 <sbrk_aligned+0x3c>)
 8004ea8:	460c      	mov	r4, r1
 8004eaa:	6831      	ldr	r1, [r6, #0]
 8004eac:	4605      	mov	r5, r0
 8004eae:	b911      	cbnz	r1, 8004eb6 <sbrk_aligned+0x12>
 8004eb0:	f000 f8bc 	bl	800502c <_sbrk_r>
 8004eb4:	6030      	str	r0, [r6, #0]
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	4628      	mov	r0, r5
 8004eba:	f000 f8b7 	bl	800502c <_sbrk_r>
 8004ebe:	1c43      	adds	r3, r0, #1
 8004ec0:	d00a      	beq.n	8004ed8 <sbrk_aligned+0x34>
 8004ec2:	1cc4      	adds	r4, r0, #3
 8004ec4:	f024 0403 	bic.w	r4, r4, #3
 8004ec8:	42a0      	cmp	r0, r4
 8004eca:	d007      	beq.n	8004edc <sbrk_aligned+0x38>
 8004ecc:	1a21      	subs	r1, r4, r0
 8004ece:	4628      	mov	r0, r5
 8004ed0:	f000 f8ac 	bl	800502c <_sbrk_r>
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	d101      	bne.n	8004edc <sbrk_aligned+0x38>
 8004ed8:	f04f 34ff 	mov.w	r4, #4294967295
 8004edc:	4620      	mov	r0, r4
 8004ede:	bd70      	pop	{r4, r5, r6, pc}
 8004ee0:	200002c8 	.word	0x200002c8

08004ee4 <_malloc_r>:
 8004ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee8:	1ccd      	adds	r5, r1, #3
 8004eea:	f025 0503 	bic.w	r5, r5, #3
 8004eee:	3508      	adds	r5, #8
 8004ef0:	2d0c      	cmp	r5, #12
 8004ef2:	bf38      	it	cc
 8004ef4:	250c      	movcc	r5, #12
 8004ef6:	2d00      	cmp	r5, #0
 8004ef8:	4607      	mov	r7, r0
 8004efa:	db01      	blt.n	8004f00 <_malloc_r+0x1c>
 8004efc:	42a9      	cmp	r1, r5
 8004efe:	d905      	bls.n	8004f0c <_malloc_r+0x28>
 8004f00:	230c      	movs	r3, #12
 8004f02:	2600      	movs	r6, #0
 8004f04:	603b      	str	r3, [r7, #0]
 8004f06:	4630      	mov	r0, r6
 8004f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f0c:	4e2e      	ldr	r6, [pc, #184]	; (8004fc8 <_malloc_r+0xe4>)
 8004f0e:	f000 f89d 	bl	800504c <__malloc_lock>
 8004f12:	6833      	ldr	r3, [r6, #0]
 8004f14:	461c      	mov	r4, r3
 8004f16:	bb34      	cbnz	r4, 8004f66 <_malloc_r+0x82>
 8004f18:	4629      	mov	r1, r5
 8004f1a:	4638      	mov	r0, r7
 8004f1c:	f7ff ffc2 	bl	8004ea4 <sbrk_aligned>
 8004f20:	1c43      	adds	r3, r0, #1
 8004f22:	4604      	mov	r4, r0
 8004f24:	d14d      	bne.n	8004fc2 <_malloc_r+0xde>
 8004f26:	6834      	ldr	r4, [r6, #0]
 8004f28:	4626      	mov	r6, r4
 8004f2a:	2e00      	cmp	r6, #0
 8004f2c:	d140      	bne.n	8004fb0 <_malloc_r+0xcc>
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	4631      	mov	r1, r6
 8004f32:	4638      	mov	r0, r7
 8004f34:	eb04 0803 	add.w	r8, r4, r3
 8004f38:	f000 f878 	bl	800502c <_sbrk_r>
 8004f3c:	4580      	cmp	r8, r0
 8004f3e:	d13a      	bne.n	8004fb6 <_malloc_r+0xd2>
 8004f40:	6821      	ldr	r1, [r4, #0]
 8004f42:	3503      	adds	r5, #3
 8004f44:	1a6d      	subs	r5, r5, r1
 8004f46:	f025 0503 	bic.w	r5, r5, #3
 8004f4a:	3508      	adds	r5, #8
 8004f4c:	2d0c      	cmp	r5, #12
 8004f4e:	bf38      	it	cc
 8004f50:	250c      	movcc	r5, #12
 8004f52:	4638      	mov	r0, r7
 8004f54:	4629      	mov	r1, r5
 8004f56:	f7ff ffa5 	bl	8004ea4 <sbrk_aligned>
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	d02b      	beq.n	8004fb6 <_malloc_r+0xd2>
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	442b      	add	r3, r5
 8004f62:	6023      	str	r3, [r4, #0]
 8004f64:	e00e      	b.n	8004f84 <_malloc_r+0xa0>
 8004f66:	6822      	ldr	r2, [r4, #0]
 8004f68:	1b52      	subs	r2, r2, r5
 8004f6a:	d41e      	bmi.n	8004faa <_malloc_r+0xc6>
 8004f6c:	2a0b      	cmp	r2, #11
 8004f6e:	d916      	bls.n	8004f9e <_malloc_r+0xba>
 8004f70:	1961      	adds	r1, r4, r5
 8004f72:	42a3      	cmp	r3, r4
 8004f74:	6025      	str	r5, [r4, #0]
 8004f76:	bf18      	it	ne
 8004f78:	6059      	strne	r1, [r3, #4]
 8004f7a:	6863      	ldr	r3, [r4, #4]
 8004f7c:	bf08      	it	eq
 8004f7e:	6031      	streq	r1, [r6, #0]
 8004f80:	5162      	str	r2, [r4, r5]
 8004f82:	604b      	str	r3, [r1, #4]
 8004f84:	4638      	mov	r0, r7
 8004f86:	f104 060b 	add.w	r6, r4, #11
 8004f8a:	f000 f865 	bl	8005058 <__malloc_unlock>
 8004f8e:	f026 0607 	bic.w	r6, r6, #7
 8004f92:	1d23      	adds	r3, r4, #4
 8004f94:	1af2      	subs	r2, r6, r3
 8004f96:	d0b6      	beq.n	8004f06 <_malloc_r+0x22>
 8004f98:	1b9b      	subs	r3, r3, r6
 8004f9a:	50a3      	str	r3, [r4, r2]
 8004f9c:	e7b3      	b.n	8004f06 <_malloc_r+0x22>
 8004f9e:	6862      	ldr	r2, [r4, #4]
 8004fa0:	42a3      	cmp	r3, r4
 8004fa2:	bf0c      	ite	eq
 8004fa4:	6032      	streq	r2, [r6, #0]
 8004fa6:	605a      	strne	r2, [r3, #4]
 8004fa8:	e7ec      	b.n	8004f84 <_malloc_r+0xa0>
 8004faa:	4623      	mov	r3, r4
 8004fac:	6864      	ldr	r4, [r4, #4]
 8004fae:	e7b2      	b.n	8004f16 <_malloc_r+0x32>
 8004fb0:	4634      	mov	r4, r6
 8004fb2:	6876      	ldr	r6, [r6, #4]
 8004fb4:	e7b9      	b.n	8004f2a <_malloc_r+0x46>
 8004fb6:	230c      	movs	r3, #12
 8004fb8:	4638      	mov	r0, r7
 8004fba:	603b      	str	r3, [r7, #0]
 8004fbc:	f000 f84c 	bl	8005058 <__malloc_unlock>
 8004fc0:	e7a1      	b.n	8004f06 <_malloc_r+0x22>
 8004fc2:	6025      	str	r5, [r4, #0]
 8004fc4:	e7de      	b.n	8004f84 <_malloc_r+0xa0>
 8004fc6:	bf00      	nop
 8004fc8:	200002c4 	.word	0x200002c4

08004fcc <_realloc_r>:
 8004fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fd0:	4680      	mov	r8, r0
 8004fd2:	4614      	mov	r4, r2
 8004fd4:	460e      	mov	r6, r1
 8004fd6:	b921      	cbnz	r1, 8004fe2 <_realloc_r+0x16>
 8004fd8:	4611      	mov	r1, r2
 8004fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fde:	f7ff bf81 	b.w	8004ee4 <_malloc_r>
 8004fe2:	b92a      	cbnz	r2, 8004ff0 <_realloc_r+0x24>
 8004fe4:	f7ff ff16 	bl	8004e14 <_free_r>
 8004fe8:	4625      	mov	r5, r4
 8004fea:	4628      	mov	r0, r5
 8004fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ff0:	f000 f838 	bl	8005064 <_malloc_usable_size_r>
 8004ff4:	4284      	cmp	r4, r0
 8004ff6:	4607      	mov	r7, r0
 8004ff8:	d802      	bhi.n	8005000 <_realloc_r+0x34>
 8004ffa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ffe:	d812      	bhi.n	8005026 <_realloc_r+0x5a>
 8005000:	4621      	mov	r1, r4
 8005002:	4640      	mov	r0, r8
 8005004:	f7ff ff6e 	bl	8004ee4 <_malloc_r>
 8005008:	4605      	mov	r5, r0
 800500a:	2800      	cmp	r0, #0
 800500c:	d0ed      	beq.n	8004fea <_realloc_r+0x1e>
 800500e:	42bc      	cmp	r4, r7
 8005010:	4622      	mov	r2, r4
 8005012:	4631      	mov	r1, r6
 8005014:	bf28      	it	cs
 8005016:	463a      	movcs	r2, r7
 8005018:	f7ff fed4 	bl	8004dc4 <memcpy>
 800501c:	4631      	mov	r1, r6
 800501e:	4640      	mov	r0, r8
 8005020:	f7ff fef8 	bl	8004e14 <_free_r>
 8005024:	e7e1      	b.n	8004fea <_realloc_r+0x1e>
 8005026:	4635      	mov	r5, r6
 8005028:	e7df      	b.n	8004fea <_realloc_r+0x1e>
	...

0800502c <_sbrk_r>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	2300      	movs	r3, #0
 8005030:	4d05      	ldr	r5, [pc, #20]	; (8005048 <_sbrk_r+0x1c>)
 8005032:	4604      	mov	r4, r0
 8005034:	4608      	mov	r0, r1
 8005036:	602b      	str	r3, [r5, #0]
 8005038:	f7fc fa86 	bl	8001548 <_sbrk>
 800503c:	1c43      	adds	r3, r0, #1
 800503e:	d102      	bne.n	8005046 <_sbrk_r+0x1a>
 8005040:	682b      	ldr	r3, [r5, #0]
 8005042:	b103      	cbz	r3, 8005046 <_sbrk_r+0x1a>
 8005044:	6023      	str	r3, [r4, #0]
 8005046:	bd38      	pop	{r3, r4, r5, pc}
 8005048:	200002cc 	.word	0x200002cc

0800504c <__malloc_lock>:
 800504c:	4801      	ldr	r0, [pc, #4]	; (8005054 <__malloc_lock+0x8>)
 800504e:	f000 b811 	b.w	8005074 <__retarget_lock_acquire_recursive>
 8005052:	bf00      	nop
 8005054:	200002d0 	.word	0x200002d0

08005058 <__malloc_unlock>:
 8005058:	4801      	ldr	r0, [pc, #4]	; (8005060 <__malloc_unlock+0x8>)
 800505a:	f000 b80c 	b.w	8005076 <__retarget_lock_release_recursive>
 800505e:	bf00      	nop
 8005060:	200002d0 	.word	0x200002d0

08005064 <_malloc_usable_size_r>:
 8005064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005068:	1f18      	subs	r0, r3, #4
 800506a:	2b00      	cmp	r3, #0
 800506c:	bfbc      	itt	lt
 800506e:	580b      	ldrlt	r3, [r1, r0]
 8005070:	18c0      	addlt	r0, r0, r3
 8005072:	4770      	bx	lr

08005074 <__retarget_lock_acquire_recursive>:
 8005074:	4770      	bx	lr

08005076 <__retarget_lock_release_recursive>:
 8005076:	4770      	bx	lr

08005078 <_init>:
 8005078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507a:	bf00      	nop
 800507c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507e:	bc08      	pop	{r3}
 8005080:	469e      	mov	lr, r3
 8005082:	4770      	bx	lr

08005084 <_fini>:
 8005084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005086:	bf00      	nop
 8005088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800508a:	bc08      	pop	{r3}
 800508c:	469e      	mov	lr, r3
 800508e:	4770      	bx	lr

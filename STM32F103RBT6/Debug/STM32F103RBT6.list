
STM32F103RBT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005020  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800512c  0800512c  0001512c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005234  08005234  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08005234  08005234  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005234  08005234  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005234  08005234  00015234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005238  08005238  00015238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800523c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  2000008c  080052c8  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  080052c8  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e56  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000280d  00000000  00000000  00030f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  00033718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  00034ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003144  00000000  00000000  00035d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015554  00000000  00000000  00038e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009051c  00000000  00000000  0004e3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de90c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005610  00000000  00000000  000de95c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005114 	.word	0x08005114

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08005114 	.word	0x08005114

0800014c <FaBoLCD_PCF8574>:
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)66, (uint8_t *) initData, 1, 0xffff);
	HAL_Delay(100);
}

void FaBoLCD_PCF8574(uint8_t addr)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  _i2caddr = addr;
 8000156:	4a10      	ldr	r2, [pc, #64]	; (8000198 <FaBoLCD_PCF8574+0x4c>)
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	7013      	strb	r3, [r2, #0]
  _backlight = BL;
 800015c:	4b0f      	ldr	r3, [pc, #60]	; (800019c <FaBoLCD_PCF8574+0x50>)
 800015e:	2280      	movs	r2, #128	; 0x80
 8000160:	701a      	strb	r2, [r3, #0]
  uint8_t initData[1] = {0x80};
 8000162:	2380      	movs	r3, #128	; 0x80
 8000164:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)0x42, (uint8_t *) initData, 1, 0xffff);
 8000166:	f107 020c 	add.w	r2, r7, #12
 800016a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800016e:	9300      	str	r3, [sp, #0]
 8000170:	2301      	movs	r3, #1
 8000172:	2142      	movs	r1, #66	; 0x42
 8000174:	480a      	ldr	r0, [pc, #40]	; (80001a0 <FaBoLCD_PCF8574+0x54>)
 8000176:	f002 fa4b 	bl	8002610 <HAL_I2C_Master_Transmit>
  HAL_Delay(100);
 800017a:	2064      	movs	r0, #100	; 0x64
 800017c:	f001 fd6c 	bl	8001c58 <HAL_Delay>
  init();
 8000180:	f000 f810 	bl	80001a4 <init>
  begin(LCD_COLUMN, LCD_LINE, LCD_5x8DOTS);
 8000184:	2200      	movs	r2, #0
 8000186:	2102      	movs	r1, #2
 8000188:	2010      	movs	r0, #16
 800018a:	f000 f817 	bl	80001bc <begin>
}
 800018e:	bf00      	nop
 8000190:	3710      	adds	r7, #16
 8000192:	46bd      	mov	sp, r7
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	200000b0 	.word	0x200000b0
 800019c:	200000b1 	.word	0x200000b1
 80001a0:	200000f4 	.word	0x200000f4

080001a4 <init>:

/**
 @brief init
*/
void init()
{
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0
  _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80001a8:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <init+0x14>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	701a      	strb	r2, [r3, #0]
}
 80001ae:	bf00      	nop
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr
 80001b6:	bf00      	nop
 80001b8:	200000a8 	.word	0x200000a8

080001bc <begin>:

/**
 @brief brgin
*/
void begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	4603      	mov	r3, r0
 80001c4:	71fb      	strb	r3, [r7, #7]
 80001c6:	460b      	mov	r3, r1
 80001c8:	71bb      	strb	r3, [r7, #6]
 80001ca:	4613      	mov	r3, r2
 80001cc:	717b      	strb	r3, [r7, #5]
  if (lines > 1) {
 80001ce:	79bb      	ldrb	r3, [r7, #6]
 80001d0:	2b01      	cmp	r3, #1
 80001d2:	d906      	bls.n	80001e2 <begin+0x26>
	_displayfunction |= LCD_2LINE;
 80001d4:	4b2b      	ldr	r3, [pc, #172]	; (8000284 <begin+0xc8>)
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	f043 0308 	orr.w	r3, r3, #8
 80001dc:	b2da      	uxtb	r2, r3
 80001de:	4b29      	ldr	r3, [pc, #164]	; (8000284 <begin+0xc8>)
 80001e0:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80001e2:	4a29      	ldr	r2, [pc, #164]	; (8000288 <begin+0xcc>)
 80001e4:	79bb      	ldrb	r3, [r7, #6]
 80001e6:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 80001e8:	79fa      	ldrb	r2, [r7, #7]
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	3340      	adds	r3, #64	; 0x40
 80001ee:	2140      	movs	r1, #64	; 0x40
 80001f0:	2000      	movs	r0, #0
 80001f2:	f000 f84f 	bl	8000294 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80001f6:	797b      	ldrb	r3, [r7, #5]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d009      	beq.n	8000210 <begin+0x54>
 80001fc:	79bb      	ldrb	r3, [r7, #6]
 80001fe:	2b01      	cmp	r3, #1
 8000200:	d106      	bne.n	8000210 <begin+0x54>
	_displayfunction |= LCD_5x10DOTS;
 8000202:	4b20      	ldr	r3, [pc, #128]	; (8000284 <begin+0xc8>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	b2da      	uxtb	r2, r3
 800020c:	4b1d      	ldr	r3, [pc, #116]	; (8000284 <begin+0xc8>)
 800020e:	701a      	strb	r2, [r3, #0]
  }

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way before 4.5V so we'll wait 50
  HAL_Delay(50);
 8000210:	2032      	movs	r0, #50	; 0x32
 8000212:	f001 fd21 	bl	8001c58 <HAL_Delay>
  // Now we pull both RS and R/W low to begin commands
  writeI2c(0x00);
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f922 	bl	8000460 <writeI2c>

  // this is according to the hitachi HD44780 datasheet
  // figure 24, pg 46

  // we start in 8bit mode, try to set 4 bit mode
  write4bits(DB4|DB5);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 f90e 	bl	800043e <write4bits>
  HAL_Delay(5); // wait min 4.1ms
 8000222:	2005      	movs	r0, #5
 8000224:	f001 fd18 	bl	8001c58 <HAL_Delay>

  // second try
  write4bits(DB4|DB5);
 8000228:	2003      	movs	r0, #3
 800022a:	f000 f908 	bl	800043e <write4bits>
  HAL_Delay(5); // wait min 4.1ms
 800022e:	2005      	movs	r0, #5
 8000230:	f001 fd12 	bl	8001c58 <HAL_Delay>

  // third go!
  write4bits(DB4|DB5);
 8000234:	2003      	movs	r0, #3
 8000236:	f000 f902 	bl	800043e <write4bits>
  HAL_Delay(2);
 800023a:	2002      	movs	r0, #2
 800023c:	f001 fd0c 	bl	8001c58 <HAL_Delay>

  // finally, set to 4-bit interface
  write4bits(DB5);
 8000240:	2002      	movs	r0, #2
 8000242:	f000 f8fc 	bl	800043e <write4bits>

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 8000246:	4b0f      	ldr	r3, [pc, #60]	; (8000284 <begin+0xc8>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	f043 0320 	orr.w	r3, r3, #32
 800024e:	b2db      	uxtb	r3, r3
 8000250:	4618      	mov	r0, r3
 8000252:	f000 f88f 	bl	8000374 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000256:	4b0d      	ldr	r3, [pc, #52]	; (800028c <begin+0xd0>)
 8000258:	2204      	movs	r2, #4
 800025a:	701a      	strb	r2, [r3, #0]
  display();
 800025c:	f000 f874 	bl	8000348 <display>

  // clear it off
  clear();
 8000260:	f000 f836 	bl	80002d0 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000264:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <begin+0xd4>)
 8000266:	2202      	movs	r2, #2
 8000268:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800026a:	4b09      	ldr	r3, [pc, #36]	; (8000290 <begin+0xd4>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	f043 0304 	orr.w	r3, r3, #4
 8000272:	b2db      	uxtb	r3, r3
 8000274:	4618      	mov	r0, r3
 8000276:	f000 f87d 	bl	8000374 <command>

}
 800027a:	bf00      	nop
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	200000a8 	.word	0x200000a8
 8000288:	200000ab 	.word	0x200000ab
 800028c:	200000a9 	.word	0x200000a9
 8000290:	200000aa 	.word	0x200000aa

08000294 <setRowOffsets>:

/**
 @brief setRowOffsets
*/
void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	60f8      	str	r0, [r7, #12]
 800029c:	60b9      	str	r1, [r7, #8]
 800029e:	607a      	str	r2, [r7, #4]
 80002a0:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	b2da      	uxtb	r2, r3
 80002a6:	4b09      	ldr	r3, [pc, #36]	; (80002cc <setRowOffsets+0x38>)
 80002a8:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	4b07      	ldr	r3, [pc, #28]	; (80002cc <setRowOffsets+0x38>)
 80002b0:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	b2da      	uxtb	r2, r3
 80002b6:	4b05      	ldr	r3, [pc, #20]	; (80002cc <setRowOffsets+0x38>)
 80002b8:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	b2da      	uxtb	r2, r3
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <setRowOffsets+0x38>)
 80002c0:	70da      	strb	r2, [r3, #3]
}
 80002c2:	bf00      	nop
 80002c4:	3714      	adds	r7, #20
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	200000ac 	.word	0x200000ac

080002d0 <clear>:

/**
 @brief clear
*/
void clear()
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 80002d4:	2001      	movs	r0, #1
 80002d6:	f000 f84d 	bl	8000374 <command>
  HAL_Delay(2);  // this command takes a long time!
 80002da:	2002      	movs	r0, #2
 80002dc:	f001 fcbc 	bl	8001c58 <HAL_Delay>
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <setCursor>:

/**
 @brief setCursor
*/
void setCursor(uint8_t col, uint8_t row)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	460a      	mov	r2, r1
 80002ee:	71fb      	strb	r3, [r7, #7]
 80002f0:	4613      	mov	r3, r2
 80002f2:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 80002f4:	2304      	movs	r3, #4
 80002f6:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 80002f8:	79bb      	ldrb	r3, [r7, #6]
 80002fa:	68fa      	ldr	r2, [r7, #12]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d803      	bhi.n	8000308 <setCursor+0x24>
	row = max_lines - 1;    // we count rows starting w/0
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	b2db      	uxtb	r3, r3
 8000304:	3b01      	subs	r3, #1
 8000306:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000308:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <setCursor+0x5c>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	79ba      	ldrb	r2, [r7, #6]
 800030e:	429a      	cmp	r2, r3
 8000310:	d303      	bcc.n	800031a <setCursor+0x36>
	row = _numlines - 1;    // we count rows starting w/0
 8000312:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <setCursor+0x5c>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	3b01      	subs	r3, #1
 8000318:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 800031a:	79bb      	ldrb	r3, [r7, #6]
 800031c:	4a09      	ldr	r2, [pc, #36]	; (8000344 <setCursor+0x60>)
 800031e:	5cd2      	ldrb	r2, [r2, r3]
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	4413      	add	r3, r2
 8000324:	b2db      	uxtb	r3, r3
 8000326:	b25b      	sxtb	r3, r3
 8000328:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800032c:	b25b      	sxtb	r3, r3
 800032e:	b2db      	uxtb	r3, r3
 8000330:	4618      	mov	r0, r3
 8000332:	f000 f81f 	bl	8000374 <command>
}
 8000336:	bf00      	nop
 8000338:	3710      	adds	r7, #16
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	200000ab 	.word	0x200000ab
 8000344:	200000ac 	.word	0x200000ac

08000348 <display>:
}

/**
 @brief Turn the display on (quickly)
*/
void display() {
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 800034c:	4b08      	ldr	r3, [pc, #32]	; (8000370 <display+0x28>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	f043 0304 	orr.w	r3, r3, #4
 8000354:	b2da      	uxtb	r2, r3
 8000356:	4b06      	ldr	r3, [pc, #24]	; (8000370 <display+0x28>)
 8000358:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 800035a:	4b05      	ldr	r3, [pc, #20]	; (8000370 <display+0x28>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	f043 0308 	orr.w	r3, r3, #8
 8000362:	b2db      	uxtb	r3, r3
 8000364:	4618      	mov	r0, r3
 8000366:	f000 f805 	bl	8000374 <command>
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	200000a9 	.word	0x200000a9

08000374 <command>:
/*********** mid level commands, for sending data/cmds */

/**
 @brief command
*/
inline void command(uint8_t value) {
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
  send(value, 0);
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f000 f813 	bl	80003ae <send>
}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <write>:

/**
 @brief write
*/
inline uint8_t write(uint8_t value) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
  send(value, RS);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	2140      	movs	r1, #64	; 0x40
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 f805 	bl	80003ae <send>
  return 1; // assume sucess
 80003a4:	2301      	movs	r3, #1
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}

080003ae <send>:
/************ low level data pushing commands **********/

/**
 @brief write either command or data, 4-bit
*/
void send(uint8_t value, uint8_t mode) {
 80003ae:	b580      	push	{r7, lr}
 80003b0:	b084      	sub	sp, #16
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	4603      	mov	r3, r0
 80003b6:	460a      	mov	r2, r1
 80003b8:	71fb      	strb	r3, [r7, #7]
 80003ba:	4613      	mov	r3, r2
 80003bc:	71bb      	strb	r3, [r7, #6]
  uint8_t Hbit = (value >> 4) & 0x0F;
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	091b      	lsrs	r3, r3, #4
 80003c2:	73fb      	strb	r3, [r7, #15]
  uint8_t Lbit = value & 0x0F;
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	f003 030f 	and.w	r3, r3, #15
 80003ca:	73bb      	strb	r3, [r7, #14]
  write4bits(Hbit|mode);
 80003cc:	7bfa      	ldrb	r2, [r7, #15]
 80003ce:	79bb      	ldrb	r3, [r7, #6]
 80003d0:	4313      	orrs	r3, r2
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	4618      	mov	r0, r3
 80003d6:	f000 f832 	bl	800043e <write4bits>
  write4bits(Lbit|mode);
 80003da:	7bba      	ldrb	r2, [r7, #14]
 80003dc:	79bb      	ldrb	r3, [r7, #6]
 80003de:	4313      	orrs	r3, r2
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 f82b 	bl	800043e <write4bits>
}
 80003e8:	bf00      	nop
 80003ea:	3710      	adds	r7, #16
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <pulseEnable>:

/**
 @brief pulseEnable
*/
void pulseEnable(uint8_t value) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	71fb      	strb	r3, [r7, #7]
  writeI2c(value & ~EN); // EN LOW
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	f023 0310 	bic.w	r3, r3, #16
 8000400:	b2db      	uxtb	r3, r3
 8000402:	4618      	mov	r0, r3
 8000404:	f000 f82c 	bl	8000460 <writeI2c>
  HAL_Delay(1);
 8000408:	2001      	movs	r0, #1
 800040a:	f001 fc25 	bl	8001c58 <HAL_Delay>
  writeI2c(value|EN);    // EN HIGH
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	f043 0310 	orr.w	r3, r3, #16
 8000414:	b2db      	uxtb	r3, r3
 8000416:	4618      	mov	r0, r3
 8000418:	f000 f822 	bl	8000460 <writeI2c>
  HAL_Delay(1);  // enable pulse must be >450ns
 800041c:	2001      	movs	r0, #1
 800041e:	f001 fc1b 	bl	8001c58 <HAL_Delay>
  writeI2c(value & ~EN); // EN LOW
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	f023 0310 	bic.w	r3, r3, #16
 8000428:	b2db      	uxtb	r3, r3
 800042a:	4618      	mov	r0, r3
 800042c:	f000 f818 	bl	8000460 <writeI2c>
  HAL_Delay(1); // commands need > 37us to settle
 8000430:	2001      	movs	r0, #1
 8000432:	f001 fc11 	bl	8001c58 <HAL_Delay>
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}

0800043e <write4bits>:

/**
 @brief write4bits
*/
void write4bits(uint8_t value) {
 800043e:	b580      	push	{r7, lr}
 8000440:	b082      	sub	sp, #8
 8000442:	af00      	add	r7, sp, #0
 8000444:	4603      	mov	r3, r0
 8000446:	71fb      	strb	r3, [r7, #7]
  writeI2c(value);
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	4618      	mov	r0, r3
 800044c:	f000 f808 	bl	8000460 <writeI2c>
  pulseEnable(value);
 8000450:	79fb      	ldrb	r3, [r7, #7]
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff ffcc 	bl	80003f0 <pulseEnable>
}
 8000458:	bf00      	nop
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <writeI2c>:

/**
 @brief writeI2c
*/
void writeI2c(uint8_t data) {
 8000460:	b580      	push	{r7, lr}
 8000462:	b086      	sub	sp, #24
 8000464:	af02      	add	r7, sp, #8
 8000466:	4603      	mov	r3, r0
 8000468:	71fb      	strb	r3, [r7, #7]
  uint8_t data_t[1];
  data_t[0] = data|_backlight;
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <writeI2c+0x38>)
 800046c:	781a      	ldrb	r2, [r3, #0]
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	4313      	orrs	r3, r2
 8000472:	b2db      	uxtb	r3, r3
 8000474:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit (&hi2c1, (uint16_t)_i2caddr,(uint8_t *) data_t, 1, 0xFFFF);
 8000476:	4b09      	ldr	r3, [pc, #36]	; (800049c <writeI2c+0x3c>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	b299      	uxth	r1, r3
 800047c:	f107 020c 	add.w	r2, r7, #12
 8000480:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000484:	9300      	str	r3, [sp, #0]
 8000486:	2301      	movs	r3, #1
 8000488:	4805      	ldr	r0, [pc, #20]	; (80004a0 <writeI2c+0x40>)
 800048a:	f002 f8c1 	bl	8002610 <HAL_I2C_Master_Transmit>
}
 800048e:	bf00      	nop
 8000490:	3710      	adds	r7, #16
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	200000b1 	.word	0x200000b1
 800049c:	200000b0 	.word	0x200000b0
 80004a0:	200000f4 	.word	0x200000f4

080004a4 <Lcd_Initialization>:

//////////////////////////////////////////////////////////////////////////


void Lcd_Initialization (void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	FaBoLCD_PCF8574(SLAVE_ADDRESS_LCD);
 80004a8:	2042      	movs	r0, #66	; 0x42
 80004aa:	f7ff fe4f 	bl	800014c <FaBoLCD_PCF8574>
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <Lcd_Send_Data>:
{
	command(cmd);
}

void Lcd_Send_Data (char data)
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	b082      	sub	sp, #8
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	4603      	mov	r3, r0
 80004ba:	71fb      	strb	r3, [r7, #7]
	write(data);
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff ff66 	bl	8000390 <write>
}
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <Lcd_Send_String>:

void Lcd_Send_String (char *str)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	while (*str) Lcd_Send_Data (*str++);
 80004d4:	e006      	b.n	80004e4 <Lcd_Send_String+0x18>
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	1c5a      	adds	r2, r3, #1
 80004da:	607a      	str	r2, [r7, #4]
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff ffe7 	bl	80004b2 <Lcd_Send_Data>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d1f4      	bne.n	80004d6 <Lcd_Send_String+0xa>
}
 80004ec:	bf00      	nop
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <Lcd_Goto_XY>:
{
	Lcd_Send_Cmd (0x01); //clear display
}

void Lcd_Goto_XY (int row, int col)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	b082      	sub	sp, #8
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
 80004fe:	6039      	str	r1, [r7, #0]
	setCursor(col, row);
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	b2db      	uxtb	r3, r3
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	b2d2      	uxtb	r2, r2
 8000508:	4611      	mov	r1, r2
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff feea 	bl	80002e4 <setCursor>
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <displayNum>:

	Lcd_Goto_XY(1, 0);
	Lcd_Send_String((char*)strTotalKWH);
}

void displayNum(int num1, int num2, int state1, int state2){
 8000518:	b580      	push	{r7, lr}
 800051a:	b08c      	sub	sp, #48	; 0x30
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
 8000524:	603b      	str	r3, [r7, #0]
	char str1[16];
	char str2[16];

	if (state1 == STATE_RED)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d107      	bne.n	800053c <displayNum+0x24>
		sprintf(str1, "Lane1->R: %03d ", num1);
 800052c:	f107 0320 	add.w	r3, r7, #32
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	4928      	ldr	r1, [pc, #160]	; (80005d4 <displayNum+0xbc>)
 8000534:	4618      	mov	r0, r3
 8000536:	f004 f973 	bl	8004820 <siprintf>
 800053a:	e014      	b.n	8000566 <displayNum+0x4e>
	else if (state1 == STATE_GREEN)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b02      	cmp	r3, #2
 8000540:	d107      	bne.n	8000552 <displayNum+0x3a>
		sprintf(str1, "Lane1->G: %03d ", num1);
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	4923      	ldr	r1, [pc, #140]	; (80005d8 <displayNum+0xc0>)
 800054a:	4618      	mov	r0, r3
 800054c:	f004 f968 	bl	8004820 <siprintf>
 8000550:	e009      	b.n	8000566 <displayNum+0x4e>
	else if (state1 == STATE_YELLOW)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b03      	cmp	r3, #3
 8000556:	d106      	bne.n	8000566 <displayNum+0x4e>
		sprintf(str1, "Lane1->Y: %03d ", num1);
 8000558:	f107 0320 	add.w	r3, r7, #32
 800055c:	68fa      	ldr	r2, [r7, #12]
 800055e:	491f      	ldr	r1, [pc, #124]	; (80005dc <displayNum+0xc4>)
 8000560:	4618      	mov	r0, r3
 8000562:	f004 f95d 	bl	8004820 <siprintf>

	if (state2 == STATE_RED)
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d107      	bne.n	800057c <displayNum+0x64>
		sprintf(str2, "Lane2->R: %03d ", num2);
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	68ba      	ldr	r2, [r7, #8]
 8000572:	491b      	ldr	r1, [pc, #108]	; (80005e0 <displayNum+0xc8>)
 8000574:	4618      	mov	r0, r3
 8000576:	f004 f953 	bl	8004820 <siprintf>
 800057a:	e014      	b.n	80005a6 <displayNum+0x8e>
	else if (state2 == STATE_GREEN)
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	2b02      	cmp	r3, #2
 8000580:	d107      	bne.n	8000592 <displayNum+0x7a>
		sprintf(str2, "Lane2->G: %03d ", num2);
 8000582:	f107 0310 	add.w	r3, r7, #16
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	4916      	ldr	r1, [pc, #88]	; (80005e4 <displayNum+0xcc>)
 800058a:	4618      	mov	r0, r3
 800058c:	f004 f948 	bl	8004820 <siprintf>
 8000590:	e009      	b.n	80005a6 <displayNum+0x8e>
	else if (state2 == STATE_YELLOW)
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	2b03      	cmp	r3, #3
 8000596:	d106      	bne.n	80005a6 <displayNum+0x8e>
		sprintf(str2, "Lane2->Y: %03d ", num2);
 8000598:	f107 0310 	add.w	r3, r7, #16
 800059c:	68ba      	ldr	r2, [r7, #8]
 800059e:	4912      	ldr	r1, [pc, #72]	; (80005e8 <displayNum+0xd0>)
 80005a0:	4618      	mov	r0, r3
 80005a2:	f004 f93d 	bl	8004820 <siprintf>

	Lcd_Goto_XY(0, 0);
 80005a6:	2100      	movs	r1, #0
 80005a8:	2000      	movs	r0, #0
 80005aa:	f7ff ffa4 	bl	80004f6 <Lcd_Goto_XY>
	Lcd_Send_String((char*)str1);
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff ff8a 	bl	80004cc <Lcd_Send_String>

	Lcd_Goto_XY(1, 0);
 80005b8:	2100      	movs	r1, #0
 80005ba:	2001      	movs	r0, #1
 80005bc:	f7ff ff9b 	bl	80004f6 <Lcd_Goto_XY>
	Lcd_Send_String((char*)str2);
 80005c0:	f107 0310 	add.w	r3, r7, #16
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff ff81 	bl	80004cc <Lcd_Send_String>
}
 80005ca:	bf00      	nop
 80005cc:	3730      	adds	r7, #48	; 0x30
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	08005148 	.word	0x08005148
 80005d8:	08005158 	.word	0x08005158
 80005dc:	08005168 	.word	0x08005168
 80005e0:	08005178 	.word	0x08005178
 80005e4:	08005188 	.word	0x08005188
 80005e8:	08005198 	.word	0x08005198

080005ec <displayInMode>:

void displayInMode (int modeNum, int timeNum){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6039      	str	r1, [r7, #0]
	char str1[16];
	char str2[16];
	if (modeNum == MODE2){
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b0e      	cmp	r3, #14
 80005fa:	d106      	bne.n	800060a <displayInMode+0x1e>
		sprintf(str1, "Mode     : 002");
 80005fc:	f107 0318 	add.w	r3, r7, #24
 8000600:	4915      	ldr	r1, [pc, #84]	; (8000658 <displayInMode+0x6c>)
 8000602:	4618      	mov	r0, r3
 8000604:	f004 f90c 	bl	8004820 <siprintf>
 8000608:	e008      	b.n	800061c <displayInMode+0x30>
	}
	else if (modeNum == MODE3){
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b0f      	cmp	r3, #15
 800060e:	d105      	bne.n	800061c <displayInMode+0x30>
		sprintf(str1, "Mode     : 003");
 8000610:	f107 0318 	add.w	r3, r7, #24
 8000614:	4911      	ldr	r1, [pc, #68]	; (800065c <displayInMode+0x70>)
 8000616:	4618      	mov	r0, r3
 8000618:	f004 f902 	bl	8004820 <siprintf>
	}
		sprintf(str2, "Wait time: %03d", timeNum);
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	683a      	ldr	r2, [r7, #0]
 8000622:	490f      	ldr	r1, [pc, #60]	; (8000660 <displayInMode+0x74>)
 8000624:	4618      	mov	r0, r3
 8000626:	f004 f8fb 	bl	8004820 <siprintf>

	Lcd_Goto_XY(0, 0);
 800062a:	2100      	movs	r1, #0
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff ff62 	bl	80004f6 <Lcd_Goto_XY>
	Lcd_Send_String((char*)str1);
 8000632:	f107 0318 	add.w	r3, r7, #24
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff ff48 	bl	80004cc <Lcd_Send_String>

	Lcd_Goto_XY(1, 0);
 800063c:	2100      	movs	r1, #0
 800063e:	2001      	movs	r0, #1
 8000640:	f7ff ff59 	bl	80004f6 <Lcd_Goto_XY>
	Lcd_Send_String((char*)str2);
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ff3f 	bl	80004cc <Lcd_Send_String>
}
 800064e:	bf00      	nop
 8000650:	3728      	adds	r7, #40	; 0x28
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	080051a8 	.word	0x080051a8
 800065c:	080051b8 	.word	0x080051b8
 8000660:	080051c8 	.word	0x080051c8

08000664 <ensureInBoundary>:
int num_buffer[2] = {0,0};
int state_buffer[2] = {0,0};
int mode_buffer = 0;
int time_buffer = 0;

void ensureInBoundary(){
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
	if (AUTO_RED > UPPER_BOUND) AUTO_RED = UPPER_BOUND;
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <ensureInBoundary+0x6c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000670:	db03      	blt.n	800067a <ensureInBoundary+0x16>
 8000672:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <ensureInBoundary+0x6c>)
 8000674:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000678:	601a      	str	r2, [r3, #0]
	if (AUTO_RED < LOWER_BOUND) AUTO_RED = LOWER_BOUND;
 800067a:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <ensureInBoundary+0x6c>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	dc02      	bgt.n	8000688 <ensureInBoundary+0x24>
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <ensureInBoundary+0x6c>)
 8000684:	2201      	movs	r2, #1
 8000686:	601a      	str	r2, [r3, #0]
	if (AUTO_GREEN > UPPER_BOUND) AUTO_GREEN = UPPER_BOUND;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <ensureInBoundary+0x70>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000690:	db03      	blt.n	800069a <ensureInBoundary+0x36>
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <ensureInBoundary+0x70>)
 8000694:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000698:	601a      	str	r2, [r3, #0]
	if (AUTO_GREEN < LOWER_BOUND) AUTO_GREEN = LOWER_BOUND;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <ensureInBoundary+0x70>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	dc02      	bgt.n	80006a8 <ensureInBoundary+0x44>
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <ensureInBoundary+0x70>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	601a      	str	r2, [r3, #0]
	if (AUTO_YELLOW > UPPER_BOUND) AUTO_YELLOW = UPPER_BOUND;
 80006a8:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <ensureInBoundary+0x74>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006b0:	db03      	blt.n	80006ba <ensureInBoundary+0x56>
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <ensureInBoundary+0x74>)
 80006b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006b8:	601a      	str	r2, [r3, #0]
	if (AUTO_YELLOW < LOWER_BOUND) AUTO_YELLOW = LOWER_BOUND;
 80006ba:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <ensureInBoundary+0x74>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	dc02      	bgt.n	80006c8 <ensureInBoundary+0x64>
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <ensureInBoundary+0x74>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	601a      	str	r2, [r3, #0]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr
 80006d0:	200000dc 	.word	0x200000dc
 80006d4:	200000e0 	.word	0x200000e0
 80006d8:	200000e4 	.word	0x200000e4

080006dc <mode2IncProcess>:

void mode2IncProcess(){
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	AUTO_GREEN++;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <mode2IncProcess+0x2c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	3301      	adds	r3, #1
 80006e6:	4a08      	ldr	r2, [pc, #32]	; (8000708 <mode2IncProcess+0x2c>)
 80006e8:	6013      	str	r3, [r2, #0]
	time_buffer = AUTO_GREEN;
 80006ea:	4b07      	ldr	r3, [pc, #28]	; (8000708 <mode2IncProcess+0x2c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a07      	ldr	r2, [pc, #28]	; (800070c <mode2IncProcess+0x30>)
 80006f0:	6013      	str	r3, [r2, #0]
	AUTO_RED = AUTO_GREEN + AUTO_YELLOW;
 80006f2:	4b05      	ldr	r3, [pc, #20]	; (8000708 <mode2IncProcess+0x2c>)
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <mode2IncProcess+0x34>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4413      	add	r3, r2
 80006fc:	4a05      	ldr	r2, [pc, #20]	; (8000714 <mode2IncProcess+0x38>)
 80006fe:	6013      	str	r3, [r2, #0]
	ensureInBoundary();
 8000700:	f7ff ffb0 	bl	8000664 <ensureInBoundary>
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200000e0 	.word	0x200000e0
 800070c:	200000c8 	.word	0x200000c8
 8000710:	200000e4 	.word	0x200000e4
 8000714:	200000dc 	.word	0x200000dc

08000718 <mode2DecProcess>:

void mode2DecProcess(){
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	AUTO_GREEN--;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <mode2DecProcess+0x2c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	3b01      	subs	r3, #1
 8000722:	4a08      	ldr	r2, [pc, #32]	; (8000744 <mode2DecProcess+0x2c>)
 8000724:	6013      	str	r3, [r2, #0]
	time_buffer = AUTO_GREEN;
 8000726:	4b07      	ldr	r3, [pc, #28]	; (8000744 <mode2DecProcess+0x2c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a07      	ldr	r2, [pc, #28]	; (8000748 <mode2DecProcess+0x30>)
 800072c:	6013      	str	r3, [r2, #0]
	AUTO_RED = AUTO_GREEN + AUTO_YELLOW;
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <mode2DecProcess+0x2c>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <mode2DecProcess+0x34>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4413      	add	r3, r2
 8000738:	4a05      	ldr	r2, [pc, #20]	; (8000750 <mode2DecProcess+0x38>)
 800073a:	6013      	str	r3, [r2, #0]
	ensureInBoundary();
 800073c:	f7ff ff92 	bl	8000664 <ensureInBoundary>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200000e0 	.word	0x200000e0
 8000748:	200000c8 	.word	0x200000c8
 800074c:	200000e4 	.word	0x200000e4
 8000750:	200000dc 	.word	0x200000dc

08000754 <mode3IncProcess>:

void mode3IncProcess(){
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	AUTO_YELLOW++;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <mode3IncProcess+0x2c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	3301      	adds	r3, #1
 800075e:	4a08      	ldr	r2, [pc, #32]	; (8000780 <mode3IncProcess+0x2c>)
 8000760:	6013      	str	r3, [r2, #0]
	time_buffer = AUTO_YELLOW;
 8000762:	4b07      	ldr	r3, [pc, #28]	; (8000780 <mode3IncProcess+0x2c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a07      	ldr	r2, [pc, #28]	; (8000784 <mode3IncProcess+0x30>)
 8000768:	6013      	str	r3, [r2, #0]
	AUTO_RED = AUTO_GREEN + AUTO_YELLOW;
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <mode3IncProcess+0x34>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b04      	ldr	r3, [pc, #16]	; (8000780 <mode3IncProcess+0x2c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4413      	add	r3, r2
 8000774:	4a05      	ldr	r2, [pc, #20]	; (800078c <mode3IncProcess+0x38>)
 8000776:	6013      	str	r3, [r2, #0]
	ensureInBoundary();
 8000778:	f7ff ff74 	bl	8000664 <ensureInBoundary>
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200000e4 	.word	0x200000e4
 8000784:	200000c8 	.word	0x200000c8
 8000788:	200000e0 	.word	0x200000e0
 800078c:	200000dc 	.word	0x200000dc

08000790 <mode3DecProcess>:

void mode3DecProcess(){
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	AUTO_YELLOW--;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <mode3DecProcess+0x2c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	3b01      	subs	r3, #1
 800079a:	4a08      	ldr	r2, [pc, #32]	; (80007bc <mode3DecProcess+0x2c>)
 800079c:	6013      	str	r3, [r2, #0]
	time_buffer = AUTO_YELLOW;
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <mode3DecProcess+0x2c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a07      	ldr	r2, [pc, #28]	; (80007c0 <mode3DecProcess+0x30>)
 80007a4:	6013      	str	r3, [r2, #0]
	AUTO_RED = AUTO_GREEN + AUTO_YELLOW;
 80007a6:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <mode3DecProcess+0x34>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	4b04      	ldr	r3, [pc, #16]	; (80007bc <mode3DecProcess+0x2c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4413      	add	r3, r2
 80007b0:	4a05      	ldr	r2, [pc, #20]	; (80007c8 <mode3DecProcess+0x38>)
 80007b2:	6013      	str	r3, [r2, #0]
	ensureInBoundary();
 80007b4:	f7ff ff56 	bl	8000664 <ensureInBoundary>
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200000e4 	.word	0x200000e4
 80007c0:	200000c8 	.word	0x200000c8
 80007c4:	200000e0 	.word	0x200000e0
 80007c8:	200000dc 	.word	0x200000dc

080007cc <fsm_run>:

void fsm_run(void){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	if (mode == MODE1){
 80007d0:	4b94      	ldr	r3, [pc, #592]	; (8000a24 <fsm_run+0x258>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b0d      	cmp	r3, #13
 80007d6:	f040 80d3 	bne.w	8000980 <fsm_run+0x1b4>
		switch (statusAUTO){
 80007da:	4b93      	ldr	r3, [pc, #588]	; (8000a28 <fsm_run+0x25c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b03      	cmp	r3, #3
 80007e0:	f200 80bc 	bhi.w	800095c <fsm_run+0x190>
 80007e4:	a201      	add	r2, pc, #4	; (adr r2, 80007ec <fsm_run+0x20>)
 80007e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ea:	bf00      	nop
 80007ec:	080007fd 	.word	0x080007fd
 80007f0:	0800080b 	.word	0x0800080b
 80007f4:	080008a1 	.word	0x080008a1
 80007f8:	08000903 	.word	0x08000903
			case INIT:
				statusAUTO = STATE_RED;
 80007fc:	4b8a      	ldr	r3, [pc, #552]	; (8000a28 <fsm_run+0x25c>)
 80007fe:	2201      	movs	r2, #1
 8000800:	601a      	str	r2, [r3, #0]
				setTimer2(1);
 8000802:	2001      	movs	r0, #1
 8000804:	f000 fd98 	bl	8001338 <setTimer2>
				break;
 8000808:	e0af      	b.n	800096a <fsm_run+0x19e>
			case STATE_RED:
				state_buffer[0] = STATE_RED;
 800080a:	4b88      	ldr	r3, [pc, #544]	; (8000a2c <fsm_run+0x260>)
 800080c:	2201      	movs	r2, #1
 800080e:	601a      	str	r2, [r3, #0]
				if (timer2_flag == 1){
 8000810:	4b87      	ldr	r3, [pc, #540]	; (8000a30 <fsm_run+0x264>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b01      	cmp	r3, #1
 8000816:	f040 80a3 	bne.w	8000960 <fsm_run+0x194>
					if (counterRed > AUTO_YELLOW){
 800081a:	4b86      	ldr	r3, [pc, #536]	; (8000a34 <fsm_run+0x268>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	4b86      	ldr	r3, [pc, #536]	; (8000a38 <fsm_run+0x26c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	429a      	cmp	r2, r3
 8000824:	dd16      	ble.n	8000854 <fsm_run+0x88>
						state_buffer[1] = STATE_GREEN;
 8000826:	4b81      	ldr	r3, [pc, #516]	; (8000a2c <fsm_run+0x260>)
 8000828:	2202      	movs	r2, #2
 800082a:	605a      	str	r2, [r3, #4]
						enableLedPannel(1);
 800082c:	2001      	movs	r0, #1
 800082e:	f000 fb13 	bl	8000e58 <enableLedPannel>
						HAL_GPIO_WritePin(BUZZER_GPIO_Port,BUZZER_Pin,RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2120      	movs	r1, #32
 8000836:	4881      	ldr	r0, [pc, #516]	; (8000a3c <fsm_run+0x270>)
 8000838:	f001 fd74 	bl	8002324 <HAL_GPIO_WritePin>
						num_buffer[0] = counterRed;
 800083c:	4b7d      	ldr	r3, [pc, #500]	; (8000a34 <fsm_run+0x268>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a7f      	ldr	r2, [pc, #508]	; (8000a40 <fsm_run+0x274>)
 8000842:	6013      	str	r3, [r2, #0]
						num_buffer[1] = counterRed - counterYellow;
 8000844:	4b7b      	ldr	r3, [pc, #492]	; (8000a34 <fsm_run+0x268>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	4b7e      	ldr	r3, [pc, #504]	; (8000a44 <fsm_run+0x278>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	4a7c      	ldr	r2, [pc, #496]	; (8000a40 <fsm_run+0x274>)
 8000850:	6053      	str	r3, [r2, #4]
 8000852:	e011      	b.n	8000878 <fsm_run+0xac>
					}
					else{
						state_buffer[1] = STATE_YELLOW;
 8000854:	4b75      	ldr	r3, [pc, #468]	; (8000a2c <fsm_run+0x260>)
 8000856:	2203      	movs	r2, #3
 8000858:	605a      	str	r2, [r3, #4]
						enableLedPannel(2);
 800085a:	2002      	movs	r0, #2
 800085c:	f000 fafc 	bl	8000e58 <enableLedPannel>
						HAL_GPIO_TogglePin(BUZZER_GPIO_Port,BUZZER_Pin);
 8000860:	2120      	movs	r1, #32
 8000862:	4876      	ldr	r0, [pc, #472]	; (8000a3c <fsm_run+0x270>)
 8000864:	f001 fd76 	bl	8002354 <HAL_GPIO_TogglePin>
						num_buffer[0] = counterRed;
 8000868:	4b72      	ldr	r3, [pc, #456]	; (8000a34 <fsm_run+0x268>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a74      	ldr	r2, [pc, #464]	; (8000a40 <fsm_run+0x274>)
 800086e:	6013      	str	r3, [r2, #0]
						num_buffer[1] = counterRed;
 8000870:	4b70      	ldr	r3, [pc, #448]	; (8000a34 <fsm_run+0x268>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a72      	ldr	r2, [pc, #456]	; (8000a40 <fsm_run+0x274>)
 8000876:	6053      	str	r3, [r2, #4]
					}
					counterRed--;
 8000878:	4b6e      	ldr	r3, [pc, #440]	; (8000a34 <fsm_run+0x268>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	3b01      	subs	r3, #1
 800087e:	4a6d      	ldr	r2, [pc, #436]	; (8000a34 <fsm_run+0x268>)
 8000880:	6013      	str	r3, [r2, #0]
					if (counterRed == INIT){
 8000882:	4b6c      	ldr	r3, [pc, #432]	; (8000a34 <fsm_run+0x268>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d106      	bne.n	8000898 <fsm_run+0xcc>
						counterRed = AUTO_RED;
 800088a:	4b6f      	ldr	r3, [pc, #444]	; (8000a48 <fsm_run+0x27c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a69      	ldr	r2, [pc, #420]	; (8000a34 <fsm_run+0x268>)
 8000890:	6013      	str	r3, [r2, #0]
						statusAUTO = STATE_GREEN;
 8000892:	4b65      	ldr	r3, [pc, #404]	; (8000a28 <fsm_run+0x25c>)
 8000894:	2202      	movs	r2, #2
 8000896:	601a      	str	r2, [r3, #0]
					}
					setTimer2(100);
 8000898:	2064      	movs	r0, #100	; 0x64
 800089a:	f000 fd4d 	bl	8001338 <setTimer2>
				}
				break;
 800089e:	e05f      	b.n	8000960 <fsm_run+0x194>
			case STATE_GREEN:
				state_buffer[0] = STATE_GREEN;
 80008a0:	4b62      	ldr	r3, [pc, #392]	; (8000a2c <fsm_run+0x260>)
 80008a2:	2202      	movs	r2, #2
 80008a4:	601a      	str	r2, [r3, #0]
				state_buffer[1] = STATE_RED;
 80008a6:	4b61      	ldr	r3, [pc, #388]	; (8000a2c <fsm_run+0x260>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	605a      	str	r2, [r3, #4]
				if (timer2_flag == 1){
 80008ac:	4b60      	ldr	r3, [pc, #384]	; (8000a30 <fsm_run+0x264>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d157      	bne.n	8000964 <fsm_run+0x198>
					enableLedPannel(3);
 80008b4:	2003      	movs	r0, #3
 80008b6:	f000 facf 	bl	8000e58 <enableLedPannel>
					HAL_GPIO_WritePin(BUZZER_GPIO_Port,BUZZER_Pin,RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2120      	movs	r1, #32
 80008be:	485f      	ldr	r0, [pc, #380]	; (8000a3c <fsm_run+0x270>)
 80008c0:	f001 fd30 	bl	8002324 <HAL_GPIO_WritePin>
					num_buffer[0] = counterGreen;
 80008c4:	4b61      	ldr	r3, [pc, #388]	; (8000a4c <fsm_run+0x280>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a5d      	ldr	r2, [pc, #372]	; (8000a40 <fsm_run+0x274>)
 80008ca:	6013      	str	r3, [r2, #0]
					num_buffer[1] = counterGreen + counterYellow;
 80008cc:	4b5f      	ldr	r3, [pc, #380]	; (8000a4c <fsm_run+0x280>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b5c      	ldr	r3, [pc, #368]	; (8000a44 <fsm_run+0x278>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4413      	add	r3, r2
 80008d6:	4a5a      	ldr	r2, [pc, #360]	; (8000a40 <fsm_run+0x274>)
 80008d8:	6053      	str	r3, [r2, #4]
					counterGreen--;
 80008da:	4b5c      	ldr	r3, [pc, #368]	; (8000a4c <fsm_run+0x280>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	3b01      	subs	r3, #1
 80008e0:	4a5a      	ldr	r2, [pc, #360]	; (8000a4c <fsm_run+0x280>)
 80008e2:	6013      	str	r3, [r2, #0]
					if (counterGreen == INIT){
 80008e4:	4b59      	ldr	r3, [pc, #356]	; (8000a4c <fsm_run+0x280>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d106      	bne.n	80008fa <fsm_run+0x12e>
						counterGreen = AUTO_GREEN;
 80008ec:	4b58      	ldr	r3, [pc, #352]	; (8000a50 <fsm_run+0x284>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a56      	ldr	r2, [pc, #344]	; (8000a4c <fsm_run+0x280>)
 80008f2:	6013      	str	r3, [r2, #0]
						statusAUTO = STATE_YELLOW;
 80008f4:	4b4c      	ldr	r3, [pc, #304]	; (8000a28 <fsm_run+0x25c>)
 80008f6:	2203      	movs	r2, #3
 80008f8:	601a      	str	r2, [r3, #0]
					}
					setTimer2(100);
 80008fa:	2064      	movs	r0, #100	; 0x64
 80008fc:	f000 fd1c 	bl	8001338 <setTimer2>
				}
				break;
 8000900:	e030      	b.n	8000964 <fsm_run+0x198>
			case STATE_YELLOW:
				state_buffer[0] = STATE_YELLOW;
 8000902:	4b4a      	ldr	r3, [pc, #296]	; (8000a2c <fsm_run+0x260>)
 8000904:	2203      	movs	r2, #3
 8000906:	601a      	str	r2, [r3, #0]
				state_buffer[1] = STATE_RED;
 8000908:	4b48      	ldr	r3, [pc, #288]	; (8000a2c <fsm_run+0x260>)
 800090a:	2201      	movs	r2, #1
 800090c:	605a      	str	r2, [r3, #4]
				if (timer2_flag == 1){
 800090e:	4b48      	ldr	r3, [pc, #288]	; (8000a30 <fsm_run+0x264>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d128      	bne.n	8000968 <fsm_run+0x19c>
					enableLedPannel(4);
 8000916:	2004      	movs	r0, #4
 8000918:	f000 fa9e 	bl	8000e58 <enableLedPannel>
					HAL_GPIO_TogglePin(BUZZER_GPIO_Port,BUZZER_Pin);
 800091c:	2120      	movs	r1, #32
 800091e:	4847      	ldr	r0, [pc, #284]	; (8000a3c <fsm_run+0x270>)
 8000920:	f001 fd18 	bl	8002354 <HAL_GPIO_TogglePin>
					num_buffer[0] = counterYellow;
 8000924:	4b47      	ldr	r3, [pc, #284]	; (8000a44 <fsm_run+0x278>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a45      	ldr	r2, [pc, #276]	; (8000a40 <fsm_run+0x274>)
 800092a:	6013      	str	r3, [r2, #0]
					num_buffer[1] = counterYellow;
 800092c:	4b45      	ldr	r3, [pc, #276]	; (8000a44 <fsm_run+0x278>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a43      	ldr	r2, [pc, #268]	; (8000a40 <fsm_run+0x274>)
 8000932:	6053      	str	r3, [r2, #4]
					counterYellow--;
 8000934:	4b43      	ldr	r3, [pc, #268]	; (8000a44 <fsm_run+0x278>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	3b01      	subs	r3, #1
 800093a:	4a42      	ldr	r2, [pc, #264]	; (8000a44 <fsm_run+0x278>)
 800093c:	6013      	str	r3, [r2, #0]
					if (counterYellow == INIT){
 800093e:	4b41      	ldr	r3, [pc, #260]	; (8000a44 <fsm_run+0x278>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d106      	bne.n	8000954 <fsm_run+0x188>
						counterYellow = AUTO_YELLOW;
 8000946:	4b3c      	ldr	r3, [pc, #240]	; (8000a38 <fsm_run+0x26c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a3e      	ldr	r2, [pc, #248]	; (8000a44 <fsm_run+0x278>)
 800094c:	6013      	str	r3, [r2, #0]
						statusAUTO = STATE_RED;
 800094e:	4b36      	ldr	r3, [pc, #216]	; (8000a28 <fsm_run+0x25c>)
 8000950:	2201      	movs	r2, #1
 8000952:	601a      	str	r2, [r3, #0]
					}
					setTimer2(100);
 8000954:	2064      	movs	r0, #100	; 0x64
 8000956:	f000 fcef 	bl	8001338 <setTimer2>
				}
				break;
 800095a:	e005      	b.n	8000968 <fsm_run+0x19c>
			default:
				break;
 800095c:	bf00      	nop
 800095e:	e004      	b.n	800096a <fsm_run+0x19e>
				break;
 8000960:	bf00      	nop
 8000962:	e002      	b.n	800096a <fsm_run+0x19e>
				break;
 8000964:	bf00      	nop
 8000966:	e000      	b.n	800096a <fsm_run+0x19e>
				break;
 8000968:	bf00      	nop
		}
		displayNum(num_buffer[0], num_buffer[1], state_buffer[0], state_buffer[1]);
 800096a:	4b35      	ldr	r3, [pc, #212]	; (8000a40 <fsm_run+0x274>)
 800096c:	6818      	ldr	r0, [r3, #0]
 800096e:	4b34      	ldr	r3, [pc, #208]	; (8000a40 <fsm_run+0x274>)
 8000970:	6859      	ldr	r1, [r3, #4]
 8000972:	4b2e      	ldr	r3, [pc, #184]	; (8000a2c <fsm_run+0x260>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	4b2d      	ldr	r3, [pc, #180]	; (8000a2c <fsm_run+0x260>)
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	f7ff fdcd 	bl	8000518 <displayNum>
 800097e:	e0c9      	b.n	8000b14 <fsm_run+0x348>
	}

	else if (mode == MODE2){
 8000980:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <fsm_run+0x258>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b0e      	cmp	r3, #14
 8000986:	d16d      	bne.n	8000a64 <fsm_run+0x298>
		HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8000988:	2104      	movs	r1, #4
 800098a:	482c      	ldr	r0, [pc, #176]	; (8000a3c <fsm_run+0x270>)
 800098c:	f001 fce2 	bl	8002354 <HAL_GPIO_TogglePin>
		mode_buffer = MODE2;
 8000990:	4b30      	ldr	r3, [pc, #192]	; (8000a54 <fsm_run+0x288>)
 8000992:	220e      	movs	r2, #14
 8000994:	601a      	str	r2, [r3, #0]
		time_buffer = AUTO_GREEN;
 8000996:	4b2e      	ldr	r3, [pc, #184]	; (8000a50 <fsm_run+0x284>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a2f      	ldr	r2, [pc, #188]	; (8000a58 <fsm_run+0x28c>)
 800099c:	6013      	str	r3, [r2, #0]
		enableLedPannel(5);
 800099e:	2005      	movs	r0, #5
 80009a0:	f000 fa5a 	bl	8000e58 <enableLedPannel>
		switch (statusMODE2){
 80009a4:	4b2d      	ldr	r3, [pc, #180]	; (8000a5c <fsm_run+0x290>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b08      	cmp	r3, #8
 80009aa:	d830      	bhi.n	8000a0e <fsm_run+0x242>
 80009ac:	a201      	add	r2, pc, #4	; (adr r2, 80009b4 <fsm_run+0x1e8>)
 80009ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b2:	bf00      	nop
 80009b4:	080009d9 	.word	0x080009d9
 80009b8:	08000a0f 	.word	0x08000a0f
 80009bc:	08000a0f 	.word	0x08000a0f
 80009c0:	08000a0f 	.word	0x08000a0f
 80009c4:	08000a0f 	.word	0x08000a0f
 80009c8:	08000a0f 	.word	0x08000a0f
 80009cc:	080009df 	.word	0x080009df
 80009d0:	080009f1 	.word	0x080009f1
 80009d4:	08000a03 	.word	0x08000a03
			case INIT:
				ensureInBoundary();
 80009d8:	f7ff fe44 	bl	8000664 <ensureInBoundary>
				break;
 80009dc:	e018      	b.n	8000a10 <fsm_run+0x244>
			case INCREASE:
				mode2IncProcess();
 80009de:	f7ff fe7d 	bl	80006dc <mode2IncProcess>
				statusMODE2=INIT;
 80009e2:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <fsm_run+0x290>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
				cmd_flag = UNDEF;
 80009e8:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <fsm_run+0x294>)
 80009ea:	220e      	movs	r2, #14
 80009ec:	701a      	strb	r2, [r3, #0]
				break;
 80009ee:	e00f      	b.n	8000a10 <fsm_run+0x244>
			case DECREASE:
				mode2DecProcess();
 80009f0:	f7ff fe92 	bl	8000718 <mode2DecProcess>
				statusMODE2=INIT;
 80009f4:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <fsm_run+0x290>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
				cmd_flag = UNDEF;
 80009fa:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <fsm_run+0x294>)
 80009fc:	220e      	movs	r2, #14
 80009fe:	701a      	strb	r2, [r3, #0]
				break;
 8000a00:	e006      	b.n	8000a10 <fsm_run+0x244>
			case SAVE:
				mode = MODE1;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <fsm_run+0x258>)
 8000a04:	220d      	movs	r2, #13
 8000a06:	601a      	str	r2, [r3, #0]
				//Auto_GREEN -> EPROM
				initVar();
 8000a08:	f000 f8ae 	bl	8000b68 <initVar>
				break;
 8000a0c:	e000      	b.n	8000a10 <fsm_run+0x244>
			default:
				break;
 8000a0e:	bf00      	nop
		}
		displayInMode(mode_buffer, time_buffer);
 8000a10:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <fsm_run+0x288>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a10      	ldr	r2, [pc, #64]	; (8000a58 <fsm_run+0x28c>)
 8000a16:	6812      	ldr	r2, [r2, #0]
 8000a18:	4611      	mov	r1, r2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fde6 	bl	80005ec <displayInMode>
 8000a20:	e078      	b.n	8000b14 <fsm_run+0x348>
 8000a22:	bf00      	nop
 8000a24:	200000cc 	.word	0x200000cc
 8000a28:	200000d0 	.word	0x200000d0
 8000a2c:	200000bc 	.word	0x200000bc
 8000a30:	20000238 	.word	0x20000238
 8000a34:	200000e8 	.word	0x200000e8
 8000a38:	200000e4 	.word	0x200000e4
 8000a3c:	40010c00 	.word	0x40010c00
 8000a40:	200000b4 	.word	0x200000b4
 8000a44:	200000f0 	.word	0x200000f0
 8000a48:	200000dc 	.word	0x200000dc
 8000a4c:	200000ec 	.word	0x200000ec
 8000a50:	200000e0 	.word	0x200000e0
 8000a54:	200000c4 	.word	0x200000c4
 8000a58:	200000c8 	.word	0x200000c8
 8000a5c:	200000d4 	.word	0x200000d4
 8000a60:	2000001d 	.word	0x2000001d
	}

	else if (mode == MODE3){
 8000a64:	4b2c      	ldr	r3, [pc, #176]	; (8000b18 <fsm_run+0x34c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b0f      	cmp	r3, #15
 8000a6a:	d152      	bne.n	8000b12 <fsm_run+0x346>
		HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8000a6c:	2104      	movs	r1, #4
 8000a6e:	482b      	ldr	r0, [pc, #172]	; (8000b1c <fsm_run+0x350>)
 8000a70:	f001 fc70 	bl	8002354 <HAL_GPIO_TogglePin>
		mode_buffer = MODE3;
 8000a74:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <fsm_run+0x354>)
 8000a76:	220f      	movs	r2, #15
 8000a78:	601a      	str	r2, [r3, #0]
		time_buffer = AUTO_YELLOW;
 8000a7a:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <fsm_run+0x358>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a2a      	ldr	r2, [pc, #168]	; (8000b28 <fsm_run+0x35c>)
 8000a80:	6013      	str	r3, [r2, #0]
		enableLedPannel(6);
 8000a82:	2006      	movs	r0, #6
 8000a84:	f000 f9e8 	bl	8000e58 <enableLedPannel>
		switch (statusMODE3){
 8000a88:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <fsm_run+0x360>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b08      	cmp	r3, #8
 8000a8e:	d836      	bhi.n	8000afe <fsm_run+0x332>
 8000a90:	a201      	add	r2, pc, #4	; (adr r2, 8000a98 <fsm_run+0x2cc>)
 8000a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a96:	bf00      	nop
 8000a98:	08000abd 	.word	0x08000abd
 8000a9c:	08000aff 	.word	0x08000aff
 8000aa0:	08000aff 	.word	0x08000aff
 8000aa4:	08000aff 	.word	0x08000aff
 8000aa8:	08000aff 	.word	0x08000aff
 8000aac:	08000aff 	.word	0x08000aff
 8000ab0:	08000ac3 	.word	0x08000ac3
 8000ab4:	08000adb 	.word	0x08000adb
 8000ab8:	08000af3 	.word	0x08000af3
			case INIT:
				ensureInBoundary();
 8000abc:	f7ff fdd2 	bl	8000664 <ensureInBoundary>
				break;
 8000ac0:	e01e      	b.n	8000b00 <fsm_run+0x334>
			case INCREASE:
				mode3IncProcess();
 8000ac2:	f7ff fe47 	bl	8000754 <mode3IncProcess>
				statusMODE3=INIT;
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <fsm_run+0x360>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
				cmd_flag = MODE3;
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <fsm_run+0x364>)
 8000ace:	220f      	movs	r2, #15
 8000ad0:	701a      	strb	r2, [r3, #0]
				mode = MODE3;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <fsm_run+0x34c>)
 8000ad4:	220f      	movs	r2, #15
 8000ad6:	601a      	str	r2, [r3, #0]
				break;
 8000ad8:	e012      	b.n	8000b00 <fsm_run+0x334>
			case DECREASE:
				mode3DecProcess();
 8000ada:	f7ff fe59 	bl	8000790 <mode3DecProcess>
				statusMODE3=INIT;
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <fsm_run+0x360>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
				cmd_flag = MODE3;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <fsm_run+0x364>)
 8000ae6:	220f      	movs	r2, #15
 8000ae8:	701a      	strb	r2, [r3, #0]
				mode = MODE3;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <fsm_run+0x34c>)
 8000aec:	220f      	movs	r2, #15
 8000aee:	601a      	str	r2, [r3, #0]
				break;
 8000af0:	e006      	b.n	8000b00 <fsm_run+0x334>
			case SAVE:
				mode = MODE1;
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <fsm_run+0x34c>)
 8000af4:	220d      	movs	r2, #13
 8000af6:	601a      	str	r2, [r3, #0]
				initVar();
 8000af8:	f000 f836 	bl	8000b68 <initVar>
				break;
 8000afc:	e000      	b.n	8000b00 <fsm_run+0x334>
			default:
				break;
 8000afe:	bf00      	nop
		}
		displayInMode(mode_buffer, time_buffer);
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <fsm_run+0x354>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <fsm_run+0x35c>)
 8000b06:	6812      	ldr	r2, [r2, #0]
 8000b08:	4611      	mov	r1, r2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fd6e 	bl	80005ec <displayInMode>
 8000b10:	e000      	b.n	8000b14 <fsm_run+0x348>
	}

	else return;
 8000b12:	bf00      	nop
}
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200000cc 	.word	0x200000cc
 8000b1c:	40010c00 	.word	0x40010c00
 8000b20:	200000c4 	.word	0x200000c4
 8000b24:	200000e4 	.word	0x200000e4
 8000b28:	200000c8 	.word	0x200000c8
 8000b2c:	200000d8 	.word	0x200000d8
 8000b30:	2000001d 	.word	0x2000001d

08000b34 <initWaitingTime>:

int counterRed = 0;
int counterGreen = 0;
int counterYellow = 0;

void initWaitingTime(void){
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
	AUTO_GREEN = 18;
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <initWaitingTime+0x28>)
 8000b3a:	2212      	movs	r2, #18
 8000b3c:	601a      	str	r2, [r3, #0]
	AUTO_YELLOW = 7;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <initWaitingTime+0x2c>)
 8000b40:	2207      	movs	r2, #7
 8000b42:	601a      	str	r2, [r3, #0]
	AUTO_RED = AUTO_GREEN + AUTO_YELLOW;
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <initWaitingTime+0x28>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <initWaitingTime+0x2c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4a05      	ldr	r2, [pc, #20]	; (8000b64 <initWaitingTime+0x30>)
 8000b50:	6013      	str	r3, [r2, #0]
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	200000e0 	.word	0x200000e0
 8000b60:	200000e4 	.word	0x200000e4
 8000b64:	200000dc 	.word	0x200000dc

08000b68 <initVar>:

void initVar(void){
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
	mode = MODE1;
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <initVar+0x3c>)
 8000b6e:	220d      	movs	r2, #13
 8000b70:	601a      	str	r2, [r3, #0]

	statusAUTO = INIT;
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <initVar+0x40>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]

	statusMODE2 = INIT;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <initVar+0x44>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]

	statusMODE3 = INIT;
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <initVar+0x48>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]

	counterRed = AUTO_RED;
 8000b84:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <initVar+0x4c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <initVar+0x50>)
 8000b8a:	6013      	str	r3, [r2, #0]
	counterGreen = AUTO_GREEN;
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <initVar+0x54>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <initVar+0x58>)
 8000b92:	6013      	str	r3, [r2, #0]
	counterYellow = AUTO_YELLOW;
 8000b94:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <initVar+0x5c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0b      	ldr	r2, [pc, #44]	; (8000bc8 <initVar+0x60>)
 8000b9a:	6013      	str	r3, [r2, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	200000cc 	.word	0x200000cc
 8000ba8:	200000d0 	.word	0x200000d0
 8000bac:	200000d4 	.word	0x200000d4
 8000bb0:	200000d8 	.word	0x200000d8
 8000bb4:	200000dc 	.word	0x200000dc
 8000bb8:	200000e8 	.word	0x200000e8
 8000bbc:	200000e0 	.word	0x200000e0
 8000bc0:	200000ec 	.word	0x200000ec
 8000bc4:	200000e4 	.word	0x200000e4
 8000bc8:	200000f0 	.word	0x200000f0

08000bcc <latchEnable>:
 *      Author: Admin
 */

#include "led_pannel.h"

void latchEnable (void){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_LE_GPIO_Port, LED_LE_Pin, RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2110      	movs	r1, #16
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <latchEnable+0x14>)
 8000bd6:	f001 fba5 	bl	8002324 <HAL_GPIO_WritePin>
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40011000 	.word	0x40011000

08000be4 <latchDisable>:

void latchDisable (void){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_LE_GPIO_Port, LED_LE_Pin, SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	2110      	movs	r1, #16
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <latchDisable+0x14>)
 8000bee:	f001 fb99 	bl	8002324 <HAL_GPIO_WritePin>
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40011000 	.word	0x40011000

08000bfc <outputEnable>:

void outputEnable (void){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_OE_GPIO_Port, LED_OE_Pin, SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	2120      	movs	r1, #32
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <outputEnable+0x14>)
 8000c06:	f001 fb8d 	bl	8002324 <HAL_GPIO_WritePin>
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40011000 	.word	0x40011000

08000c14 <clockON>:

void outputDisable (void){
	HAL_GPIO_WritePin(LED_OE_GPIO_Port, LED_OE_Pin, RESET);
}

void clockON (void){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_SCK_GPIO_Port, LED_SCK_Pin, RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2108      	movs	r1, #8
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <clockON+0x14>)
 8000c1e:	f001 fb81 	bl	8002324 <HAL_GPIO_WritePin>
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40011000 	.word	0x40011000

08000c2c <clockOFF>:

void clockOFF (void){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_SCK_GPIO_Port, LED_SCK_Pin, SET);
 8000c30:	2201      	movs	r2, #1
 8000c32:	2108      	movs	r1, #8
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <clockOFF+0x14>)
 8000c36:	f001 fb75 	bl	8002324 <HAL_GPIO_WritePin>
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40011000 	.word	0x40011000

08000c44 <dataOUT>:

void dataOUT (GPIO_PinState state){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_SDI_GPIO_Port, LED_SDI_Pin, state);
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	461a      	mov	r2, r3
 8000c52:	2140      	movs	r1, #64	; 0x40
 8000c54:	4803      	ldr	r0, [pc, #12]	; (8000c64 <dataOUT+0x20>)
 8000c56:	f001 fb65 	bl	8002324 <HAL_GPIO_WritePin>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40011000 	.word	0x40011000

08000c68 <getBitValue>:

uint8_t getBitValue (uint32_t data, uint32_t index){
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
	data = (data >> index) & 0x01;
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	fa22 f303 	lsr.w	r3, r2, r3
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	607b      	str	r3, [r7, #4]
	return data;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	b2db      	uxtb	r3, r3
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
	...

08000c90 <ledDisplay1>:


uint32_t data[6] = {0x40800, 0x40300, 0x21000, 0x0D000, 0x20800, 0x0C300};

void ledDisplay1 (void){	//red1 + green2
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
	uint8_t i;
	uint32_t temp1 = data[0];
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <ledDisplay1+0x48>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	603b      	str	r3, [r7, #0]
	latchDisable();
 8000c9c:	f7ff ffa2 	bl	8000be4 <latchDisable>
	for(i = 0; i < 20; i++){
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	71fb      	strb	r3, [r7, #7]
 8000ca4:	e00f      	b.n	8000cc6 <ledDisplay1+0x36>
		clockOFF();
 8000ca6:	f7ff ffc1 	bl	8000c2c <clockOFF>
		dataOUT(getBitValue(temp1, i));
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	4619      	mov	r1, r3
 8000cae:	6838      	ldr	r0, [r7, #0]
 8000cb0:	f7ff ffda 	bl	8000c68 <getBitValue>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ffc4 	bl	8000c44 <dataOUT>
		clockON();
 8000cbc:	f7ff ffaa 	bl	8000c14 <clockON>
	for(i = 0; i < 20; i++){
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	71fb      	strb	r3, [r7, #7]
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2b13      	cmp	r3, #19
 8000cca:	d9ec      	bls.n	8000ca6 <ledDisplay1+0x16>
	}
	latchEnable();
 8000ccc:	f7ff ff7e 	bl	8000bcc <latchEnable>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000000 	.word	0x20000000

08000cdc <ledDisplay2>:

void ledDisplay2 (void){	//red1 + yellow2
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
	uint8_t i;
	uint32_t temp1 = data[1];
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <ledDisplay2+0x48>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	603b      	str	r3, [r7, #0]
	latchDisable();
 8000ce8:	f7ff ff7c 	bl	8000be4 <latchDisable>
	for(i = 0; i < 20; i++){
 8000cec:	2300      	movs	r3, #0
 8000cee:	71fb      	strb	r3, [r7, #7]
 8000cf0:	e00f      	b.n	8000d12 <ledDisplay2+0x36>
		clockOFF();
 8000cf2:	f7ff ff9b 	bl	8000c2c <clockOFF>
		dataOUT(getBitValue(temp1, i));
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	6838      	ldr	r0, [r7, #0]
 8000cfc:	f7ff ffb4 	bl	8000c68 <getBitValue>
 8000d00:	4603      	mov	r3, r0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff9e 	bl	8000c44 <dataOUT>
		clockON();
 8000d08:	f7ff ff84 	bl	8000c14 <clockON>
	for(i = 0; i < 20; i++){
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	71fb      	strb	r3, [r7, #7]
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	2b13      	cmp	r3, #19
 8000d16:	d9ec      	bls.n	8000cf2 <ledDisplay2+0x16>
	}
	latchEnable();
 8000d18:	f7ff ff58 	bl	8000bcc <latchEnable>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000000 	.word	0x20000000

08000d28 <ledDisplay3>:

void ledDisplay3 (void){	//Green1 + Red2
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint32_t temp1 = data[2];
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <ledDisplay3+0x48>)
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	603b      	str	r3, [r7, #0]
	latchDisable();
 8000d34:	f7ff ff56 	bl	8000be4 <latchDisable>
	for(i = 0; i < 20; i++){
 8000d38:	2300      	movs	r3, #0
 8000d3a:	71fb      	strb	r3, [r7, #7]
 8000d3c:	e00f      	b.n	8000d5e <ledDisplay3+0x36>
		clockOFF();
 8000d3e:	f7ff ff75 	bl	8000c2c <clockOFF>
		dataOUT(getBitValue(temp1, i));
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	4619      	mov	r1, r3
 8000d46:	6838      	ldr	r0, [r7, #0]
 8000d48:	f7ff ff8e 	bl	8000c68 <getBitValue>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff78 	bl	8000c44 <dataOUT>
		clockON();
 8000d54:	f7ff ff5e 	bl	8000c14 <clockON>
	for(i = 0; i < 20; i++){
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	71fb      	strb	r3, [r7, #7]
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	2b13      	cmp	r3, #19
 8000d62:	d9ec      	bls.n	8000d3e <ledDisplay3+0x16>
	}
	latchEnable();
 8000d64:	f7ff ff32 	bl	8000bcc <latchEnable>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000000 	.word	0x20000000

08000d74 <ledDisplay4>:

void ledDisplay4 (void){	//Yellow1 + Red2
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
	uint8_t i;
	uint32_t temp1 = data[3];
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <ledDisplay4+0x48>)
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	603b      	str	r3, [r7, #0]
	latchDisable();
 8000d80:	f7ff ff30 	bl	8000be4 <latchDisable>
	for(i = 0; i < 20; i++){
 8000d84:	2300      	movs	r3, #0
 8000d86:	71fb      	strb	r3, [r7, #7]
 8000d88:	e00f      	b.n	8000daa <ledDisplay4+0x36>
		clockOFF();
 8000d8a:	f7ff ff4f 	bl	8000c2c <clockOFF>
		dataOUT(getBitValue(temp1, i));
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	4619      	mov	r1, r3
 8000d92:	6838      	ldr	r0, [r7, #0]
 8000d94:	f7ff ff68 	bl	8000c68 <getBitValue>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff52 	bl	8000c44 <dataOUT>
		clockON();
 8000da0:	f7ff ff38 	bl	8000c14 <clockON>
	for(i = 0; i < 20; i++){
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	3301      	adds	r3, #1
 8000da8:	71fb      	strb	r3, [r7, #7]
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	2b13      	cmp	r3, #19
 8000dae:	d9ec      	bls.n	8000d8a <ledDisplay4+0x16>
	}
	latchEnable();
 8000db0:	f7ff ff0c 	bl	8000bcc <latchEnable>
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000000 	.word	0x20000000

08000dc0 <ledDisplay5>:

void ledDisplay5 (void){	//Green1 + green2
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
	uint8_t i;
	uint32_t temp1 = data[4];
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <ledDisplay5+0x48>)
 8000dc8:	691b      	ldr	r3, [r3, #16]
 8000dca:	603b      	str	r3, [r7, #0]
	latchDisable();
 8000dcc:	f7ff ff0a 	bl	8000be4 <latchDisable>
	for(i = 0; i < 20; i++){
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	71fb      	strb	r3, [r7, #7]
 8000dd4:	e00f      	b.n	8000df6 <ledDisplay5+0x36>
		clockOFF();
 8000dd6:	f7ff ff29 	bl	8000c2c <clockOFF>
		dataOUT(getBitValue(temp1, i));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	6838      	ldr	r0, [r7, #0]
 8000de0:	f7ff ff42 	bl	8000c68 <getBitValue>
 8000de4:	4603      	mov	r3, r0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff ff2c 	bl	8000c44 <dataOUT>
		clockON();
 8000dec:	f7ff ff12 	bl	8000c14 <clockON>
	for(i = 0; i < 20; i++){
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	3301      	adds	r3, #1
 8000df4:	71fb      	strb	r3, [r7, #7]
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2b13      	cmp	r3, #19
 8000dfa:	d9ec      	bls.n	8000dd6 <ledDisplay5+0x16>
	}
	latchEnable();
 8000dfc:	f7ff fee6 	bl	8000bcc <latchEnable>
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000000 	.word	0x20000000

08000e0c <ledDisplay6>:

void ledDisplay6 (void){	//Yellow1 + yellow2
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
	uint8_t i;
	uint32_t temp1 = data[5];
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <ledDisplay6+0x48>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	603b      	str	r3, [r7, #0]
	latchDisable();
 8000e18:	f7ff fee4 	bl	8000be4 <latchDisable>
	for(i = 0; i < 20; i++){
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	71fb      	strb	r3, [r7, #7]
 8000e20:	e00f      	b.n	8000e42 <ledDisplay6+0x36>
		clockOFF();
 8000e22:	f7ff ff03 	bl	8000c2c <clockOFF>
		dataOUT(getBitValue(temp1, i));
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	6838      	ldr	r0, [r7, #0]
 8000e2c:	f7ff ff1c 	bl	8000c68 <getBitValue>
 8000e30:	4603      	mov	r3, r0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ff06 	bl	8000c44 <dataOUT>
		clockON();
 8000e38:	f7ff feec 	bl	8000c14 <clockON>
	for(i = 0; i < 20; i++){
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	71fb      	strb	r3, [r7, #7]
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b13      	cmp	r3, #19
 8000e46:	d9ec      	bls.n	8000e22 <ledDisplay6+0x16>
	}
	latchEnable();
 8000e48:	f7ff fec0 	bl	8000bcc <latchEnable>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000000 	.word	0x20000000

08000e58 <enableLedPannel>:

void enableLedPannel (int index){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	switch (index){
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	2b05      	cmp	r3, #5
 8000e66:	d821      	bhi.n	8000eac <enableLedPannel+0x54>
 8000e68:	a201      	add	r2, pc, #4	; (adr r2, 8000e70 <enableLedPannel+0x18>)
 8000e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6e:	bf00      	nop
 8000e70:	08000e89 	.word	0x08000e89
 8000e74:	08000e8f 	.word	0x08000e8f
 8000e78:	08000e95 	.word	0x08000e95
 8000e7c:	08000e9b 	.word	0x08000e9b
 8000e80:	08000ea1 	.word	0x08000ea1
 8000e84:	08000ea7 	.word	0x08000ea7
		case 1:
			ledDisplay1();
 8000e88:	f7ff ff02 	bl	8000c90 <ledDisplay1>
			break;
 8000e8c:	e00f      	b.n	8000eae <enableLedPannel+0x56>
		case 2:
			ledDisplay2();
 8000e8e:	f7ff ff25 	bl	8000cdc <ledDisplay2>
			break;
 8000e92:	e00c      	b.n	8000eae <enableLedPannel+0x56>
		case 3:
			ledDisplay3();
 8000e94:	f7ff ff48 	bl	8000d28 <ledDisplay3>
			break;
 8000e98:	e009      	b.n	8000eae <enableLedPannel+0x56>
		case 4:
			ledDisplay4();
 8000e9a:	f7ff ff6b 	bl	8000d74 <ledDisplay4>
			break;
 8000e9e:	e006      	b.n	8000eae <enableLedPannel+0x56>
		case 5:
			ledDisplay5();
 8000ea0:	f7ff ff8e 	bl	8000dc0 <ledDisplay5>
			break;
 8000ea4:	e003      	b.n	8000eae <enableLedPannel+0x56>
		case 6:
			ledDisplay6();
 8000ea6:	f7ff ffb1 	bl	8000e0c <ledDisplay6>
			break;
 8000eaa:	e000      	b.n	8000eae <enableLedPannel+0x56>
		default:
			break;
 8000eac:	bf00      	nop
	}
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop

08000eb8 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3){
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <HAL_UART_RxCpltCallback+0x60>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d122      	bne.n	8000f10 <HAL_UART_RxCpltCallback+0x58>
		HAL_UART_Transmit(&huart3, &buffer_byte, 1, 500);
 8000eca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4912      	ldr	r1, [pc, #72]	; (8000f1c <HAL_UART_RxCpltCallback+0x64>)
 8000ed2:	4813      	ldr	r0, [pc, #76]	; (8000f20 <HAL_UART_RxCpltCallback+0x68>)
 8000ed4:	f002 ff87 	bl	8003de6 <HAL_UART_Transmit>
		buffer[index_buffer] = buffer_byte;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_UART_RxCpltCallback+0x6c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <HAL_UART_RxCpltCallback+0x64>)
 8000ee0:	7819      	ldrb	r1, [r3, #0]
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_UART_RxCpltCallback+0x70>)
 8000ee4:	5499      	strb	r1, [r3, r2]
		index_buffer++;
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_UART_RxCpltCallback+0x6c>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <HAL_UART_RxCpltCallback+0x6c>)
 8000ef0:	701a      	strb	r2, [r3, #0]
		if (index_buffer == MAX_BUFFER_SIZE) index_buffer = 0;
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <HAL_UART_RxCpltCallback+0x6c>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b32      	cmp	r3, #50	; 0x32
 8000ef8:	d102      	bne.n	8000f00 <HAL_UART_RxCpltCallback+0x48>
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <HAL_UART_RxCpltCallback+0x6c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_UART_RxCpltCallback+0x74>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, &buffer_byte, 1);
 8000f06:	2201      	movs	r2, #1
 8000f08:	4904      	ldr	r1, [pc, #16]	; (8000f1c <HAL_UART_RxCpltCallback+0x64>)
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <HAL_UART_RxCpltCallback+0x68>)
 8000f0c:	f002 fffd 	bl	8003f0a <HAL_UART_Receive_IT>
	}
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40004800 	.word	0x40004800
 8000f1c:	20000280 	.word	0x20000280
 8000f20:	200001e8 	.word	0x200001e8
 8000f24:	200002b6 	.word	0x200002b6
 8000f28:	20000284 	.word	0x20000284
 8000f2c:	200002b7 	.word	0x200002b7

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f34:	f000 fe2e 	bl	8001b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f38:	f000 f844 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3c:	f000 f958 	bl	80011f0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f40:	f000 f8e0 	bl	8001104 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000f44:	f000 f87a 	bl	800103c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000f48:	f000 f928 	bl	800119c <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8000f4c:	f000 f8a4 	bl	8001098 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f50:	4816      	ldr	r0, [pc, #88]	; (8000fac <main+0x7c>)
 8000f52:	f002 fb51 	bl	80035f8 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart3, &buffer_byte, 1);
 8000f56:	2201      	movs	r2, #1
 8000f58:	4915      	ldr	r1, [pc, #84]	; (8000fb0 <main+0x80>)
 8000f5a:	4816      	ldr	r0, [pc, #88]	; (8000fb4 <main+0x84>)
 8000f5c:	f002 ffd5 	bl	8003f0a <HAL_UART_Receive_IT>

  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2104      	movs	r1, #4
 8000f64:	4814      	ldr	r0, [pc, #80]	; (8000fb8 <main+0x88>)
 8000f66:	f001 f9dd 	bl	8002324 <HAL_GPIO_WritePin>
  outputEnable();
 8000f6a:	f7ff fe47 	bl	8000bfc <outputEnable>

  Lcd_Initialization();
 8000f6e:	f7ff fa99 	bl	80004a4 <Lcd_Initialization>


  initWaitingTime();
 8000f72:	f7ff fddf 	bl	8000b34 <initWaitingTime>
  initVar();
 8000f76:	f7ff fdf7 	bl	8000b68 <initVar>
  setTimer1(1);
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f000 f9c8 	bl	8001310 <setTimer1>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	if (timer1_flag == 1){
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <main+0x8c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d102      	bne.n	8000f8e <main+0x5e>
		//For testing hardware
		setTimer1(100);
 8000f88:	2064      	movs	r0, #100	; 0x64
 8000f8a:	f000 f9c1 	bl	8001310 <setTimer1>
	}

	fsm_run();
 8000f8e:	f7ff fc1d 	bl	80007cc <fsm_run>

	if (buffer_flag == 1){
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <main+0x90>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d104      	bne.n	8000fa4 <main+0x74>
		cmd_parser_fsm();
 8000f9a:	f000 fcd9 	bl	8001950 <cmd_parser_fsm>
		buffer_flag = 0;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <main+0x90>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
	}

	uart_control_fsm();
 8000fa4:	f000 fd66 	bl	8001a74 <uart_control_fsm>
	if (timer1_flag == 1){
 8000fa8:	e7ea      	b.n	8000f80 <main+0x50>
 8000faa:	bf00      	nop
 8000fac:	200001a0 	.word	0x200001a0
 8000fb0:	20000280 	.word	0x20000280
 8000fb4:	200001e8 	.word	0x200001e8
 8000fb8:	40011400 	.word	0x40011400
 8000fbc:	20000230 	.word	0x20000230
 8000fc0:	200002b7 	.word	0x200002b7

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b090      	sub	sp, #64	; 0x40
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 0318 	add.w	r3, r7, #24
 8000fce:	2228      	movs	r2, #40	; 0x28
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f003 fc1c 	bl	8004810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fea:	2301      	movs	r3, #1
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fee:	2310      	movs	r3, #16
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff6:	f107 0318 	add.w	r3, r7, #24
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f001 fe0e 	bl	8002c1c <HAL_RCC_OscConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001006:	f000 f97d 	bl	8001304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100a:	230f      	movs	r3, #15
 800100c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f002 f87c 	bl	8003120 <HAL_RCC_ClockConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800102e:	f000 f969 	bl	8001304 <Error_Handler>
  }
}
 8001032:	bf00      	nop
 8001034:	3740      	adds	r7, #64	; 0x40
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <MX_I2C1_Init+0x50>)
 8001042:	4a13      	ldr	r2, [pc, #76]	; (8001090 <MX_I2C1_Init+0x54>)
 8001044:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_I2C1_Init+0x50>)
 8001048:	4a12      	ldr	r2, [pc, #72]	; (8001094 <MX_I2C1_Init+0x58>)
 800104a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_I2C1_Init+0x50>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <MX_I2C1_Init+0x50>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <MX_I2C1_Init+0x50>)
 800105a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800105e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001060:	4b0a      	ldr	r3, [pc, #40]	; (800108c <MX_I2C1_Init+0x50>)
 8001062:	2200      	movs	r2, #0
 8001064:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <MX_I2C1_Init+0x50>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800106c:	4b07      	ldr	r3, [pc, #28]	; (800108c <MX_I2C1_Init+0x50>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <MX_I2C1_Init+0x50>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <MX_I2C1_Init+0x50>)
 800107a:	f001 f985 	bl	8002388 <HAL_I2C_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001084:	f000 f93e 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200000f4 	.word	0x200000f4
 8001090:	40005400 	.word	0x40005400
 8001094:	000186a0 	.word	0x000186a0

08001098 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800109c:	4b17      	ldr	r3, [pc, #92]	; (80010fc <MX_SPI2_Init+0x64>)
 800109e:	4a18      	ldr	r2, [pc, #96]	; (8001100 <MX_SPI2_Init+0x68>)
 80010a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <MX_SPI2_Init+0x64>)
 80010a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <MX_SPI2_Init+0x64>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <MX_SPI2_Init+0x64>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_SPI2_Init+0x64>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_SPI2_Init+0x64>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_SPI2_Init+0x64>)
 80010c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_SPI2_Init+0x64>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d0:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <MX_SPI2_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_SPI2_Init+0x64>)
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010dc:	4b07      	ldr	r3, [pc, #28]	; (80010fc <MX_SPI2_Init+0x64>)
 80010de:	2200      	movs	r2, #0
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_SPI2_Init+0x64>)
 80010e4:	220a      	movs	r2, #10
 80010e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <MX_SPI2_Init+0x64>)
 80010ea:	f002 f9b1 	bl	8003450 <HAL_SPI_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80010f4:	f000 f906 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000148 	.word	0x20000148
 8001100:	40003800 	.word	0x40003800

08001104 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001118:	463b      	mov	r3, r7
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001120:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <MX_TIM2_Init+0x94>)
 8001122:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001126:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_TIM2_Init+0x94>)
 800112a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800112e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <MX_TIM2_Init+0x94>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MX_TIM2_Init+0x94>)
 8001138:	2209      	movs	r2, #9
 800113a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_TIM2_Init+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <MX_TIM2_Init+0x94>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001148:	4813      	ldr	r0, [pc, #76]	; (8001198 <MX_TIM2_Init+0x94>)
 800114a:	f002 fa05 	bl	8003558 <HAL_TIM_Base_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001154:	f000 f8d6 	bl	8001304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	4619      	mov	r1, r3
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <MX_TIM2_Init+0x94>)
 8001166:	f002 fba1 	bl	80038ac <HAL_TIM_ConfigClockSource>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001170:	f000 f8c8 	bl	8001304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_TIM2_Init+0x94>)
 8001182:	f002 fd73 	bl	8003c6c <HAL_TIMEx_MasterConfigSynchronization>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800118c:	f000 f8ba 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	200001a0 	.word	0x200001a0

0800119c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_USART3_UART_Init+0x4c>)
 80011a2:	4a12      	ldr	r2, [pc, #72]	; (80011ec <MX_USART3_UART_Init+0x50>)
 80011a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <MX_USART3_UART_Init+0x4c>)
 80011a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_USART3_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_USART3_UART_Init+0x4c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <MX_USART3_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_USART3_UART_Init+0x4c>)
 80011c2:	220c      	movs	r2, #12
 80011c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <MX_USART3_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_USART3_UART_Init+0x4c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_USART3_UART_Init+0x4c>)
 80011d4:	f002 fdba 	bl	8003d4c <HAL_UART_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80011de:	f000 f891 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200001e8 	.word	0x200001e8
 80011ec:	40004800 	.word	0x40004800

080011f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001204:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <MX_GPIO_Init+0xf0>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4a35      	ldr	r2, [pc, #212]	; (80012e0 <MX_GPIO_Init+0xf0>)
 800120a:	f043 0310 	orr.w	r3, r3, #16
 800120e:	6193      	str	r3, [r2, #24]
 8001210:	4b33      	ldr	r3, [pc, #204]	; (80012e0 <MX_GPIO_Init+0xf0>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f003 0310 	and.w	r3, r3, #16
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121c:	4b30      	ldr	r3, [pc, #192]	; (80012e0 <MX_GPIO_Init+0xf0>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	4a2f      	ldr	r2, [pc, #188]	; (80012e0 <MX_GPIO_Init+0xf0>)
 8001222:	f043 0308 	orr.w	r3, r3, #8
 8001226:	6193      	str	r3, [r2, #24]
 8001228:	4b2d      	ldr	r3, [pc, #180]	; (80012e0 <MX_GPIO_Init+0xf0>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f003 0308 	and.w	r3, r3, #8
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001234:	4b2a      	ldr	r3, [pc, #168]	; (80012e0 <MX_GPIO_Init+0xf0>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	4a29      	ldr	r2, [pc, #164]	; (80012e0 <MX_GPIO_Init+0xf0>)
 800123a:	f043 0304 	orr.w	r3, r3, #4
 800123e:	6193      	str	r3, [r2, #24]
 8001240:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <MX_GPIO_Init+0xf0>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800124c:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <MX_GPIO_Init+0xf0>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	4a23      	ldr	r2, [pc, #140]	; (80012e0 <MX_GPIO_Init+0xf0>)
 8001252:	f043 0320 	orr.w	r3, r3, #32
 8001256:	6193      	str	r3, [r2, #24]
 8001258:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <MX_GPIO_Init+0xf0>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	f003 0320 	and.w	r3, r3, #32
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_SCK_Pin|LED_LE_Pin|LED_OE_Pin|LED_SDI_Pin, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	2178      	movs	r1, #120	; 0x78
 8001268:	481e      	ldr	r0, [pc, #120]	; (80012e4 <MX_GPIO_Init+0xf4>)
 800126a:	f001 f85b 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2124      	movs	r1, #36	; 0x24
 8001272:	481d      	ldr	r0, [pc, #116]	; (80012e8 <MX_GPIO_Init+0xf8>)
 8001274:	f001 f856 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	2104      	movs	r1, #4
 800127c:	481b      	ldr	r0, [pc, #108]	; (80012ec <MX_GPIO_Init+0xfc>)
 800127e:	f001 f851 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_SCK_Pin LED_LE_Pin LED_OE_Pin LED_SDI_Pin */
  GPIO_InitStruct.Pin = LED_SCK_Pin|LED_LE_Pin|LED_OE_Pin|LED_SDI_Pin;
 8001282:	2378      	movs	r3, #120	; 0x78
 8001284:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001286:	2301      	movs	r3, #1
 8001288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2302      	movs	r3, #2
 8001290:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001292:	f107 0310 	add.w	r3, r7, #16
 8001296:	4619      	mov	r1, r3
 8001298:	4812      	ldr	r0, [pc, #72]	; (80012e4 <MX_GPIO_Init+0xf4>)
 800129a:	f000 febf 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|BUZZER_Pin;
 800129e:	2324      	movs	r3, #36	; 0x24
 80012a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2302      	movs	r3, #2
 80012ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ae:	f107 0310 	add.w	r3, r7, #16
 80012b2:	4619      	mov	r1, r3
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <MX_GPIO_Init+0xf8>)
 80012b6:	f000 feb1 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 80012ba:	2304      	movs	r3, #4
 80012bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2301      	movs	r3, #1
 80012c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2302      	movs	r3, #2
 80012c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 0310 	add.w	r3, r7, #16
 80012ce:	4619      	mov	r1, r3
 80012d0:	4806      	ldr	r0, [pc, #24]	; (80012ec <MX_GPIO_Init+0xfc>)
 80012d2:	f000 fea3 	bl	800201c <HAL_GPIO_Init>

}
 80012d6:	bf00      	nop
 80012d8:	3720      	adds	r7, #32
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40011000 	.word	0x40011000
 80012e8:	40010c00 	.word	0x40010c00
 80012ec:	40011400 	.word	0x40011400

080012f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Interrupt is invoked every 10ms
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

	/*ledBlink(50, 50);
	UpdateStatus();
	buzzerProcess();*/
	timerRun();
 80012f8:	f000 f832 	bl	8001360 <timerRun>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800130c:	e7fe      	b.n	800130c <Error_Handler+0x8>
	...

08001310 <setTimer1>:
int timer9_flag = 0;

int timer10_counter = 0;
int timer10_flag = 0;

void setTimer1(int duration){
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001318:	4a05      	ldr	r2, [pc, #20]	; (8001330 <setTimer1+0x20>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <setTimer1+0x24>)
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	2000022c 	.word	0x2000022c
 8001334:	20000230 	.word	0x20000230

08001338 <setTimer2>:

void setTimer2(int duration){
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8001340:	4a05      	ldr	r2, [pc, #20]	; (8001358 <setTimer2+0x20>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001346:	4b05      	ldr	r3, [pc, #20]	; (800135c <setTimer2+0x24>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	20000234 	.word	0x20000234
 800135c:	20000238 	.word	0x20000238

08001360 <timerRun>:
void setTimer10(int duration){
	timer10_counter = duration;
	timer10_flag = 0;
}

void timerRun(){
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001364:	4b51      	ldr	r3, [pc, #324]	; (80014ac <timerRun+0x14c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	dd0b      	ble.n	8001384 <timerRun+0x24>
		timer1_counter--;
 800136c:	4b4f      	ldr	r3, [pc, #316]	; (80014ac <timerRun+0x14c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	3b01      	subs	r3, #1
 8001372:	4a4e      	ldr	r2, [pc, #312]	; (80014ac <timerRun+0x14c>)
 8001374:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0){
 8001376:	4b4d      	ldr	r3, [pc, #308]	; (80014ac <timerRun+0x14c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d102      	bne.n	8001384 <timerRun+0x24>
			timer1_flag = 1;
 800137e:	4b4c      	ldr	r3, [pc, #304]	; (80014b0 <timerRun+0x150>)
 8001380:	2201      	movs	r2, #1
 8001382:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8001384:	4b4b      	ldr	r3, [pc, #300]	; (80014b4 <timerRun+0x154>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	dd0b      	ble.n	80013a4 <timerRun+0x44>
		timer2_counter--;
 800138c:	4b49      	ldr	r3, [pc, #292]	; (80014b4 <timerRun+0x154>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	3b01      	subs	r3, #1
 8001392:	4a48      	ldr	r2, [pc, #288]	; (80014b4 <timerRun+0x154>)
 8001394:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0){
 8001396:	4b47      	ldr	r3, [pc, #284]	; (80014b4 <timerRun+0x154>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d102      	bne.n	80013a4 <timerRun+0x44>
			timer2_flag = 1;
 800139e:	4b46      	ldr	r3, [pc, #280]	; (80014b8 <timerRun+0x158>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 80013a4:	4b45      	ldr	r3, [pc, #276]	; (80014bc <timerRun+0x15c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	dd0b      	ble.n	80013c4 <timerRun+0x64>
		timer3_counter--;
 80013ac:	4b43      	ldr	r3, [pc, #268]	; (80014bc <timerRun+0x15c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	4a42      	ldr	r2, [pc, #264]	; (80014bc <timerRun+0x15c>)
 80013b4:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0){
 80013b6:	4b41      	ldr	r3, [pc, #260]	; (80014bc <timerRun+0x15c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d102      	bne.n	80013c4 <timerRun+0x64>
			timer3_flag = 1;
 80013be:	4b40      	ldr	r3, [pc, #256]	; (80014c0 <timerRun+0x160>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 80013c4:	4b3f      	ldr	r3, [pc, #252]	; (80014c4 <timerRun+0x164>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	dd0b      	ble.n	80013e4 <timerRun+0x84>
		timer4_counter--;
 80013cc:	4b3d      	ldr	r3, [pc, #244]	; (80014c4 <timerRun+0x164>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	4a3c      	ldr	r2, [pc, #240]	; (80014c4 <timerRun+0x164>)
 80013d4:	6013      	str	r3, [r2, #0]
		if(timer4_counter == 0){
 80013d6:	4b3b      	ldr	r3, [pc, #236]	; (80014c4 <timerRun+0x164>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <timerRun+0x84>
			timer4_flag = 1;
 80013de:	4b3a      	ldr	r3, [pc, #232]	; (80014c8 <timerRun+0x168>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer5_counter > 0){
 80013e4:	4b39      	ldr	r3, [pc, #228]	; (80014cc <timerRun+0x16c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	dd0b      	ble.n	8001404 <timerRun+0xa4>
		timer5_counter--;
 80013ec:	4b37      	ldr	r3, [pc, #220]	; (80014cc <timerRun+0x16c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	4a36      	ldr	r2, [pc, #216]	; (80014cc <timerRun+0x16c>)
 80013f4:	6013      	str	r3, [r2, #0]
		if(timer5_counter == 0){
 80013f6:	4b35      	ldr	r3, [pc, #212]	; (80014cc <timerRun+0x16c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d102      	bne.n	8001404 <timerRun+0xa4>
			timer5_flag = 1;
 80013fe:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <timerRun+0x170>)
 8001400:	2201      	movs	r2, #1
 8001402:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer6_counter > 0){
 8001404:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <timerRun+0x174>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	dd0b      	ble.n	8001424 <timerRun+0xc4>
		timer6_counter--;
 800140c:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <timerRun+0x174>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	3b01      	subs	r3, #1
 8001412:	4a30      	ldr	r2, [pc, #192]	; (80014d4 <timerRun+0x174>)
 8001414:	6013      	str	r3, [r2, #0]
		if(timer6_counter == 0){
 8001416:	4b2f      	ldr	r3, [pc, #188]	; (80014d4 <timerRun+0x174>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d102      	bne.n	8001424 <timerRun+0xc4>
			timer6_flag = 1;
 800141e:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <timerRun+0x178>)
 8001420:	2201      	movs	r2, #1
 8001422:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer7_counter > 0){
 8001424:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <timerRun+0x17c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	dd0b      	ble.n	8001444 <timerRun+0xe4>
		timer7_counter--;
 800142c:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <timerRun+0x17c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	3b01      	subs	r3, #1
 8001432:	4a2a      	ldr	r2, [pc, #168]	; (80014dc <timerRun+0x17c>)
 8001434:	6013      	str	r3, [r2, #0]
		if(timer7_counter == 0){
 8001436:	4b29      	ldr	r3, [pc, #164]	; (80014dc <timerRun+0x17c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d102      	bne.n	8001444 <timerRun+0xe4>
			timer7_flag = 1;
 800143e:	4b28      	ldr	r3, [pc, #160]	; (80014e0 <timerRun+0x180>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer8_counter > 0){
 8001444:	4b27      	ldr	r3, [pc, #156]	; (80014e4 <timerRun+0x184>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	dd0b      	ble.n	8001464 <timerRun+0x104>
		timer8_counter--;
 800144c:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <timerRun+0x184>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	3b01      	subs	r3, #1
 8001452:	4a24      	ldr	r2, [pc, #144]	; (80014e4 <timerRun+0x184>)
 8001454:	6013      	str	r3, [r2, #0]
		if(timer8_counter == 0){
 8001456:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <timerRun+0x184>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d102      	bne.n	8001464 <timerRun+0x104>
			timer8_flag = 1;
 800145e:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <timerRun+0x188>)
 8001460:	2201      	movs	r2, #1
 8001462:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer9_counter > 0){
 8001464:	4b21      	ldr	r3, [pc, #132]	; (80014ec <timerRun+0x18c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	dd0b      	ble.n	8001484 <timerRun+0x124>
		timer9_counter--;
 800146c:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <timerRun+0x18c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3b01      	subs	r3, #1
 8001472:	4a1e      	ldr	r2, [pc, #120]	; (80014ec <timerRun+0x18c>)
 8001474:	6013      	str	r3, [r2, #0]
		if(timer9_counter == 0){
 8001476:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <timerRun+0x18c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d102      	bne.n	8001484 <timerRun+0x124>
			timer9_flag = 1;
 800147e:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <timerRun+0x190>)
 8001480:	2201      	movs	r2, #1
 8001482:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer10_counter > 0){
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <timerRun+0x194>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	dd0b      	ble.n	80014a4 <timerRun+0x144>
		timer10_counter--;
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <timerRun+0x194>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	3b01      	subs	r3, #1
 8001492:	4a18      	ldr	r2, [pc, #96]	; (80014f4 <timerRun+0x194>)
 8001494:	6013      	str	r3, [r2, #0]
		if(timer10_counter == 0){
 8001496:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <timerRun+0x194>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d102      	bne.n	80014a4 <timerRun+0x144>
			timer10_flag = 1;
 800149e:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <timerRun+0x198>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	601a      	str	r2, [r3, #0]
		}
	}
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	2000022c 	.word	0x2000022c
 80014b0:	20000230 	.word	0x20000230
 80014b4:	20000234 	.word	0x20000234
 80014b8:	20000238 	.word	0x20000238
 80014bc:	2000023c 	.word	0x2000023c
 80014c0:	20000240 	.word	0x20000240
 80014c4:	20000244 	.word	0x20000244
 80014c8:	20000248 	.word	0x20000248
 80014cc:	2000024c 	.word	0x2000024c
 80014d0:	20000250 	.word	0x20000250
 80014d4:	20000254 	.word	0x20000254
 80014d8:	20000258 	.word	0x20000258
 80014dc:	2000025c 	.word	0x2000025c
 80014e0:	20000260 	.word	0x20000260
 80014e4:	20000264 	.word	0x20000264
 80014e8:	20000268 	.word	0x20000268
 80014ec:	2000026c 	.word	0x2000026c
 80014f0:	20000270 	.word	0x20000270
 80014f4:	20000274 	.word	0x20000274
 80014f8:	20000278 	.word	0x20000278

080014fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_MspInit+0x5c>)
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	4a14      	ldr	r2, [pc, #80]	; (8001558 <HAL_MspInit+0x5c>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6193      	str	r3, [r2, #24]
 800150e:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_MspInit+0x5c>)
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <HAL_MspInit+0x5c>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	4a0e      	ldr	r2, [pc, #56]	; (8001558 <HAL_MspInit+0x5c>)
 8001520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001524:	61d3      	str	r3, [r2, #28]
 8001526:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <HAL_MspInit+0x5c>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_MspInit+0x60>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	4a04      	ldr	r2, [pc, #16]	; (800155c <HAL_MspInit+0x60>)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	40021000 	.word	0x40021000
 800155c:	40010000 	.word	0x40010000

08001560 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a15      	ldr	r2, [pc, #84]	; (80015d0 <HAL_I2C_MspInit+0x70>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d123      	bne.n	80015c8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <HAL_I2C_MspInit+0x74>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <HAL_I2C_MspInit+0x74>)
 8001586:	f043 0308 	orr.w	r3, r3, #8
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <HAL_I2C_MspInit+0x74>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f003 0308 	and.w	r3, r3, #8
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001598:	23c0      	movs	r3, #192	; 0xc0
 800159a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800159c:	2312      	movs	r3, #18
 800159e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	4619      	mov	r1, r3
 80015aa:	480b      	ldr	r0, [pc, #44]	; (80015d8 <HAL_I2C_MspInit+0x78>)
 80015ac:	f000 fd36 	bl	800201c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <HAL_I2C_MspInit+0x74>)
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <HAL_I2C_MspInit+0x74>)
 80015b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ba:	61d3      	str	r3, [r2, #28]
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <HAL_I2C_MspInit+0x74>)
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015c8:	bf00      	nop
 80015ca:	3720      	adds	r7, #32
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40005400 	.word	0x40005400
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010c00 	.word	0x40010c00

080015dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a1c      	ldr	r2, [pc, #112]	; (8001668 <HAL_SPI_MspInit+0x8c>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d131      	bne.n	8001660 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <HAL_SPI_MspInit+0x90>)
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	4a1a      	ldr	r2, [pc, #104]	; (800166c <HAL_SPI_MspInit+0x90>)
 8001602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001606:	61d3      	str	r3, [r2, #28]
 8001608:	4b18      	ldr	r3, [pc, #96]	; (800166c <HAL_SPI_MspInit+0x90>)
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001614:	4b15      	ldr	r3, [pc, #84]	; (800166c <HAL_SPI_MspInit+0x90>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a14      	ldr	r2, [pc, #80]	; (800166c <HAL_SPI_MspInit+0x90>)
 800161a:	f043 0308 	orr.w	r3, r3, #8
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_SPI_MspInit+0x90>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800162c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001630:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	4619      	mov	r1, r3
 8001640:	480b      	ldr	r0, [pc, #44]	; (8001670 <HAL_SPI_MspInit+0x94>)
 8001642:	f000 fceb 	bl	800201c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001646:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800164a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001654:	f107 0310 	add.w	r3, r7, #16
 8001658:	4619      	mov	r1, r3
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <HAL_SPI_MspInit+0x94>)
 800165c:	f000 fcde 	bl	800201c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001660:	bf00      	nop
 8001662:	3720      	adds	r7, #32
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40003800 	.word	0x40003800
 800166c:	40021000 	.word	0x40021000
 8001670:	40010c00 	.word	0x40010c00

08001674 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001684:	d113      	bne.n	80016ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <HAL_TIM_Base_MspInit+0x44>)
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	4a0b      	ldr	r2, [pc, #44]	; (80016b8 <HAL_TIM_Base_MspInit+0x44>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	61d3      	str	r3, [r2, #28]
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_TIM_Base_MspInit+0x44>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	201c      	movs	r0, #28
 80016a4:	f000 fbd3 	bl	8001e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016a8:	201c      	movs	r0, #28
 80016aa:	f000 fbec 	bl	8001e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40021000 	.word	0x40021000

080016bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a20      	ldr	r2, [pc, #128]	; (8001758 <HAL_UART_MspInit+0x9c>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d139      	bne.n	8001750 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016dc:	4b1f      	ldr	r3, [pc, #124]	; (800175c <HAL_UART_MspInit+0xa0>)
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	4a1e      	ldr	r2, [pc, #120]	; (800175c <HAL_UART_MspInit+0xa0>)
 80016e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e6:	61d3      	str	r3, [r2, #28]
 80016e8:	4b1c      	ldr	r3, [pc, #112]	; (800175c <HAL_UART_MspInit+0xa0>)
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_UART_MspInit+0xa0>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a18      	ldr	r2, [pc, #96]	; (800175c <HAL_UART_MspInit+0xa0>)
 80016fa:	f043 0308 	orr.w	r3, r3, #8
 80016fe:	6193      	str	r3, [r2, #24]
 8001700:	4b16      	ldr	r3, [pc, #88]	; (800175c <HAL_UART_MspInit+0xa0>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0308 	and.w	r3, r3, #8
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800170c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001710:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001716:	2303      	movs	r3, #3
 8001718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171a:	f107 0310 	add.w	r3, r7, #16
 800171e:	4619      	mov	r1, r3
 8001720:	480f      	ldr	r0, [pc, #60]	; (8001760 <HAL_UART_MspInit+0xa4>)
 8001722:	f000 fc7b 	bl	800201c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001726:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800172a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001734:	f107 0310 	add.w	r3, r7, #16
 8001738:	4619      	mov	r1, r3
 800173a:	4809      	ldr	r0, [pc, #36]	; (8001760 <HAL_UART_MspInit+0xa4>)
 800173c:	f000 fc6e 	bl	800201c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	2100      	movs	r1, #0
 8001744:	2027      	movs	r0, #39	; 0x27
 8001746:	f000 fb82 	bl	8001e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800174a:	2027      	movs	r0, #39	; 0x27
 800174c:	f000 fb9b 	bl	8001e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001750:	bf00      	nop
 8001752:	3720      	adds	r7, #32
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40004800 	.word	0x40004800
 800175c:	40021000 	.word	0x40021000
 8001760:	40010c00 	.word	0x40010c00

08001764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <NMI_Handler+0x4>

0800176a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <HardFault_Handler+0x4>

08001770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <MemManage_Handler+0x4>

08001776 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <BusFault_Handler+0x4>

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <UsageFault_Handler+0x4>

08001782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr

0800179a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017aa:	f000 fa39 	bl	8001c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <TIM2_IRQHandler+0x10>)
 80017ba:	f001 ff6f 	bl	800369c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200001a0 	.word	0x200001a0

080017c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <USART3_IRQHandler+0x10>)
 80017ce:	f002 fbcd 	bl	8003f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200001e8 	.word	0x200001e8

080017dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e4:	4a14      	ldr	r2, [pc, #80]	; (8001838 <_sbrk+0x5c>)
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <_sbrk+0x60>)
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <_sbrk+0x64>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d102      	bne.n	80017fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <_sbrk+0x64>)
 80017fa:	4a12      	ldr	r2, [pc, #72]	; (8001844 <_sbrk+0x68>)
 80017fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	429a      	cmp	r2, r3
 800180a:	d207      	bcs.n	800181c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800180c:	f002 ffd6 	bl	80047bc <__errno>
 8001810:	4603      	mov	r3, r0
 8001812:	220c      	movs	r2, #12
 8001814:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
 800181a:	e009      	b.n	8001830 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <_sbrk+0x64>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001822:	4b07      	ldr	r3, [pc, #28]	; (8001840 <_sbrk+0x64>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	4a05      	ldr	r2, [pc, #20]	; (8001840 <_sbrk+0x64>)
 800182c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800182e:	68fb      	ldr	r3, [r7, #12]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20005000 	.word	0x20005000
 800183c:	00000400 	.word	0x00000400
 8001840:	2000027c 	.word	0x2000027c
 8001844:	200002d0 	.word	0x200002d0

08001848 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <isCmdEqualToRST>:

//Another approach
uint8_t cmdParserStatus = INIT_UART;
uint8_t traveler = 0;

int isCmdEqualToRST(uint8_t str[]){
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	int flag = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
	if (str[0] == 'R')
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b52      	cmp	r3, #82	; 0x52
 8001866:	d102      	bne.n	800186e <isCmdEqualToRST+0x1a>
		flag = 1;
 8001868:	2301      	movs	r3, #1
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	e001      	b.n	8001872 <isCmdEqualToRST+0x1e>
	else
		flag = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
	return flag;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr

0800187e <isCmdEqualToOK>:

int isCmdEqualToOK(uint8_t str[]){
 800187e:	b480      	push	{r7}
 8001880:	b085      	sub	sp, #20
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
	int flag = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
	if (str[0] == 'O')
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b4f      	cmp	r3, #79	; 0x4f
 8001890:	d102      	bne.n	8001898 <isCmdEqualToOK+0x1a>
		flag = 1;
 8001892:	2301      	movs	r3, #1
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	e001      	b.n	800189c <isCmdEqualToOK+0x1e>
	else
		flag = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
	return flag;
 800189c:	68fb      	ldr	r3, [r7, #12]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <isCmdEqualTo1>:

int isCmdEqualTo1(uint8_t str[]){
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	int flag = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
	if (str[0] == '1')
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b31      	cmp	r3, #49	; 0x31
 80018ba:	d102      	bne.n	80018c2 <isCmdEqualTo1+0x1a>
		flag = 1;
 80018bc:	2301      	movs	r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	e001      	b.n	80018c6 <isCmdEqualTo1+0x1e>
	else
		flag = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
	return flag;
 80018c6:	68fb      	ldr	r3, [r7, #12]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr

080018d2 <isCmdEqualTo2>:

int isCmdEqualTo2(uint8_t str[]){
 80018d2:	b480      	push	{r7}
 80018d4:	b085      	sub	sp, #20
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
	int flag = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
	if (str[0] == '2')
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b32      	cmp	r3, #50	; 0x32
 80018e4:	d102      	bne.n	80018ec <isCmdEqualTo2+0x1a>
		flag = 1;
 80018e6:	2301      	movs	r3, #1
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	e001      	b.n	80018f0 <isCmdEqualTo2+0x1e>
	else
		flag = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
	return flag;
 80018f0:	68fb      	ldr	r3, [r7, #12]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <isCmdEqualToInc>:

int isCmdEqualToInc(uint8_t str[]){
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	int flag = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
	if (str[0] == '+')
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b2b      	cmp	r3, #43	; 0x2b
 800190e:	d102      	bne.n	8001916 <isCmdEqualToInc+0x1a>
		flag = 1;
 8001910:	2301      	movs	r3, #1
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	e001      	b.n	800191a <isCmdEqualToInc+0x1e>
	else
		flag = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
	return flag;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr

08001926 <isCmdEqualToDec>:

int isCmdEqualToDec(uint8_t str[]){
 8001926:	b480      	push	{r7}
 8001928:	b085      	sub	sp, #20
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
	int flag = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
	if (str[0] == '-')
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b2d      	cmp	r3, #45	; 0x2d
 8001938:	d102      	bne.n	8001940 <isCmdEqualToDec+0x1a>
		flag = 1;
 800193a:	2301      	movs	r3, #1
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	e001      	b.n	8001944 <isCmdEqualToDec+0x1e>
	else
		flag = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
	return flag;
 8001944:	68fb      	ldr	r3, [r7, #12]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <cmd_parser_fsm>:

void cmd_parser_fsm(){
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
	switch(status1){
 8001954:	4b42      	ldr	r3, [pc, #264]	; (8001a60 <cmd_parser_fsm+0x110>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b0b      	cmp	r3, #11
 800195a:	d037      	beq.n	80019cc <cmd_parser_fsm+0x7c>
 800195c:	2b0b      	cmp	r3, #11
 800195e:	dc78      	bgt.n	8001a52 <cmd_parser_fsm+0x102>
 8001960:	2b09      	cmp	r3, #9
 8001962:	d002      	beq.n	800196a <cmd_parser_fsm+0x1a>
 8001964:	2b0a      	cmp	r3, #10
 8001966:	d008      	beq.n	800197a <cmd_parser_fsm+0x2a>
			}
			else cmd_flag = UNDEF;
			status1 = INIT_UART;
			break;
		default:
			break;
 8001968:	e073      	b.n	8001a52 <cmd_parser_fsm+0x102>
			if (buffer_byte == '!') status1 = READING;
 800196a:	4b3e      	ldr	r3, [pc, #248]	; (8001a64 <cmd_parser_fsm+0x114>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b21      	cmp	r3, #33	; 0x21
 8001970:	d171      	bne.n	8001a56 <cmd_parser_fsm+0x106>
 8001972:	4b3b      	ldr	r3, [pc, #236]	; (8001a60 <cmd_parser_fsm+0x110>)
 8001974:	220a      	movs	r2, #10
 8001976:	701a      	strb	r2, [r3, #0]
			break;
 8001978:	e06d      	b.n	8001a56 <cmd_parser_fsm+0x106>
			if (buffer_byte != '!' && buffer_byte != '#'){
 800197a:	4b3a      	ldr	r3, [pc, #232]	; (8001a64 <cmd_parser_fsm+0x114>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b21      	cmp	r3, #33	; 0x21
 8001980:	d011      	beq.n	80019a6 <cmd_parser_fsm+0x56>
 8001982:	4b38      	ldr	r3, [pc, #224]	; (8001a64 <cmd_parser_fsm+0x114>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b23      	cmp	r3, #35	; 0x23
 8001988:	d00d      	beq.n	80019a6 <cmd_parser_fsm+0x56>
				cmd_data[cmd_index] = buffer_byte;
 800198a:	4b37      	ldr	r3, [pc, #220]	; (8001a68 <cmd_parser_fsm+0x118>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	4b34      	ldr	r3, [pc, #208]	; (8001a64 <cmd_parser_fsm+0x114>)
 8001992:	7819      	ldrb	r1, [r3, #0]
 8001994:	4b35      	ldr	r3, [pc, #212]	; (8001a6c <cmd_parser_fsm+0x11c>)
 8001996:	5499      	strb	r1, [r3, r2]
				cmd_index++;
 8001998:	4b33      	ldr	r3, [pc, #204]	; (8001a68 <cmd_parser_fsm+0x118>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	3301      	adds	r3, #1
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	4b31      	ldr	r3, [pc, #196]	; (8001a68 <cmd_parser_fsm+0x118>)
 80019a2:	701a      	strb	r2, [r3, #0]
			break;
 80019a4:	e059      	b.n	8001a5a <cmd_parser_fsm+0x10a>
			else if (buffer_byte == '!')
 80019a6:	4b2f      	ldr	r3, [pc, #188]	; (8001a64 <cmd_parser_fsm+0x114>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b21      	cmp	r3, #33	; 0x21
 80019ac:	d103      	bne.n	80019b6 <cmd_parser_fsm+0x66>
				status1 = READING;
 80019ae:	4b2c      	ldr	r3, [pc, #176]	; (8001a60 <cmd_parser_fsm+0x110>)
 80019b0:	220a      	movs	r2, #10
 80019b2:	701a      	strb	r2, [r3, #0]
			break;
 80019b4:	e051      	b.n	8001a5a <cmd_parser_fsm+0x10a>
			else if (buffer_byte == '#'){
 80019b6:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <cmd_parser_fsm+0x114>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b23      	cmp	r3, #35	; 0x23
 80019bc:	d14d      	bne.n	8001a5a <cmd_parser_fsm+0x10a>
				status1 = STOP;
 80019be:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <cmd_parser_fsm+0x110>)
 80019c0:	220b      	movs	r2, #11
 80019c2:	701a      	strb	r2, [r3, #0]
				cmd_index = 0;
 80019c4:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <cmd_parser_fsm+0x118>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
			break;
 80019ca:	e046      	b.n	8001a5a <cmd_parser_fsm+0x10a>
			if (isCmdEqualToRST(cmd_data)==1){
 80019cc:	4827      	ldr	r0, [pc, #156]	; (8001a6c <cmd_parser_fsm+0x11c>)
 80019ce:	f7ff ff41 	bl	8001854 <isCmdEqualToRST>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d103      	bne.n	80019e0 <cmd_parser_fsm+0x90>
				cmd_flag = RST;
 80019d8:	4b25      	ldr	r3, [pc, #148]	; (8001a70 <cmd_parser_fsm+0x120>)
 80019da:	220c      	movs	r2, #12
 80019dc:	701a      	strb	r2, [r3, #0]
 80019de:	e034      	b.n	8001a4a <cmd_parser_fsm+0xfa>
			else if (isCmdEqualTo1(cmd_data)==1){
 80019e0:	4822      	ldr	r0, [pc, #136]	; (8001a6c <cmd_parser_fsm+0x11c>)
 80019e2:	f7ff ff61 	bl	80018a8 <isCmdEqualTo1>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d103      	bne.n	80019f4 <cmd_parser_fsm+0xa4>
				cmd_flag = MODE2;
 80019ec:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <cmd_parser_fsm+0x120>)
 80019ee:	220e      	movs	r2, #14
 80019f0:	701a      	strb	r2, [r3, #0]
 80019f2:	e02a      	b.n	8001a4a <cmd_parser_fsm+0xfa>
			else if (isCmdEqualTo2(cmd_data)==1){
 80019f4:	481d      	ldr	r0, [pc, #116]	; (8001a6c <cmd_parser_fsm+0x11c>)
 80019f6:	f7ff ff6c 	bl	80018d2 <isCmdEqualTo2>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d103      	bne.n	8001a08 <cmd_parser_fsm+0xb8>
				cmd_flag = MODE3;
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <cmd_parser_fsm+0x120>)
 8001a02:	220f      	movs	r2, #15
 8001a04:	701a      	strb	r2, [r3, #0]
 8001a06:	e020      	b.n	8001a4a <cmd_parser_fsm+0xfa>
			else if (isCmdEqualToInc(cmd_data)==1){
 8001a08:	4818      	ldr	r0, [pc, #96]	; (8001a6c <cmd_parser_fsm+0x11c>)
 8001a0a:	f7ff ff77 	bl	80018fc <isCmdEqualToInc>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d103      	bne.n	8001a1c <cmd_parser_fsm+0xcc>
				cmd_flag = INCREASE;
 8001a14:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <cmd_parser_fsm+0x120>)
 8001a16:	2206      	movs	r2, #6
 8001a18:	701a      	strb	r2, [r3, #0]
 8001a1a:	e016      	b.n	8001a4a <cmd_parser_fsm+0xfa>
			else if (isCmdEqualToDec(cmd_data)==1){
 8001a1c:	4813      	ldr	r0, [pc, #76]	; (8001a6c <cmd_parser_fsm+0x11c>)
 8001a1e:	f7ff ff82 	bl	8001926 <isCmdEqualToDec>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d103      	bne.n	8001a30 <cmd_parser_fsm+0xe0>
				cmd_flag = DECREASE;
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <cmd_parser_fsm+0x120>)
 8001a2a:	2207      	movs	r2, #7
 8001a2c:	701a      	strb	r2, [r3, #0]
 8001a2e:	e00c      	b.n	8001a4a <cmd_parser_fsm+0xfa>
			else if (isCmdEqualToOK(cmd_data)==1){
 8001a30:	480e      	ldr	r0, [pc, #56]	; (8001a6c <cmd_parser_fsm+0x11c>)
 8001a32:	f7ff ff24 	bl	800187e <isCmdEqualToOK>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d103      	bne.n	8001a44 <cmd_parser_fsm+0xf4>
				cmd_flag = OK;
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <cmd_parser_fsm+0x120>)
 8001a3e:	220d      	movs	r2, #13
 8001a40:	701a      	strb	r2, [r3, #0]
 8001a42:	e002      	b.n	8001a4a <cmd_parser_fsm+0xfa>
			else cmd_flag = UNDEF;
 8001a44:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <cmd_parser_fsm+0x120>)
 8001a46:	220e      	movs	r2, #14
 8001a48:	701a      	strb	r2, [r3, #0]
			status1 = INIT_UART;
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <cmd_parser_fsm+0x110>)
 8001a4c:	2209      	movs	r2, #9
 8001a4e:	701a      	strb	r2, [r3, #0]
			break;
 8001a50:	e004      	b.n	8001a5c <cmd_parser_fsm+0x10c>
			break;
 8001a52:	bf00      	nop
 8001a54:	e002      	b.n	8001a5c <cmd_parser_fsm+0x10c>
			break;
 8001a56:	bf00      	nop
 8001a58:	e000      	b.n	8001a5c <cmd_parser_fsm+0x10c>
			break;
 8001a5a:	bf00      	nop
	}
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	2000001c 	.word	0x2000001c
 8001a64:	20000280 	.word	0x20000280
 8001a68:	200002bb 	.word	0x200002bb
 8001a6c:	200002b8 	.word	0x200002b8
 8001a70:	2000001d 	.word	0x2000001d

08001a74 <uart_control_fsm>:


void uart_control_fsm(){
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
	switch (cmd_flag){
 8001a78:	4b2f      	ldr	r3, [pc, #188]	; (8001b38 <uart_control_fsm+0xc4>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	3b06      	subs	r3, #6
 8001a7e:	2b09      	cmp	r3, #9
 8001a80:	d84f      	bhi.n	8001b22 <uart_control_fsm+0xae>
 8001a82:	a201      	add	r2, pc, #4	; (adr r2, 8001a88 <uart_control_fsm+0x14>)
 8001a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a88:	08001ac9 	.word	0x08001ac9
 8001a8c:	08001ae7 	.word	0x08001ae7
 8001a90:	08001b23 	.word	0x08001b23
 8001a94:	08001b23 	.word	0x08001b23
 8001a98:	08001b23 	.word	0x08001b23
 8001a9c:	08001b23 	.word	0x08001b23
 8001aa0:	08001ab1 	.word	0x08001ab1
 8001aa4:	08001b05 	.word	0x08001b05
 8001aa8:	08001ab9 	.word	0x08001ab9
 8001aac:	08001ac1 	.word	0x08001ac1
		case RST:
			mode = MODE1;
 8001ab0:	4b22      	ldr	r3, [pc, #136]	; (8001b3c <uart_control_fsm+0xc8>)
 8001ab2:	220d      	movs	r2, #13
 8001ab4:	601a      	str	r2, [r3, #0]
			break;
 8001ab6:	e03b      	b.n	8001b30 <uart_control_fsm+0xbc>
		case MODE2:
			mode = MODE2;
 8001ab8:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <uart_control_fsm+0xc8>)
 8001aba:	220e      	movs	r2, #14
 8001abc:	601a      	str	r2, [r3, #0]
			break;
 8001abe:	e037      	b.n	8001b30 <uart_control_fsm+0xbc>
		case MODE3:
			mode = MODE3;
 8001ac0:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <uart_control_fsm+0xc8>)
 8001ac2:	220f      	movs	r2, #15
 8001ac4:	601a      	str	r2, [r3, #0]
			break;
 8001ac6:	e033      	b.n	8001b30 <uart_control_fsm+0xbc>
		case INCREASE:
			if (mode == MODE2) statusMODE2 = INCREASE;
 8001ac8:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <uart_control_fsm+0xc8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b0e      	cmp	r3, #14
 8001ace:	d102      	bne.n	8001ad6 <uart_control_fsm+0x62>
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <uart_control_fsm+0xcc>)
 8001ad2:	2206      	movs	r2, #6
 8001ad4:	601a      	str	r2, [r3, #0]
			if (mode == MODE3) statusMODE3 = INCREASE;
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <uart_control_fsm+0xc8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b0f      	cmp	r3, #15
 8001adc:	d123      	bne.n	8001b26 <uart_control_fsm+0xb2>
 8001ade:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <uart_control_fsm+0xd0>)
 8001ae0:	2206      	movs	r2, #6
 8001ae2:	601a      	str	r2, [r3, #0]
			break;
 8001ae4:	e01f      	b.n	8001b26 <uart_control_fsm+0xb2>
		case DECREASE:
			if (mode == MODE2) statusMODE2 = DECREASE;
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <uart_control_fsm+0xc8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b0e      	cmp	r3, #14
 8001aec:	d102      	bne.n	8001af4 <uart_control_fsm+0x80>
 8001aee:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <uart_control_fsm+0xcc>)
 8001af0:	2207      	movs	r2, #7
 8001af2:	601a      	str	r2, [r3, #0]
			if (mode == MODE3) statusMODE3 = DECREASE;
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <uart_control_fsm+0xc8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b0f      	cmp	r3, #15
 8001afa:	d116      	bne.n	8001b2a <uart_control_fsm+0xb6>
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <uart_control_fsm+0xd0>)
 8001afe:	2207      	movs	r2, #7
 8001b00:	601a      	str	r2, [r3, #0]
			break;
 8001b02:	e012      	b.n	8001b2a <uart_control_fsm+0xb6>
		case OK:
			if (mode == MODE2) statusMODE2 = SAVE;
 8001b04:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <uart_control_fsm+0xc8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b0e      	cmp	r3, #14
 8001b0a:	d102      	bne.n	8001b12 <uart_control_fsm+0x9e>
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <uart_control_fsm+0xcc>)
 8001b0e:	2208      	movs	r2, #8
 8001b10:	601a      	str	r2, [r3, #0]
			if (mode == MODE3) statusMODE3 = SAVE;
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <uart_control_fsm+0xc8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2b0f      	cmp	r3, #15
 8001b18:	d109      	bne.n	8001b2e <uart_control_fsm+0xba>
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <uart_control_fsm+0xd0>)
 8001b1c:	2208      	movs	r2, #8
 8001b1e:	601a      	str	r2, [r3, #0]
			break;
 8001b20:	e005      	b.n	8001b2e <uart_control_fsm+0xba>
		default:
			break;
 8001b22:	bf00      	nop
 8001b24:	e004      	b.n	8001b30 <uart_control_fsm+0xbc>
			break;
 8001b26:	bf00      	nop
 8001b28:	e002      	b.n	8001b30 <uart_control_fsm+0xbc>
			break;
 8001b2a:	bf00      	nop
 8001b2c:	e000      	b.n	8001b30 <uart_control_fsm+0xbc>
			break;
 8001b2e:	bf00      	nop
	}
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	2000001d 	.word	0x2000001d
 8001b3c:	200000cc 	.word	0x200000cc
 8001b40:	200000d4 	.word	0x200000d4
 8001b44:	200000d8 	.word	0x200000d8

08001b48 <Reset_Handler>:
 8001b48:	480c      	ldr	r0, [pc, #48]	; (8001b7c <LoopFillZerobss+0x12>)
 8001b4a:	490d      	ldr	r1, [pc, #52]	; (8001b80 <LoopFillZerobss+0x16>)
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	; (8001b84 <LoopFillZerobss+0x1a>)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e002      	b.n	8001b58 <LoopCopyDataInit>

08001b52 <CopyDataInit>:
 8001b52:	58d4      	ldr	r4, [r2, r3]
 8001b54:	50c4      	str	r4, [r0, r3]
 8001b56:	3304      	adds	r3, #4

08001b58 <LoopCopyDataInit>:
 8001b58:	18c4      	adds	r4, r0, r3
 8001b5a:	428c      	cmp	r4, r1
 8001b5c:	d3f9      	bcc.n	8001b52 <CopyDataInit>
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <LoopFillZerobss+0x1e>)
 8001b60:	4c0a      	ldr	r4, [pc, #40]	; (8001b8c <LoopFillZerobss+0x22>)
 8001b62:	2300      	movs	r3, #0
 8001b64:	e001      	b.n	8001b6a <LoopFillZerobss>

08001b66 <FillZerobss>:
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	3204      	adds	r2, #4

08001b6a <LoopFillZerobss>:
 8001b6a:	42a2      	cmp	r2, r4
 8001b6c:	d3fb      	bcc.n	8001b66 <FillZerobss>
 8001b6e:	f7ff fe6b 	bl	8001848 <SystemInit>
 8001b72:	f002 fe29 	bl	80047c8 <__libc_init_array>
 8001b76:	f7ff f9db 	bl	8000f30 <main>
 8001b7a:	4770      	bx	lr
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	2000008c 	.word	0x2000008c
 8001b84:	0800523c 	.word	0x0800523c
 8001b88:	2000008c 	.word	0x2000008c
 8001b8c:	200002d0 	.word	0x200002d0

08001b90 <ADC1_2_IRQHandler>:
 8001b90:	e7fe      	b.n	8001b90 <ADC1_2_IRQHandler>
	...

08001b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <HAL_Init+0x28>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a07      	ldr	r2, [pc, #28]	; (8001bbc <HAL_Init+0x28>)
 8001b9e:	f043 0310 	orr.w	r3, r3, #16
 8001ba2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba4:	2003      	movs	r0, #3
 8001ba6:	f000 f947 	bl	8001e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001baa:	200f      	movs	r0, #15
 8001bac:	f000 f808 	bl	8001bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb0:	f7ff fca4 	bl	80014fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40022000 	.word	0x40022000

08001bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_InitTick+0x54>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_InitTick+0x58>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f95f 	bl	8001ea2 <HAL_SYSTICK_Config>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00e      	b.n	8001c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b0f      	cmp	r3, #15
 8001bf2:	d80a      	bhi.n	8001c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	f000 f927 	bl	8001e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c00:	4a06      	ldr	r2, [pc, #24]	; (8001c1c <HAL_InitTick+0x5c>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e000      	b.n	8001c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000018 	.word	0x20000018
 8001c18:	20000024 	.word	0x20000024
 8001c1c:	20000020 	.word	0x20000020

08001c20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_IncTick+0x1c>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_IncTick+0x20>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	4a03      	ldr	r2, [pc, #12]	; (8001c40 <HAL_IncTick+0x20>)
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	20000024 	.word	0x20000024
 8001c40:	200002bc 	.word	0x200002bc

08001c44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return uwTick;
 8001c48:	4b02      	ldr	r3, [pc, #8]	; (8001c54 <HAL_GetTick+0x10>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	200002bc 	.word	0x200002bc

08001c58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c60:	f7ff fff0 	bl	8001c44 <HAL_GetTick>
 8001c64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c70:	d005      	beq.n	8001c7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_Delay+0x44>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	461a      	mov	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c7e:	bf00      	nop
 8001c80:	f7ff ffe0 	bl	8001c44 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d8f7      	bhi.n	8001c80 <HAL_Delay+0x28>
  {
  }
}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000024 	.word	0x20000024

08001ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd2:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	60d3      	str	r3, [r2, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <__NVIC_GetPriorityGrouping+0x18>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	f003 0307 	and.w	r3, r3, #7
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	db0b      	blt.n	8001d2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	f003 021f 	and.w	r2, r3, #31
 8001d1c:	4906      	ldr	r1, [pc, #24]	; (8001d38 <__NVIC_EnableIRQ+0x34>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	095b      	lsrs	r3, r3, #5
 8001d24:	2001      	movs	r0, #1
 8001d26:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr
 8001d38:	e000e100 	.word	0xe000e100

08001d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	6039      	str	r1, [r7, #0]
 8001d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	db0a      	blt.n	8001d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	490c      	ldr	r1, [pc, #48]	; (8001d88 <__NVIC_SetPriority+0x4c>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	0112      	lsls	r2, r2, #4
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d64:	e00a      	b.n	8001d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4908      	ldr	r1, [pc, #32]	; (8001d8c <__NVIC_SetPriority+0x50>)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	3b04      	subs	r3, #4
 8001d74:	0112      	lsls	r2, r2, #4
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	440b      	add	r3, r1
 8001d7a:	761a      	strb	r2, [r3, #24]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000e100 	.word	0xe000e100
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b089      	sub	sp, #36	; 0x24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f1c3 0307 	rsb	r3, r3, #7
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	bf28      	it	cs
 8001dae:	2304      	movcs	r3, #4
 8001db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3304      	adds	r3, #4
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d902      	bls.n	8001dc0 <NVIC_EncodePriority+0x30>
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3b03      	subs	r3, #3
 8001dbe:	e000      	b.n	8001dc2 <NVIC_EncodePriority+0x32>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	43d9      	mvns	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	4313      	orrs	r3, r2
         );
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3724      	adds	r7, #36	; 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e04:	d301      	bcc.n	8001e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e06:	2301      	movs	r3, #1
 8001e08:	e00f      	b.n	8001e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <SysTick_Config+0x40>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e12:	210f      	movs	r1, #15
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	f7ff ff90 	bl	8001d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <SysTick_Config+0x40>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e22:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <SysTick_Config+0x40>)
 8001e24:	2207      	movs	r2, #7
 8001e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	e000e010 	.word	0xe000e010

08001e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ff2d 	bl	8001ca0 <__NVIC_SetPriorityGrouping>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e60:	f7ff ff42 	bl	8001ce8 <__NVIC_GetPriorityGrouping>
 8001e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	6978      	ldr	r0, [r7, #20]
 8001e6c:	f7ff ff90 	bl	8001d90 <NVIC_EncodePriority>
 8001e70:	4602      	mov	r2, r0
 8001e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff5f 	bl	8001d3c <__NVIC_SetPriority>
}
 8001e7e:	bf00      	nop
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff35 	bl	8001d04 <__NVIC_EnableIRQ>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ffa2 	bl	8001df4 <SysTick_Config>
 8001eb0:	4603      	mov	r3, r0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b085      	sub	sp, #20
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d008      	beq.n	8001ee2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2204      	movs	r2, #4
 8001ed4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e020      	b.n	8001f24 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 020e 	bic.w	r2, r2, #14
 8001ef0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0201 	bic.w	r2, r2, #1
 8001f00:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f10:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
	...

08001f30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d005      	beq.n	8001f52 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2204      	movs	r2, #4
 8001f4a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	73fb      	strb	r3, [r7, #15]
 8001f50:	e051      	b.n	8001ff6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 020e 	bic.w	r2, r2, #14
 8001f60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0201 	bic.w	r2, r2, #1
 8001f70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a22      	ldr	r2, [pc, #136]	; (8002000 <HAL_DMA_Abort_IT+0xd0>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d029      	beq.n	8001fd0 <HAL_DMA_Abort_IT+0xa0>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a20      	ldr	r2, [pc, #128]	; (8002004 <HAL_DMA_Abort_IT+0xd4>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d022      	beq.n	8001fcc <HAL_DMA_Abort_IT+0x9c>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a1f      	ldr	r2, [pc, #124]	; (8002008 <HAL_DMA_Abort_IT+0xd8>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d01a      	beq.n	8001fc6 <HAL_DMA_Abort_IT+0x96>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a1d      	ldr	r2, [pc, #116]	; (800200c <HAL_DMA_Abort_IT+0xdc>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d012      	beq.n	8001fc0 <HAL_DMA_Abort_IT+0x90>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a1c      	ldr	r2, [pc, #112]	; (8002010 <HAL_DMA_Abort_IT+0xe0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d00a      	beq.n	8001fba <HAL_DMA_Abort_IT+0x8a>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a1a      	ldr	r2, [pc, #104]	; (8002014 <HAL_DMA_Abort_IT+0xe4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d102      	bne.n	8001fb4 <HAL_DMA_Abort_IT+0x84>
 8001fae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fb2:	e00e      	b.n	8001fd2 <HAL_DMA_Abort_IT+0xa2>
 8001fb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fb8:	e00b      	b.n	8001fd2 <HAL_DMA_Abort_IT+0xa2>
 8001fba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fbe:	e008      	b.n	8001fd2 <HAL_DMA_Abort_IT+0xa2>
 8001fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fc4:	e005      	b.n	8001fd2 <HAL_DMA_Abort_IT+0xa2>
 8001fc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fca:	e002      	b.n	8001fd2 <HAL_DMA_Abort_IT+0xa2>
 8001fcc:	2310      	movs	r3, #16
 8001fce:	e000      	b.n	8001fd2 <HAL_DMA_Abort_IT+0xa2>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	4a11      	ldr	r2, [pc, #68]	; (8002018 <HAL_DMA_Abort_IT+0xe8>)
 8001fd4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	4798      	blx	r3
    } 
  }
  return status;
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40020008 	.word	0x40020008
 8002004:	4002001c 	.word	0x4002001c
 8002008:	40020030 	.word	0x40020030
 800200c:	40020044 	.word	0x40020044
 8002010:	40020058 	.word	0x40020058
 8002014:	4002006c 	.word	0x4002006c
 8002018:	40020000 	.word	0x40020000

0800201c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800201c:	b480      	push	{r7}
 800201e:	b08b      	sub	sp, #44	; 0x2c
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202e:	e169      	b.n	8002304 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002030:	2201      	movs	r2, #1
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	429a      	cmp	r2, r3
 800204a:	f040 8158 	bne.w	80022fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4a9a      	ldr	r2, [pc, #616]	; (80022bc <HAL_GPIO_Init+0x2a0>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d05e      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 8002058:	4a98      	ldr	r2, [pc, #608]	; (80022bc <HAL_GPIO_Init+0x2a0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d875      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 800205e:	4a98      	ldr	r2, [pc, #608]	; (80022c0 <HAL_GPIO_Init+0x2a4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d058      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 8002064:	4a96      	ldr	r2, [pc, #600]	; (80022c0 <HAL_GPIO_Init+0x2a4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d86f      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 800206a:	4a96      	ldr	r2, [pc, #600]	; (80022c4 <HAL_GPIO_Init+0x2a8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d052      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 8002070:	4a94      	ldr	r2, [pc, #592]	; (80022c4 <HAL_GPIO_Init+0x2a8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d869      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 8002076:	4a94      	ldr	r2, [pc, #592]	; (80022c8 <HAL_GPIO_Init+0x2ac>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d04c      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 800207c:	4a92      	ldr	r2, [pc, #584]	; (80022c8 <HAL_GPIO_Init+0x2ac>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d863      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 8002082:	4a92      	ldr	r2, [pc, #584]	; (80022cc <HAL_GPIO_Init+0x2b0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d046      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 8002088:	4a90      	ldr	r2, [pc, #576]	; (80022cc <HAL_GPIO_Init+0x2b0>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d85d      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 800208e:	2b12      	cmp	r3, #18
 8002090:	d82a      	bhi.n	80020e8 <HAL_GPIO_Init+0xcc>
 8002092:	2b12      	cmp	r3, #18
 8002094:	d859      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 8002096:	a201      	add	r2, pc, #4	; (adr r2, 800209c <HAL_GPIO_Init+0x80>)
 8002098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209c:	08002117 	.word	0x08002117
 80020a0:	080020f1 	.word	0x080020f1
 80020a4:	08002103 	.word	0x08002103
 80020a8:	08002145 	.word	0x08002145
 80020ac:	0800214b 	.word	0x0800214b
 80020b0:	0800214b 	.word	0x0800214b
 80020b4:	0800214b 	.word	0x0800214b
 80020b8:	0800214b 	.word	0x0800214b
 80020bc:	0800214b 	.word	0x0800214b
 80020c0:	0800214b 	.word	0x0800214b
 80020c4:	0800214b 	.word	0x0800214b
 80020c8:	0800214b 	.word	0x0800214b
 80020cc:	0800214b 	.word	0x0800214b
 80020d0:	0800214b 	.word	0x0800214b
 80020d4:	0800214b 	.word	0x0800214b
 80020d8:	0800214b 	.word	0x0800214b
 80020dc:	0800214b 	.word	0x0800214b
 80020e0:	080020f9 	.word	0x080020f9
 80020e4:	0800210d 	.word	0x0800210d
 80020e8:	4a79      	ldr	r2, [pc, #484]	; (80022d0 <HAL_GPIO_Init+0x2b4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020ee:	e02c      	b.n	800214a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	623b      	str	r3, [r7, #32]
          break;
 80020f6:	e029      	b.n	800214c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	3304      	adds	r3, #4
 80020fe:	623b      	str	r3, [r7, #32]
          break;
 8002100:	e024      	b.n	800214c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	3308      	adds	r3, #8
 8002108:	623b      	str	r3, [r7, #32]
          break;
 800210a:	e01f      	b.n	800214c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	330c      	adds	r3, #12
 8002112:	623b      	str	r3, [r7, #32]
          break;
 8002114:	e01a      	b.n	800214c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d102      	bne.n	8002124 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800211e:	2304      	movs	r3, #4
 8002120:	623b      	str	r3, [r7, #32]
          break;
 8002122:	e013      	b.n	800214c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d105      	bne.n	8002138 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800212c:	2308      	movs	r3, #8
 800212e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69fa      	ldr	r2, [r7, #28]
 8002134:	611a      	str	r2, [r3, #16]
          break;
 8002136:	e009      	b.n	800214c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002138:	2308      	movs	r3, #8
 800213a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	615a      	str	r2, [r3, #20]
          break;
 8002142:	e003      	b.n	800214c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002144:	2300      	movs	r3, #0
 8002146:	623b      	str	r3, [r7, #32]
          break;
 8002148:	e000      	b.n	800214c <HAL_GPIO_Init+0x130>
          break;
 800214a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	2bff      	cmp	r3, #255	; 0xff
 8002150:	d801      	bhi.n	8002156 <HAL_GPIO_Init+0x13a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	e001      	b.n	800215a <HAL_GPIO_Init+0x13e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3304      	adds	r3, #4
 800215a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2bff      	cmp	r3, #255	; 0xff
 8002160:	d802      	bhi.n	8002168 <HAL_GPIO_Init+0x14c>
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	e002      	b.n	800216e <HAL_GPIO_Init+0x152>
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	3b08      	subs	r3, #8
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	210f      	movs	r1, #15
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	fa01 f303 	lsl.w	r3, r1, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	401a      	ands	r2, r3
 8002180:	6a39      	ldr	r1, [r7, #32]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	fa01 f303 	lsl.w	r3, r1, r3
 8002188:	431a      	orrs	r2, r3
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 80b1 	beq.w	80022fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800219c:	4b4d      	ldr	r3, [pc, #308]	; (80022d4 <HAL_GPIO_Init+0x2b8>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a4c      	ldr	r2, [pc, #304]	; (80022d4 <HAL_GPIO_Init+0x2b8>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b4a      	ldr	r3, [pc, #296]	; (80022d4 <HAL_GPIO_Init+0x2b8>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021b4:	4a48      	ldr	r2, [pc, #288]	; (80022d8 <HAL_GPIO_Init+0x2bc>)
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	089b      	lsrs	r3, r3, #2
 80021ba:	3302      	adds	r3, #2
 80021bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	220f      	movs	r2, #15
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	4013      	ands	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a40      	ldr	r2, [pc, #256]	; (80022dc <HAL_GPIO_Init+0x2c0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d013      	beq.n	8002208 <HAL_GPIO_Init+0x1ec>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a3f      	ldr	r2, [pc, #252]	; (80022e0 <HAL_GPIO_Init+0x2c4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00d      	beq.n	8002204 <HAL_GPIO_Init+0x1e8>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a3e      	ldr	r2, [pc, #248]	; (80022e4 <HAL_GPIO_Init+0x2c8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d007      	beq.n	8002200 <HAL_GPIO_Init+0x1e4>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a3d      	ldr	r2, [pc, #244]	; (80022e8 <HAL_GPIO_Init+0x2cc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d101      	bne.n	80021fc <HAL_GPIO_Init+0x1e0>
 80021f8:	2303      	movs	r3, #3
 80021fa:	e006      	b.n	800220a <HAL_GPIO_Init+0x1ee>
 80021fc:	2304      	movs	r3, #4
 80021fe:	e004      	b.n	800220a <HAL_GPIO_Init+0x1ee>
 8002200:	2302      	movs	r3, #2
 8002202:	e002      	b.n	800220a <HAL_GPIO_Init+0x1ee>
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <HAL_GPIO_Init+0x1ee>
 8002208:	2300      	movs	r3, #0
 800220a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800220c:	f002 0203 	and.w	r2, r2, #3
 8002210:	0092      	lsls	r2, r2, #2
 8002212:	4093      	lsls	r3, r2
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800221a:	492f      	ldr	r1, [pc, #188]	; (80022d8 <HAL_GPIO_Init+0x2bc>)
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	3302      	adds	r3, #2
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d006      	beq.n	8002242 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002234:	4b2d      	ldr	r3, [pc, #180]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	492c      	ldr	r1, [pc, #176]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	600b      	str	r3, [r1, #0]
 8002240:	e006      	b.n	8002250 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002242:	4b2a      	ldr	r3, [pc, #168]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	43db      	mvns	r3, r3
 800224a:	4928      	ldr	r1, [pc, #160]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 800224c:	4013      	ands	r3, r2
 800224e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d006      	beq.n	800226a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800225c:	4b23      	ldr	r3, [pc, #140]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	4922      	ldr	r1, [pc, #136]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	604b      	str	r3, [r1, #4]
 8002268:	e006      	b.n	8002278 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800226a:	4b20      	ldr	r3, [pc, #128]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	43db      	mvns	r3, r3
 8002272:	491e      	ldr	r1, [pc, #120]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 8002274:	4013      	ands	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d006      	beq.n	8002292 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002284:	4b19      	ldr	r3, [pc, #100]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	4918      	ldr	r1, [pc, #96]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	608b      	str	r3, [r1, #8]
 8002290:	e006      	b.n	80022a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002292:	4b16      	ldr	r3, [pc, #88]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	43db      	mvns	r3, r3
 800229a:	4914      	ldr	r1, [pc, #80]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 800229c:	4013      	ands	r3, r2
 800229e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d021      	beq.n	80022f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022ac:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	490e      	ldr	r1, [pc, #56]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	60cb      	str	r3, [r1, #12]
 80022b8:	e021      	b.n	80022fe <HAL_GPIO_Init+0x2e2>
 80022ba:	bf00      	nop
 80022bc:	10320000 	.word	0x10320000
 80022c0:	10310000 	.word	0x10310000
 80022c4:	10220000 	.word	0x10220000
 80022c8:	10210000 	.word	0x10210000
 80022cc:	10120000 	.word	0x10120000
 80022d0:	10110000 	.word	0x10110000
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40010000 	.word	0x40010000
 80022dc:	40010800 	.word	0x40010800
 80022e0:	40010c00 	.word	0x40010c00
 80022e4:	40011000 	.word	0x40011000
 80022e8:	40011400 	.word	0x40011400
 80022ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_GPIO_Init+0x304>)
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	4909      	ldr	r1, [pc, #36]	; (8002320 <HAL_GPIO_Init+0x304>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	3301      	adds	r3, #1
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	fa22 f303 	lsr.w	r3, r2, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	f47f ae8e 	bne.w	8002030 <HAL_GPIO_Init+0x14>
  }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	372c      	adds	r7, #44	; 0x2c
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	40010400 	.word	0x40010400

08002324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	807b      	strh	r3, [r7, #2]
 8002330:	4613      	mov	r3, r2
 8002332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002334:	787b      	ldrb	r3, [r7, #1]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800233a:	887a      	ldrh	r2, [r7, #2]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002340:	e003      	b.n	800234a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002342:	887b      	ldrh	r3, [r7, #2]
 8002344:	041a      	lsls	r2, r3, #16
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	611a      	str	r2, [r3, #16]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002366:	887a      	ldrh	r2, [r7, #2]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4013      	ands	r3, r2
 800236c:	041a      	lsls	r2, r3, #16
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	43d9      	mvns	r1, r3
 8002372:	887b      	ldrh	r3, [r7, #2]
 8002374:	400b      	ands	r3, r1
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	611a      	str	r2, [r3, #16]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr
	...

08002388 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e12b      	b.n	80025f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d106      	bne.n	80023b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff f8d6 	bl	8001560 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2224      	movs	r2, #36	; 0x24
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0201 	bic.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023ec:	f000 ffea 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
 80023f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4a81      	ldr	r2, [pc, #516]	; (80025fc <HAL_I2C_Init+0x274>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d807      	bhi.n	800240c <HAL_I2C_Init+0x84>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4a80      	ldr	r2, [pc, #512]	; (8002600 <HAL_I2C_Init+0x278>)
 8002400:	4293      	cmp	r3, r2
 8002402:	bf94      	ite	ls
 8002404:	2301      	movls	r3, #1
 8002406:	2300      	movhi	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	e006      	b.n	800241a <HAL_I2C_Init+0x92>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4a7d      	ldr	r2, [pc, #500]	; (8002604 <HAL_I2C_Init+0x27c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	bf94      	ite	ls
 8002414:	2301      	movls	r3, #1
 8002416:	2300      	movhi	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e0e7      	b.n	80025f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4a78      	ldr	r2, [pc, #480]	; (8002608 <HAL_I2C_Init+0x280>)
 8002426:	fba2 2303 	umull	r2, r3, r2, r3
 800242a:	0c9b      	lsrs	r3, r3, #18
 800242c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	430a      	orrs	r2, r1
 8002440:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	4a6a      	ldr	r2, [pc, #424]	; (80025fc <HAL_I2C_Init+0x274>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d802      	bhi.n	800245c <HAL_I2C_Init+0xd4>
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	3301      	adds	r3, #1
 800245a:	e009      	b.n	8002470 <HAL_I2C_Init+0xe8>
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002462:	fb02 f303 	mul.w	r3, r2, r3
 8002466:	4a69      	ldr	r2, [pc, #420]	; (800260c <HAL_I2C_Init+0x284>)
 8002468:	fba2 2303 	umull	r2, r3, r2, r3
 800246c:	099b      	lsrs	r3, r3, #6
 800246e:	3301      	adds	r3, #1
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	430b      	orrs	r3, r1
 8002476:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002482:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	495c      	ldr	r1, [pc, #368]	; (80025fc <HAL_I2C_Init+0x274>)
 800248c:	428b      	cmp	r3, r1
 800248e:	d819      	bhi.n	80024c4 <HAL_I2C_Init+0x13c>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1e59      	subs	r1, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	fbb1 f3f3 	udiv	r3, r1, r3
 800249e:	1c59      	adds	r1, r3, #1
 80024a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024a4:	400b      	ands	r3, r1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <HAL_I2C_Init+0x138>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1e59      	subs	r1, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80024b8:	3301      	adds	r3, #1
 80024ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024be:	e051      	b.n	8002564 <HAL_I2C_Init+0x1dc>
 80024c0:	2304      	movs	r3, #4
 80024c2:	e04f      	b.n	8002564 <HAL_I2C_Init+0x1dc>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d111      	bne.n	80024f0 <HAL_I2C_Init+0x168>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	1e58      	subs	r0, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6859      	ldr	r1, [r3, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	440b      	add	r3, r1
 80024da:	fbb0 f3f3 	udiv	r3, r0, r3
 80024de:	3301      	adds	r3, #1
 80024e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	bf0c      	ite	eq
 80024e8:	2301      	moveq	r3, #1
 80024ea:	2300      	movne	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	e012      	b.n	8002516 <HAL_I2C_Init+0x18e>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	1e58      	subs	r0, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6859      	ldr	r1, [r3, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	0099      	lsls	r1, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	fbb0 f3f3 	udiv	r3, r0, r3
 8002506:	3301      	adds	r3, #1
 8002508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800250c:	2b00      	cmp	r3, #0
 800250e:	bf0c      	ite	eq
 8002510:	2301      	moveq	r3, #1
 8002512:	2300      	movne	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_I2C_Init+0x196>
 800251a:	2301      	movs	r3, #1
 800251c:	e022      	b.n	8002564 <HAL_I2C_Init+0x1dc>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10e      	bne.n	8002544 <HAL_I2C_Init+0x1bc>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1e58      	subs	r0, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6859      	ldr	r1, [r3, #4]
 800252e:	460b      	mov	r3, r1
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	440b      	add	r3, r1
 8002534:	fbb0 f3f3 	udiv	r3, r0, r3
 8002538:	3301      	adds	r3, #1
 800253a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800253e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002542:	e00f      	b.n	8002564 <HAL_I2C_Init+0x1dc>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	1e58      	subs	r0, r3, #1
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6859      	ldr	r1, [r3, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	0099      	lsls	r1, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	fbb0 f3f3 	udiv	r3, r0, r3
 800255a:	3301      	adds	r3, #1
 800255c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002560:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	6809      	ldr	r1, [r1, #0]
 8002568:	4313      	orrs	r3, r2
 800256a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69da      	ldr	r2, [r3, #28]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002592:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6911      	ldr	r1, [r2, #16]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68d2      	ldr	r2, [r2, #12]
 800259e:	4311      	orrs	r1, r2
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	430b      	orrs	r3, r1
 80025a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695a      	ldr	r2, [r3, #20]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2220      	movs	r2, #32
 80025de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	000186a0 	.word	0x000186a0
 8002600:	001e847f 	.word	0x001e847f
 8002604:	003d08ff 	.word	0x003d08ff
 8002608:	431bde83 	.word	0x431bde83
 800260c:	10624dd3 	.word	0x10624dd3

08002610 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af02      	add	r7, sp, #8
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	461a      	mov	r2, r3
 800261c:	460b      	mov	r3, r1
 800261e:	817b      	strh	r3, [r7, #10]
 8002620:	4613      	mov	r3, r2
 8002622:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002624:	f7ff fb0e 	bl	8001c44 <HAL_GetTick>
 8002628:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b20      	cmp	r3, #32
 8002634:	f040 80e0 	bne.w	80027f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	2319      	movs	r3, #25
 800263e:	2201      	movs	r2, #1
 8002640:	4970      	ldr	r1, [pc, #448]	; (8002804 <HAL_I2C_Master_Transmit+0x1f4>)
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f964 	bl	8002910 <I2C_WaitOnFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800264e:	2302      	movs	r3, #2
 8002650:	e0d3      	b.n	80027fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002658:	2b01      	cmp	r3, #1
 800265a:	d101      	bne.n	8002660 <HAL_I2C_Master_Transmit+0x50>
 800265c:	2302      	movs	r3, #2
 800265e:	e0cc      	b.n	80027fa <HAL_I2C_Master_Transmit+0x1ea>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b01      	cmp	r3, #1
 8002674:	d007      	beq.n	8002686 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f042 0201 	orr.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002694:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2221      	movs	r2, #33	; 0x21
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2210      	movs	r2, #16
 80026a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	893a      	ldrh	r2, [r7, #8]
 80026b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4a50      	ldr	r2, [pc, #320]	; (8002808 <HAL_I2C_Master_Transmit+0x1f8>)
 80026c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026c8:	8979      	ldrh	r1, [r7, #10]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	6a3a      	ldr	r2, [r7, #32]
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 f89c 	bl	800280c <I2C_MasterRequestWrite>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e08d      	b.n	80027fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026de:	2300      	movs	r3, #0
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026f4:	e066      	b.n	80027c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	6a39      	ldr	r1, [r7, #32]
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 f9de 	bl	8002abc <I2C_WaitOnTXEFlagUntilTimeout>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00d      	beq.n	8002722 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	2b04      	cmp	r3, #4
 800270c:	d107      	bne.n	800271e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800271c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e06b      	b.n	80027fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	781a      	ldrb	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b04      	cmp	r3, #4
 800275e:	d11b      	bne.n	8002798 <HAL_I2C_Master_Transmit+0x188>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002764:	2b00      	cmp	r3, #0
 8002766:	d017      	beq.n	8002798 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	781a      	ldrb	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002790:	3b01      	subs	r3, #1
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	6a39      	ldr	r1, [r7, #32]
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 f9ce 	bl	8002b3e <I2C_WaitOnBTFFlagUntilTimeout>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00d      	beq.n	80027c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d107      	bne.n	80027c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e01a      	b.n	80027fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d194      	bne.n	80026f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2220      	movs	r2, #32
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	e000      	b.n	80027fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027f8:	2302      	movs	r3, #2
  }
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	00100002 	.word	0x00100002
 8002808:	ffff0000 	.word	0xffff0000

0800280c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af02      	add	r7, sp, #8
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	607a      	str	r2, [r7, #4]
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	460b      	mov	r3, r1
 800281a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2b08      	cmp	r3, #8
 8002826:	d006      	beq.n	8002836 <I2C_MasterRequestWrite+0x2a>
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d003      	beq.n	8002836 <I2C_MasterRequestWrite+0x2a>
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002834:	d108      	bne.n	8002848 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	e00b      	b.n	8002860 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	2b12      	cmp	r3, #18
 800284e:	d107      	bne.n	8002860 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800285e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f84f 	bl	8002910 <I2C_WaitOnFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00d      	beq.n	8002894 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002886:	d103      	bne.n	8002890 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800288e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e035      	b.n	8002900 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800289c:	d108      	bne.n	80028b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800289e:	897b      	ldrh	r3, [r7, #10]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	461a      	mov	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028ac:	611a      	str	r2, [r3, #16]
 80028ae:	e01b      	b.n	80028e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028b0:	897b      	ldrh	r3, [r7, #10]
 80028b2:	11db      	asrs	r3, r3, #7
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	f003 0306 	and.w	r3, r3, #6
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	f063 030f 	orn	r3, r3, #15
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	490e      	ldr	r1, [pc, #56]	; (8002908 <I2C_MasterRequestWrite+0xfc>)
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 f875 	bl	80029be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e010      	b.n	8002900 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028de:	897b      	ldrh	r3, [r7, #10]
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	4907      	ldr	r1, [pc, #28]	; (800290c <I2C_MasterRequestWrite+0x100>)
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f865 	bl	80029be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	00010008 	.word	0x00010008
 800290c:	00010002 	.word	0x00010002

08002910 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	4613      	mov	r3, r2
 800291e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002920:	e025      	b.n	800296e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002928:	d021      	beq.n	800296e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292a:	f7ff f98b 	bl	8001c44 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d302      	bcc.n	8002940 <I2C_WaitOnFlagUntilTimeout+0x30>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d116      	bne.n	800296e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2220      	movs	r2, #32
 800294a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f043 0220 	orr.w	r2, r3, #32
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e023      	b.n	80029b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	0c1b      	lsrs	r3, r3, #16
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b01      	cmp	r3, #1
 8002976:	d10d      	bne.n	8002994 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	43da      	mvns	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4013      	ands	r3, r2
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	bf0c      	ite	eq
 800298a:	2301      	moveq	r3, #1
 800298c:	2300      	movne	r3, #0
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	e00c      	b.n	80029ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	43da      	mvns	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4013      	ands	r3, r2
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	bf0c      	ite	eq
 80029a6:	2301      	moveq	r3, #1
 80029a8:	2300      	movne	r3, #0
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d0b6      	beq.n	8002922 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b084      	sub	sp, #16
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	60f8      	str	r0, [r7, #12]
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029cc:	e051      	b.n	8002a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029dc:	d123      	bne.n	8002a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f043 0204 	orr.w	r2, r3, #4
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e046      	b.n	8002ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2c:	d021      	beq.n	8002a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a2e:	f7ff f909 	bl	8001c44 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d302      	bcc.n	8002a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d116      	bne.n	8002a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f043 0220 	orr.w	r2, r3, #32
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e020      	b.n	8002ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	0c1b      	lsrs	r3, r3, #16
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d10c      	bne.n	8002a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	43da      	mvns	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4013      	ands	r3, r2
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	bf14      	ite	ne
 8002a8e:	2301      	movne	r3, #1
 8002a90:	2300      	moveq	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	e00b      	b.n	8002aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	43da      	mvns	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	bf14      	ite	ne
 8002aa8:	2301      	movne	r3, #1
 8002aaa:	2300      	moveq	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d18d      	bne.n	80029ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ac8:	e02d      	b.n	8002b26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f878 	bl	8002bc0 <I2C_IsAcknowledgeFailed>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e02d      	b.n	8002b36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae0:	d021      	beq.n	8002b26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae2:	f7ff f8af 	bl	8001c44 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d302      	bcc.n	8002af8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d116      	bne.n	8002b26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2220      	movs	r2, #32
 8002b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f043 0220 	orr.w	r2, r3, #32
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e007      	b.n	8002b36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b30:	2b80      	cmp	r3, #128	; 0x80
 8002b32:	d1ca      	bne.n	8002aca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b084      	sub	sp, #16
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b4a:	e02d      	b.n	8002ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 f837 	bl	8002bc0 <I2C_IsAcknowledgeFailed>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e02d      	b.n	8002bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b62:	d021      	beq.n	8002ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b64:	f7ff f86e 	bl	8001c44 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d302      	bcc.n	8002b7a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d116      	bne.n	8002ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	f043 0220 	orr.w	r2, r3, #32
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e007      	b.n	8002bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d1ca      	bne.n	8002b4c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd6:	d11b      	bne.n	8002c10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002be0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	f043 0204 	orr.w	r2, r3, #4
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e272      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 8087 	beq.w	8002d4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c3c:	4b92      	ldr	r3, [pc, #584]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 030c 	and.w	r3, r3, #12
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d00c      	beq.n	8002c62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c48:	4b8f      	ldr	r3, [pc, #572]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d112      	bne.n	8002c7a <HAL_RCC_OscConfig+0x5e>
 8002c54:	4b8c      	ldr	r3, [pc, #560]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c60:	d10b      	bne.n	8002c7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c62:	4b89      	ldr	r3, [pc, #548]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d06c      	beq.n	8002d48 <HAL_RCC_OscConfig+0x12c>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d168      	bne.n	8002d48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e24c      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c82:	d106      	bne.n	8002c92 <HAL_RCC_OscConfig+0x76>
 8002c84:	4b80      	ldr	r3, [pc, #512]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a7f      	ldr	r2, [pc, #508]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	e02e      	b.n	8002cf0 <HAL_RCC_OscConfig+0xd4>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x98>
 8002c9a:	4b7b      	ldr	r3, [pc, #492]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a7a      	ldr	r2, [pc, #488]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	4b78      	ldr	r3, [pc, #480]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a77      	ldr	r2, [pc, #476]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	e01d      	b.n	8002cf0 <HAL_RCC_OscConfig+0xd4>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0xbc>
 8002cbe:	4b72      	ldr	r3, [pc, #456]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a71      	ldr	r2, [pc, #452]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	4b6f      	ldr	r3, [pc, #444]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a6e      	ldr	r2, [pc, #440]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	e00b      	b.n	8002cf0 <HAL_RCC_OscConfig+0xd4>
 8002cd8:	4b6b      	ldr	r3, [pc, #428]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a6a      	ldr	r2, [pc, #424]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	4b68      	ldr	r3, [pc, #416]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a67      	ldr	r2, [pc, #412]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d013      	beq.n	8002d20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf8:	f7fe ffa4 	bl	8001c44 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d00:	f7fe ffa0 	bl	8001c44 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	; 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e200      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d12:	4b5d      	ldr	r3, [pc, #372]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0xe4>
 8002d1e:	e014      	b.n	8002d4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d20:	f7fe ff90 	bl	8001c44 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d28:	f7fe ff8c 	bl	8001c44 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b64      	cmp	r3, #100	; 0x64
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e1ec      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3a:	4b53      	ldr	r3, [pc, #332]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x10c>
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d063      	beq.n	8002e1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d56:	4b4c      	ldr	r3, [pc, #304]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00b      	beq.n	8002d7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d62:	4b49      	ldr	r3, [pc, #292]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f003 030c 	and.w	r3, r3, #12
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d11c      	bne.n	8002da8 <HAL_RCC_OscConfig+0x18c>
 8002d6e:	4b46      	ldr	r3, [pc, #280]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d116      	bne.n	8002da8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7a:	4b43      	ldr	r3, [pc, #268]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d005      	beq.n	8002d92 <HAL_RCC_OscConfig+0x176>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d001      	beq.n	8002d92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e1c0      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d92:	4b3d      	ldr	r3, [pc, #244]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4939      	ldr	r1, [pc, #228]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da6:	e03a      	b.n	8002e1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d020      	beq.n	8002df2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002db0:	4b36      	ldr	r3, [pc, #216]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db6:	f7fe ff45 	bl	8001c44 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dbe:	f7fe ff41 	bl	8001c44 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e1a1      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd0:	4b2d      	ldr	r3, [pc, #180]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f0      	beq.n	8002dbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ddc:	4b2a      	ldr	r3, [pc, #168]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	4927      	ldr	r1, [pc, #156]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	600b      	str	r3, [r1, #0]
 8002df0:	e015      	b.n	8002e1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002df2:	4b26      	ldr	r3, [pc, #152]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df8:	f7fe ff24 	bl	8001c44 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e00:	f7fe ff20 	bl	8001c44 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e180      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e12:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d03a      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d019      	beq.n	8002e66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e32:	4b17      	ldr	r3, [pc, #92]	; (8002e90 <HAL_RCC_OscConfig+0x274>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e38:	f7fe ff04 	bl	8001c44 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e40:	f7fe ff00 	bl	8001c44 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e160      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e52:	4b0d      	ldr	r3, [pc, #52]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e5e:	2001      	movs	r0, #1
 8002e60:	f000 fad8 	bl	8003414 <RCC_Delay>
 8002e64:	e01c      	b.n	8002ea0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e66:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <HAL_RCC_OscConfig+0x274>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6c:	f7fe feea 	bl	8001c44 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e72:	e00f      	b.n	8002e94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e74:	f7fe fee6 	bl	8001c44 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d908      	bls.n	8002e94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e146      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
 8002e86:	bf00      	nop
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	42420000 	.word	0x42420000
 8002e90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e94:	4b92      	ldr	r3, [pc, #584]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1e9      	bne.n	8002e74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 80a6 	beq.w	8002ffa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eb2:	4b8b      	ldr	r3, [pc, #556]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10d      	bne.n	8002eda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ebe:	4b88      	ldr	r3, [pc, #544]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	4a87      	ldr	r2, [pc, #540]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	61d3      	str	r3, [r2, #28]
 8002eca:	4b85      	ldr	r3, [pc, #532]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eda:	4b82      	ldr	r3, [pc, #520]	; (80030e4 <HAL_RCC_OscConfig+0x4c8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d118      	bne.n	8002f18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ee6:	4b7f      	ldr	r3, [pc, #508]	; (80030e4 <HAL_RCC_OscConfig+0x4c8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a7e      	ldr	r2, [pc, #504]	; (80030e4 <HAL_RCC_OscConfig+0x4c8>)
 8002eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef2:	f7fe fea7 	bl	8001c44 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efa:	f7fe fea3 	bl	8001c44 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b64      	cmp	r3, #100	; 0x64
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e103      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0c:	4b75      	ldr	r3, [pc, #468]	; (80030e4 <HAL_RCC_OscConfig+0x4c8>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0f0      	beq.n	8002efa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCC_OscConfig+0x312>
 8002f20:	4b6f      	ldr	r3, [pc, #444]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	4a6e      	ldr	r2, [pc, #440]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	6213      	str	r3, [r2, #32]
 8002f2c:	e02d      	b.n	8002f8a <HAL_RCC_OscConfig+0x36e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10c      	bne.n	8002f50 <HAL_RCC_OscConfig+0x334>
 8002f36:	4b6a      	ldr	r3, [pc, #424]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	4a69      	ldr	r2, [pc, #420]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f3c:	f023 0301 	bic.w	r3, r3, #1
 8002f40:	6213      	str	r3, [r2, #32]
 8002f42:	4b67      	ldr	r3, [pc, #412]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	4a66      	ldr	r2, [pc, #408]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	f023 0304 	bic.w	r3, r3, #4
 8002f4c:	6213      	str	r3, [r2, #32]
 8002f4e:	e01c      	b.n	8002f8a <HAL_RCC_OscConfig+0x36e>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b05      	cmp	r3, #5
 8002f56:	d10c      	bne.n	8002f72 <HAL_RCC_OscConfig+0x356>
 8002f58:	4b61      	ldr	r3, [pc, #388]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	4a60      	ldr	r2, [pc, #384]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f5e:	f043 0304 	orr.w	r3, r3, #4
 8002f62:	6213      	str	r3, [r2, #32]
 8002f64:	4b5e      	ldr	r3, [pc, #376]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	4a5d      	ldr	r2, [pc, #372]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6213      	str	r3, [r2, #32]
 8002f70:	e00b      	b.n	8002f8a <HAL_RCC_OscConfig+0x36e>
 8002f72:	4b5b      	ldr	r3, [pc, #364]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	4a5a      	ldr	r2, [pc, #360]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	f023 0301 	bic.w	r3, r3, #1
 8002f7c:	6213      	str	r3, [r2, #32]
 8002f7e:	4b58      	ldr	r3, [pc, #352]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	4a57      	ldr	r2, [pc, #348]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f84:	f023 0304 	bic.w	r3, r3, #4
 8002f88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d015      	beq.n	8002fbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f92:	f7fe fe57 	bl	8001c44 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f98:	e00a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9a:	f7fe fe53 	bl	8001c44 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e0b1      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb0:	4b4b      	ldr	r3, [pc, #300]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0ee      	beq.n	8002f9a <HAL_RCC_OscConfig+0x37e>
 8002fbc:	e014      	b.n	8002fe8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fbe:	f7fe fe41 	bl	8001c44 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc6:	f7fe fe3d 	bl	8001c44 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e09b      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fdc:	4b40      	ldr	r3, [pc, #256]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1ee      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fe8:	7dfb      	ldrb	r3, [r7, #23]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d105      	bne.n	8002ffa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fee:	4b3c      	ldr	r3, [pc, #240]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	4a3b      	ldr	r2, [pc, #236]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 8087 	beq.w	8003112 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003004:	4b36      	ldr	r3, [pc, #216]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 030c 	and.w	r3, r3, #12
 800300c:	2b08      	cmp	r3, #8
 800300e:	d061      	beq.n	80030d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d146      	bne.n	80030a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003018:	4b33      	ldr	r3, [pc, #204]	; (80030e8 <HAL_RCC_OscConfig+0x4cc>)
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301e:	f7fe fe11 	bl	8001c44 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003026:	f7fe fe0d 	bl	8001c44 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e06d      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003038:	4b29      	ldr	r3, [pc, #164]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1f0      	bne.n	8003026 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800304c:	d108      	bne.n	8003060 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800304e:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	4921      	ldr	r1, [pc, #132]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 800305c:	4313      	orrs	r3, r2
 800305e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003060:	4b1f      	ldr	r3, [pc, #124]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a19      	ldr	r1, [r3, #32]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	430b      	orrs	r3, r1
 8003072:	491b      	ldr	r1, [pc, #108]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8003074:	4313      	orrs	r3, r2
 8003076:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003078:	4b1b      	ldr	r3, [pc, #108]	; (80030e8 <HAL_RCC_OscConfig+0x4cc>)
 800307a:	2201      	movs	r2, #1
 800307c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307e:	f7fe fde1 	bl	8001c44 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003086:	f7fe fddd 	bl	8001c44 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e03d      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003098:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f0      	beq.n	8003086 <HAL_RCC_OscConfig+0x46a>
 80030a4:	e035      	b.n	8003112 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a6:	4b10      	ldr	r3, [pc, #64]	; (80030e8 <HAL_RCC_OscConfig+0x4cc>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ac:	f7fe fdca 	bl	8001c44 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b4:	f7fe fdc6 	bl	8001c44 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e026      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c6:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0x498>
 80030d2:	e01e      	b.n	8003112 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d107      	bne.n	80030ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e019      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40007000 	.word	0x40007000
 80030e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030ec:	4b0b      	ldr	r3, [pc, #44]	; (800311c <HAL_RCC_OscConfig+0x500>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d106      	bne.n	800310e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310a:	429a      	cmp	r2, r3
 800310c:	d001      	beq.n	8003112 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40021000 	.word	0x40021000

08003120 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0d0      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003134:	4b6a      	ldr	r3, [pc, #424]	; (80032e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d910      	bls.n	8003164 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003142:	4b67      	ldr	r3, [pc, #412]	; (80032e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 0207 	bic.w	r2, r3, #7
 800314a:	4965      	ldr	r1, [pc, #404]	; (80032e0 <HAL_RCC_ClockConfig+0x1c0>)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	4313      	orrs	r3, r2
 8003150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003152:	4b63      	ldr	r3, [pc, #396]	; (80032e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d001      	beq.n	8003164 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0b8      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d020      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800317c:	4b59      	ldr	r3, [pc, #356]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	4a58      	ldr	r2, [pc, #352]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003182:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003186:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0308 	and.w	r3, r3, #8
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003194:	4b53      	ldr	r3, [pc, #332]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	4a52      	ldr	r2, [pc, #328]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 800319a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800319e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a0:	4b50      	ldr	r3, [pc, #320]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	494d      	ldr	r1, [pc, #308]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d040      	beq.n	8003240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d107      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c6:	4b47      	ldr	r3, [pc, #284]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d115      	bne.n	80031fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e07f      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d107      	bne.n	80031ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031de:	4b41      	ldr	r3, [pc, #260]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d109      	bne.n	80031fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e073      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ee:	4b3d      	ldr	r3, [pc, #244]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e06b      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031fe:	4b39      	ldr	r3, [pc, #228]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f023 0203 	bic.w	r2, r3, #3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	4936      	ldr	r1, [pc, #216]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 800320c:	4313      	orrs	r3, r2
 800320e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003210:	f7fe fd18 	bl	8001c44 <HAL_GetTick>
 8003214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003216:	e00a      	b.n	800322e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003218:	f7fe fd14 	bl	8001c44 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	f241 3288 	movw	r2, #5000	; 0x1388
 8003226:	4293      	cmp	r3, r2
 8003228:	d901      	bls.n	800322e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e053      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322e:	4b2d      	ldr	r3, [pc, #180]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f003 020c 	and.w	r2, r3, #12
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	429a      	cmp	r2, r3
 800323e:	d1eb      	bne.n	8003218 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003240:	4b27      	ldr	r3, [pc, #156]	; (80032e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d210      	bcs.n	8003270 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324e:	4b24      	ldr	r3, [pc, #144]	; (80032e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 0207 	bic.w	r2, r3, #7
 8003256:	4922      	ldr	r1, [pc, #136]	; (80032e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	4313      	orrs	r3, r2
 800325c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800325e:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d001      	beq.n	8003270 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e032      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800327c:	4b19      	ldr	r3, [pc, #100]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	4916      	ldr	r1, [pc, #88]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 800328a:	4313      	orrs	r3, r2
 800328c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d009      	beq.n	80032ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800329a:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	490e      	ldr	r1, [pc, #56]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032ae:	f000 f821 	bl	80032f4 <HAL_RCC_GetSysClockFreq>
 80032b2:	4602      	mov	r2, r0
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	490a      	ldr	r1, [pc, #40]	; (80032e8 <HAL_RCC_ClockConfig+0x1c8>)
 80032c0:	5ccb      	ldrb	r3, [r1, r3]
 80032c2:	fa22 f303 	lsr.w	r3, r2, r3
 80032c6:	4a09      	ldr	r2, [pc, #36]	; (80032ec <HAL_RCC_ClockConfig+0x1cc>)
 80032c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032ca:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <HAL_RCC_ClockConfig+0x1d0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fe fc76 	bl	8001bc0 <HAL_InitTick>

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40022000 	.word	0x40022000
 80032e4:	40021000 	.word	0x40021000
 80032e8:	080051e8 	.word	0x080051e8
 80032ec:	20000018 	.word	0x20000018
 80032f0:	20000020 	.word	0x20000020

080032f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f4:	b490      	push	{r4, r7}
 80032f6:	b08a      	sub	sp, #40	; 0x28
 80032f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032fa:	4b29      	ldr	r3, [pc, #164]	; (80033a0 <HAL_RCC_GetSysClockFreq+0xac>)
 80032fc:	1d3c      	adds	r4, r7, #4
 80032fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003300:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003304:	f240 2301 	movw	r3, #513	; 0x201
 8003308:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
 800330e:	2300      	movs	r3, #0
 8003310:	61bb      	str	r3, [r7, #24]
 8003312:	2300      	movs	r3, #0
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800331e:	4b21      	ldr	r3, [pc, #132]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b04      	cmp	r3, #4
 800332c:	d002      	beq.n	8003334 <HAL_RCC_GetSysClockFreq+0x40>
 800332e:	2b08      	cmp	r3, #8
 8003330:	d003      	beq.n	800333a <HAL_RCC_GetSysClockFreq+0x46>
 8003332:	e02b      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003334:	4b1c      	ldr	r3, [pc, #112]	; (80033a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003336:	623b      	str	r3, [r7, #32]
      break;
 8003338:	e02b      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	0c9b      	lsrs	r3, r3, #18
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	3328      	adds	r3, #40	; 0x28
 8003344:	443b      	add	r3, r7
 8003346:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800334a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d012      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003356:	4b13      	ldr	r3, [pc, #76]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	0c5b      	lsrs	r3, r3, #17
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	3328      	adds	r3, #40	; 0x28
 8003362:	443b      	add	r3, r7
 8003364:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003368:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	4a0e      	ldr	r2, [pc, #56]	; (80033a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800336e:	fb03 f202 	mul.w	r2, r3, r2
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	fbb2 f3f3 	udiv	r3, r2, r3
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
 800337a:	e004      	b.n	8003386 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	4a0b      	ldr	r2, [pc, #44]	; (80033ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003380:	fb02 f303 	mul.w	r3, r2, r3
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	623b      	str	r3, [r7, #32]
      break;
 800338a:	e002      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800338c:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800338e:	623b      	str	r3, [r7, #32]
      break;
 8003390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003392:	6a3b      	ldr	r3, [r7, #32]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3728      	adds	r7, #40	; 0x28
 8003398:	46bd      	mov	sp, r7
 800339a:	bc90      	pop	{r4, r7}
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	080051d8 	.word	0x080051d8
 80033a4:	40021000 	.word	0x40021000
 80033a8:	007a1200 	.word	0x007a1200
 80033ac:	003d0900 	.word	0x003d0900

080033b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b4:	4b02      	ldr	r3, [pc, #8]	; (80033c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80033b6:	681b      	ldr	r3, [r3, #0]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr
 80033c0:	20000018 	.word	0x20000018

080033c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033c8:	f7ff fff2 	bl	80033b0 <HAL_RCC_GetHCLKFreq>
 80033cc:	4602      	mov	r2, r0
 80033ce:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	0a1b      	lsrs	r3, r3, #8
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	4903      	ldr	r1, [pc, #12]	; (80033e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033da:	5ccb      	ldrb	r3, [r1, r3]
 80033dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40021000 	.word	0x40021000
 80033e8:	080051f8 	.word	0x080051f8

080033ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033f0:	f7ff ffde 	bl	80033b0 <HAL_RCC_GetHCLKFreq>
 80033f4:	4602      	mov	r2, r0
 80033f6:	4b05      	ldr	r3, [pc, #20]	; (800340c <HAL_RCC_GetPCLK2Freq+0x20>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	0adb      	lsrs	r3, r3, #11
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	4903      	ldr	r1, [pc, #12]	; (8003410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003402:	5ccb      	ldrb	r3, [r1, r3]
 8003404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003408:	4618      	mov	r0, r3
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40021000 	.word	0x40021000
 8003410:	080051f8 	.word	0x080051f8

08003414 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800341c:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <RCC_Delay+0x34>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a0a      	ldr	r2, [pc, #40]	; (800344c <RCC_Delay+0x38>)
 8003422:	fba2 2303 	umull	r2, r3, r2, r3
 8003426:	0a5b      	lsrs	r3, r3, #9
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	fb02 f303 	mul.w	r3, r2, r3
 800342e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003430:	bf00      	nop
  }
  while (Delay --);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1e5a      	subs	r2, r3, #1
 8003436:	60fa      	str	r2, [r7, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f9      	bne.n	8003430 <RCC_Delay+0x1c>
}
 800343c:	bf00      	nop
 800343e:	bf00      	nop
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr
 8003448:	20000018 	.word	0x20000018
 800344c:	10624dd3 	.word	0x10624dd3

08003450 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e076      	b.n	8003550 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	2b00      	cmp	r3, #0
 8003468:	d108      	bne.n	800347c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003472:	d009      	beq.n	8003488 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	61da      	str	r2, [r3, #28]
 800347a:	e005      	b.n	8003488 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fe f89a 	bl	80015dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350c:	ea42 0103 	orr.w	r1, r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	0c1a      	lsrs	r2, r3, #16
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f002 0204 	and.w	r2, r2, #4
 800352e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	69da      	ldr	r2, [r3, #28]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800353e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e041      	b.n	80035ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fe f878 	bl	8001674 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3304      	adds	r3, #4
 8003594:	4619      	mov	r1, r3
 8003596:	4610      	mov	r0, r2
 8003598:	f000 fa70 	bl	8003a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b01      	cmp	r3, #1
 800360a:	d001      	beq.n	8003610 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e03a      	b.n	8003686 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a18      	ldr	r2, [pc, #96]	; (8003690 <HAL_TIM_Base_Start_IT+0x98>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d00e      	beq.n	8003650 <HAL_TIM_Base_Start_IT+0x58>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363a:	d009      	beq.n	8003650 <HAL_TIM_Base_Start_IT+0x58>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a14      	ldr	r2, [pc, #80]	; (8003694 <HAL_TIM_Base_Start_IT+0x9c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d004      	beq.n	8003650 <HAL_TIM_Base_Start_IT+0x58>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a13      	ldr	r2, [pc, #76]	; (8003698 <HAL_TIM_Base_Start_IT+0xa0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d111      	bne.n	8003674 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b06      	cmp	r3, #6
 8003660:	d010      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f042 0201 	orr.w	r2, r2, #1
 8003670:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003672:	e007      	b.n	8003684 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr
 8003690:	40012c00 	.word	0x40012c00
 8003694:	40000400 	.word	0x40000400
 8003698:	40000800 	.word	0x40000800

0800369c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d122      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d11b      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f06f 0202 	mvn.w	r2, #2
 80036c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f9b1 	bl	8003a46 <HAL_TIM_IC_CaptureCallback>
 80036e4:	e005      	b.n	80036f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f9a4 	bl	8003a34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f9b3 	bl	8003a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b04      	cmp	r3, #4
 8003704:	d122      	bne.n	800374c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b04      	cmp	r3, #4
 8003712:	d11b      	bne.n	800374c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0204 	mvn.w	r2, #4
 800371c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2202      	movs	r2, #2
 8003722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f987 	bl	8003a46 <HAL_TIM_IC_CaptureCallback>
 8003738:	e005      	b.n	8003746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f97a 	bl	8003a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f989 	bl	8003a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b08      	cmp	r3, #8
 8003758:	d122      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	2b08      	cmp	r3, #8
 8003766:	d11b      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0208 	mvn.w	r2, #8
 8003770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2204      	movs	r2, #4
 8003776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f95d 	bl	8003a46 <HAL_TIM_IC_CaptureCallback>
 800378c:	e005      	b.n	800379a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f950 	bl	8003a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f95f 	bl	8003a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	2b10      	cmp	r3, #16
 80037ac:	d122      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	2b10      	cmp	r3, #16
 80037ba:	d11b      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0210 	mvn.w	r2, #16
 80037c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2208      	movs	r2, #8
 80037ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f933 	bl	8003a46 <HAL_TIM_IC_CaptureCallback>
 80037e0:	e005      	b.n	80037ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f926 	bl	8003a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f935 	bl	8003a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d10e      	bne.n	8003820 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b01      	cmp	r3, #1
 800380e:	d107      	bne.n	8003820 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0201 	mvn.w	r2, #1
 8003818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fd fd68 	bl	80012f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382a:	2b80      	cmp	r3, #128	; 0x80
 800382c:	d10e      	bne.n	800384c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003838:	2b80      	cmp	r3, #128	; 0x80
 800383a:	d107      	bne.n	800384c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 fa77 	bl	8003d3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	2b40      	cmp	r3, #64	; 0x40
 8003858:	d10e      	bne.n	8003878 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003864:	2b40      	cmp	r3, #64	; 0x40
 8003866:	d107      	bne.n	8003878 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f8f9 	bl	8003a6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f003 0320 	and.w	r3, r3, #32
 8003882:	2b20      	cmp	r3, #32
 8003884:	d10e      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f003 0320 	and.w	r3, r3, #32
 8003890:	2b20      	cmp	r3, #32
 8003892:	d107      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f06f 0220 	mvn.w	r2, #32
 800389c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fa42 	bl	8003d28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038a4:	bf00      	nop
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_TIM_ConfigClockSource+0x18>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e0b3      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x180>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038fc:	d03e      	beq.n	800397c <HAL_TIM_ConfigClockSource+0xd0>
 80038fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003902:	f200 8087 	bhi.w	8003a14 <HAL_TIM_ConfigClockSource+0x168>
 8003906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800390a:	f000 8085 	beq.w	8003a18 <HAL_TIM_ConfigClockSource+0x16c>
 800390e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003912:	d87f      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x168>
 8003914:	2b70      	cmp	r3, #112	; 0x70
 8003916:	d01a      	beq.n	800394e <HAL_TIM_ConfigClockSource+0xa2>
 8003918:	2b70      	cmp	r3, #112	; 0x70
 800391a:	d87b      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x168>
 800391c:	2b60      	cmp	r3, #96	; 0x60
 800391e:	d050      	beq.n	80039c2 <HAL_TIM_ConfigClockSource+0x116>
 8003920:	2b60      	cmp	r3, #96	; 0x60
 8003922:	d877      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x168>
 8003924:	2b50      	cmp	r3, #80	; 0x50
 8003926:	d03c      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0xf6>
 8003928:	2b50      	cmp	r3, #80	; 0x50
 800392a:	d873      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x168>
 800392c:	2b40      	cmp	r3, #64	; 0x40
 800392e:	d058      	beq.n	80039e2 <HAL_TIM_ConfigClockSource+0x136>
 8003930:	2b40      	cmp	r3, #64	; 0x40
 8003932:	d86f      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x168>
 8003934:	2b30      	cmp	r3, #48	; 0x30
 8003936:	d064      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0x156>
 8003938:	2b30      	cmp	r3, #48	; 0x30
 800393a:	d86b      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x168>
 800393c:	2b20      	cmp	r3, #32
 800393e:	d060      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0x156>
 8003940:	2b20      	cmp	r3, #32
 8003942:	d867      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x168>
 8003944:	2b00      	cmp	r3, #0
 8003946:	d05c      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0x156>
 8003948:	2b10      	cmp	r3, #16
 800394a:	d05a      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800394c:	e062      	b.n	8003a14 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6899      	ldr	r1, [r3, #8]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f000 f966 	bl	8003c2e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003970:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	609a      	str	r2, [r3, #8]
      break;
 800397a:	e04e      	b.n	8003a1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6818      	ldr	r0, [r3, #0]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	6899      	ldr	r1, [r3, #8]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f000 f94f 	bl	8003c2e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800399e:	609a      	str	r2, [r3, #8]
      break;
 80039a0:	e03b      	b.n	8003a1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	6859      	ldr	r1, [r3, #4]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	461a      	mov	r2, r3
 80039b0:	f000 f8c6 	bl	8003b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2150      	movs	r1, #80	; 0x50
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 f91d 	bl	8003bfa <TIM_ITRx_SetConfig>
      break;
 80039c0:	e02b      	b.n	8003a1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	6859      	ldr	r1, [r3, #4]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	461a      	mov	r2, r3
 80039d0:	f000 f8e4 	bl	8003b9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2160      	movs	r1, #96	; 0x60
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 f90d 	bl	8003bfa <TIM_ITRx_SetConfig>
      break;
 80039e0:	e01b      	b.n	8003a1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6818      	ldr	r0, [r3, #0]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	6859      	ldr	r1, [r3, #4]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	461a      	mov	r2, r3
 80039f0:	f000 f8a6 	bl	8003b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2140      	movs	r1, #64	; 0x40
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 f8fd 	bl	8003bfa <TIM_ITRx_SetConfig>
      break;
 8003a00:	e00b      	b.n	8003a1a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	f000 f8f4 	bl	8003bfa <TIM_ITRx_SetConfig>
        break;
 8003a12:	e002      	b.n	8003a1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003a14:	bf00      	nop
 8003a16:	e000      	b.n	8003a1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003a18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr

08003a6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr

08003a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a29      	ldr	r2, [pc, #164]	; (8003b34 <TIM_Base_SetConfig+0xb8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d00b      	beq.n	8003aac <TIM_Base_SetConfig+0x30>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9a:	d007      	beq.n	8003aac <TIM_Base_SetConfig+0x30>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a26      	ldr	r2, [pc, #152]	; (8003b38 <TIM_Base_SetConfig+0xbc>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d003      	beq.n	8003aac <TIM_Base_SetConfig+0x30>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a25      	ldr	r2, [pc, #148]	; (8003b3c <TIM_Base_SetConfig+0xc0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d108      	bne.n	8003abe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a1c      	ldr	r2, [pc, #112]	; (8003b34 <TIM_Base_SetConfig+0xb8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00b      	beq.n	8003ade <TIM_Base_SetConfig+0x62>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003acc:	d007      	beq.n	8003ade <TIM_Base_SetConfig+0x62>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a19      	ldr	r2, [pc, #100]	; (8003b38 <TIM_Base_SetConfig+0xbc>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d003      	beq.n	8003ade <TIM_Base_SetConfig+0x62>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a18      	ldr	r2, [pc, #96]	; (8003b3c <TIM_Base_SetConfig+0xc0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d108      	bne.n	8003af0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a07      	ldr	r2, [pc, #28]	; (8003b34 <TIM_Base_SetConfig+0xb8>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d103      	bne.n	8003b24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	615a      	str	r2, [r3, #20]
}
 8003b2a:	bf00      	nop
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr
 8003b34:	40012c00 	.word	0x40012c00
 8003b38:	40000400 	.word	0x40000400
 8003b3c:	40000800 	.word	0x40000800

08003b40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	f023 0201 	bic.w	r2, r3, #1
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f023 030a 	bic.w	r3, r3, #10
 8003b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	621a      	str	r2, [r3, #32]
}
 8003b92:	bf00      	nop
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f023 0210 	bic.w	r2, r3, #16
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bc6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	031b      	lsls	r3, r3, #12
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	621a      	str	r2, [r3, #32]
}
 8003bf0:	bf00      	nop
 8003bf2:	371c      	adds	r7, #28
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bc80      	pop	{r7}
 8003bf8:	4770      	bx	lr

08003bfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b085      	sub	sp, #20
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f043 0307 	orr.w	r3, r3, #7
 8003c1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	609a      	str	r2, [r3, #8]
}
 8003c24:	bf00      	nop
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	4770      	bx	lr

08003c2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b087      	sub	sp, #28
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	607a      	str	r2, [r7, #4]
 8003c3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	021a      	lsls	r2, r3, #8
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	431a      	orrs	r2, r3
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	609a      	str	r2, [r3, #8]
}
 8003c62:	bf00      	nop
 8003c64:	371c      	adds	r7, #28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr

08003c6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c80:	2302      	movs	r3, #2
 8003c82:	e046      	b.n	8003d12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003caa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a16      	ldr	r2, [pc, #88]	; (8003d1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00e      	beq.n	8003ce6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd0:	d009      	beq.n	8003ce6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a12      	ldr	r2, [pc, #72]	; (8003d20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d004      	beq.n	8003ce6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a10      	ldr	r2, [pc, #64]	; (8003d24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d10c      	bne.n	8003d00 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr
 8003d1c:	40012c00 	.word	0x40012c00
 8003d20:	40000400 	.word	0x40000400
 8003d24:	40000800 	.word	0x40000800

08003d28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bc80      	pop	{r7}
 8003d38:	4770      	bx	lr

08003d3a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr

08003d4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e03f      	b.n	8003dde <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d106      	bne.n	8003d78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7fd fca2 	bl	80016bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2224      	movs	r2, #36	; 0x24
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 fc85 	bl	80046a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	691a      	ldr	r2, [r3, #16]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003da4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695a      	ldr	r2, [r3, #20]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003db4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b08a      	sub	sp, #40	; 0x28
 8003dea:	af02      	add	r7, sp, #8
 8003dec:	60f8      	str	r0, [r7, #12]
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	603b      	str	r3, [r7, #0]
 8003df2:	4613      	mov	r3, r2
 8003df4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	d17c      	bne.n	8003f00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <HAL_UART_Transmit+0x2c>
 8003e0c:	88fb      	ldrh	r3, [r7, #6]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e075      	b.n	8003f02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d101      	bne.n	8003e24 <HAL_UART_Transmit+0x3e>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e06e      	b.n	8003f02 <HAL_UART_Transmit+0x11c>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2221      	movs	r2, #33	; 0x21
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e3a:	f7fd ff03 	bl	8001c44 <HAL_GetTick>
 8003e3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	88fa      	ldrh	r2, [r7, #6]
 8003e44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	88fa      	ldrh	r2, [r7, #6]
 8003e4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e54:	d108      	bne.n	8003e68 <HAL_UART_Transmit+0x82>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d104      	bne.n	8003e68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	61bb      	str	r3, [r7, #24]
 8003e66:	e003      	b.n	8003e70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e78:	e02a      	b.n	8003ed0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2200      	movs	r2, #0
 8003e82:	2180      	movs	r1, #128	; 0x80
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 fa38 	bl	80042fa <UART_WaitOnFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e036      	b.n	8003f02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10b      	bne.n	8003eb2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ea8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	3302      	adds	r3, #2
 8003eae:	61bb      	str	r3, [r7, #24]
 8003eb0:	e007      	b.n	8003ec2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	781a      	ldrb	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1cf      	bne.n	8003e7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	2140      	movs	r1, #64	; 0x40
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 fa08 	bl	80042fa <UART_WaitOnFlagUntilTimeout>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e006      	b.n	8003f02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	e000      	b.n	8003f02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f00:	2302      	movs	r3, #2
  }
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3720      	adds	r7, #32
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	4613      	mov	r3, r2
 8003f16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	d11d      	bne.n	8003f60 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_UART_Receive_IT+0x26>
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e016      	b.n	8003f62 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_UART_Receive_IT+0x38>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e00f      	b.n	8003f62 <HAL_UART_Receive_IT+0x58>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003f50:	88fb      	ldrh	r3, [r7, #6]
 8003f52:	461a      	mov	r2, r3
 8003f54:	68b9      	ldr	r1, [r7, #8]
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 fa19 	bl	800438e <UART_Start_Receive_IT>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	e000      	b.n	8003f62 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003f60:	2302      	movs	r3, #2
  }
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
	...

08003f6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08a      	sub	sp, #40	; 0x28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10d      	bne.n	8003fbe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_UART_IRQHandler+0x52>
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	f003 0320 	and.w	r3, r3, #32
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fac9 	bl	800454e <UART_Receive_IT>
      return;
 8003fbc:	e17b      	b.n	80042b6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 80b1 	beq.w	8004128 <HAL_UART_IRQHandler+0x1bc>
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d105      	bne.n	8003fdc <HAL_UART_IRQHandler+0x70>
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 80a6 	beq.w	8004128 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <HAL_UART_IRQHandler+0x90>
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	f043 0201 	orr.w	r2, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_UART_IRQHandler+0xb0>
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	f043 0202 	orr.w	r2, r3, #2
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <HAL_UART_IRQHandler+0xd0>
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	f043 0204 	orr.w	r2, r3, #4
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00f      	beq.n	8004066 <HAL_UART_IRQHandler+0xfa>
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b00      	cmp	r3, #0
 800404e:	d104      	bne.n	800405a <HAL_UART_IRQHandler+0xee>
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d005      	beq.n	8004066 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	f043 0208 	orr.w	r2, r3, #8
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 811e 	beq.w	80042ac <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b00      	cmp	r3, #0
 8004078:	d007      	beq.n	800408a <HAL_UART_IRQHandler+0x11e>
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	f003 0320 	and.w	r3, r3, #32
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 fa62 	bl	800454e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004094:	2b00      	cmp	r3, #0
 8004096:	bf14      	ite	ne
 8004098:	2301      	movne	r3, #1
 800409a:	2300      	moveq	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d102      	bne.n	80040b2 <HAL_UART_IRQHandler+0x146>
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d031      	beq.n	8004116 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f9a4 	bl	8004400 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d023      	beq.n	800410e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695a      	ldr	r2, [r3, #20]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040d4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d013      	beq.n	8004106 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	4a76      	ldr	r2, [pc, #472]	; (80042bc <HAL_UART_IRQHandler+0x350>)
 80040e4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fd ff20 	bl	8001f30 <HAL_DMA_Abort_IT>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d016      	beq.n	8004124 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004100:	4610      	mov	r0, r2
 8004102:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004104:	e00e      	b.n	8004124 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f8e3 	bl	80042d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800410c:	e00a      	b.n	8004124 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f8df 	bl	80042d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004114:	e006      	b.n	8004124 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f8db 	bl	80042d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004122:	e0c3      	b.n	80042ac <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004124:	bf00      	nop
    return;
 8004126:	e0c1      	b.n	80042ac <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412c:	2b01      	cmp	r3, #1
 800412e:	f040 80a1 	bne.w	8004274 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	f003 0310 	and.w	r3, r3, #16
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 809b 	beq.w	8004274 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	f003 0310 	and.w	r3, r3, #16
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 8095 	beq.w	8004274 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	d04e      	beq.n	800420c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004178:	8a3b      	ldrh	r3, [r7, #16]
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 8098 	beq.w	80042b0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004184:	8a3a      	ldrh	r2, [r7, #16]
 8004186:	429a      	cmp	r2, r3
 8004188:	f080 8092 	bcs.w	80042b0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	8a3a      	ldrh	r2, [r7, #16]
 8004190:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	2b20      	cmp	r3, #32
 800419a:	d02b      	beq.n	80041f4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041aa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695a      	ldr	r2, [r3, #20]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0201 	bic.w	r2, r2, #1
 80041ba:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ca:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0210 	bic.w	r2, r2, #16
 80041e8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fd fe63 	bl	8001eba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	b29b      	uxth	r3, r3
 8004202:	4619      	mov	r1, r3
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f86d 	bl	80042e4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800420a:	e051      	b.n	80042b0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004214:	b29b      	uxth	r3, r3
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d047      	beq.n	80042b4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004224:	8a7b      	ldrh	r3, [r7, #18]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d044      	beq.n	80042b4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004238:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695a      	ldr	r2, [r3, #20]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0201 	bic.w	r2, r2, #1
 8004248:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0210 	bic.w	r2, r2, #16
 8004266:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004268:	8a7b      	ldrh	r3, [r7, #18]
 800426a:	4619      	mov	r1, r3
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f839 	bl	80042e4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004272:	e01f      	b.n	80042b4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <HAL_UART_IRQHandler+0x324>
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f8f9 	bl	8004480 <UART_Transmit_IT>
    return;
 800428e:	e012      	b.n	80042b6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00d      	beq.n	80042b6 <HAL_UART_IRQHandler+0x34a>
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d008      	beq.n	80042b6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f93a 	bl	800451e <UART_EndTransmit_IT>
    return;
 80042aa:	e004      	b.n	80042b6 <HAL_UART_IRQHandler+0x34a>
    return;
 80042ac:	bf00      	nop
 80042ae:	e002      	b.n	80042b6 <HAL_UART_IRQHandler+0x34a>
      return;
 80042b0:	bf00      	nop
 80042b2:	e000      	b.n	80042b6 <HAL_UART_IRQHandler+0x34a>
      return;
 80042b4:	bf00      	nop
  }
}
 80042b6:	3728      	adds	r7, #40	; 0x28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	08004459 	.word	0x08004459

080042c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr

080042d2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr

080042e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bc80      	pop	{r7}
 80042f8:	4770      	bx	lr

080042fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b084      	sub	sp, #16
 80042fe:	af00      	add	r7, sp, #0
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	603b      	str	r3, [r7, #0]
 8004306:	4613      	mov	r3, r2
 8004308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800430a:	e02c      	b.n	8004366 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004312:	d028      	beq.n	8004366 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d007      	beq.n	800432a <UART_WaitOnFlagUntilTimeout+0x30>
 800431a:	f7fd fc93 	bl	8001c44 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	429a      	cmp	r2, r3
 8004328:	d21d      	bcs.n	8004366 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004338:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695a      	ldr	r2, [r3, #20]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0201 	bic.w	r2, r2, #1
 8004348:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e00f      	b.n	8004386 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4013      	ands	r3, r2
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	429a      	cmp	r2, r3
 8004374:	bf0c      	ite	eq
 8004376:	2301      	moveq	r3, #1
 8004378:	2300      	movne	r3, #0
 800437a:	b2db      	uxtb	r3, r3
 800437c:	461a      	mov	r2, r3
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	429a      	cmp	r2, r3
 8004382:	d0c3      	beq.n	800430c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800438e:	b480      	push	{r7}
 8004390:	b085      	sub	sp, #20
 8004392:	af00      	add	r7, sp, #0
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	4613      	mov	r3, r2
 800439a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	88fa      	ldrh	r2, [r7, #6]
 80043a6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	88fa      	ldrh	r2, [r7, #6]
 80043ac:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2222      	movs	r2, #34	; 0x22
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043d2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0220 	orr.w	r2, r2, #32
 80043f2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr

08004400 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004416:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695a      	ldr	r2, [r3, #20]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0201 	bic.w	r2, r2, #1
 8004426:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442c:	2b01      	cmp	r3, #1
 800442e:	d107      	bne.n	8004440 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0210 	bic.w	r2, r2, #16
 800443e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr

08004458 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f7ff ff2d 	bl	80042d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004478:	bf00      	nop
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b21      	cmp	r3, #33	; 0x21
 8004492:	d13e      	bne.n	8004512 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800449c:	d114      	bne.n	80044c8 <UART_Transmit_IT+0x48>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d110      	bne.n	80044c8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	461a      	mov	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	1c9a      	adds	r2, r3, #2
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	621a      	str	r2, [r3, #32]
 80044c6:	e008      	b.n	80044da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	1c59      	adds	r1, r3, #1
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6211      	str	r1, [r2, #32]
 80044d2:	781a      	ldrb	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	4619      	mov	r1, r3
 80044e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10f      	bne.n	800450e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800450c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	e000      	b.n	8004514 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004512:	2302      	movs	r3, #2
  }
}
 8004514:	4618      	mov	r0, r3
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	bc80      	pop	{r7}
 800451c:	4770      	bx	lr

0800451e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b082      	sub	sp, #8
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004534:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2220      	movs	r2, #32
 800453a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff febe 	bl	80042c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b086      	sub	sp, #24
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b22      	cmp	r3, #34	; 0x22
 8004560:	f040 8099 	bne.w	8004696 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456c:	d117      	bne.n	800459e <UART_Receive_IT+0x50>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d113      	bne.n	800459e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004576:	2300      	movs	r3, #0
 8004578:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	b29b      	uxth	r3, r3
 8004588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800458c:	b29a      	uxth	r2, r3
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004596:	1c9a      	adds	r2, r3, #2
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	629a      	str	r2, [r3, #40]	; 0x28
 800459c:	e026      	b.n	80045ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b0:	d007      	beq.n	80045c2 <UART_Receive_IT+0x74>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10a      	bne.n	80045d0 <UART_Receive_IT+0x82>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d106      	bne.n	80045d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	701a      	strb	r2, [r3, #0]
 80045ce:	e008      	b.n	80045e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	4619      	mov	r1, r3
 80045fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d148      	bne.n	8004692 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0220 	bic.w	r2, r2, #32
 800460e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800461e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695a      	ldr	r2, [r3, #20]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0201 	bic.w	r2, r2, #1
 800462e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2220      	movs	r2, #32
 8004634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463c:	2b01      	cmp	r3, #1
 800463e:	d123      	bne.n	8004688 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0210 	bic.w	r2, r2, #16
 8004654:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0310 	and.w	r3, r3, #16
 8004660:	2b10      	cmp	r3, #16
 8004662:	d10a      	bne.n	800467a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800467e:	4619      	mov	r1, r3
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff fe2f 	bl	80042e4 <HAL_UARTEx_RxEventCallback>
 8004686:	e002      	b.n	800468e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7fc fc15 	bl	8000eb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	e002      	b.n	8004698 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	e000      	b.n	8004698 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004696:	2302      	movs	r3, #2
  }
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80046da:	f023 030c 	bic.w	r3, r3, #12
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6812      	ldr	r2, [r2, #0]
 80046e2:	68b9      	ldr	r1, [r7, #8]
 80046e4:	430b      	orrs	r3, r1
 80046e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	699a      	ldr	r2, [r3, #24]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a2c      	ldr	r2, [pc, #176]	; (80047b4 <UART_SetConfig+0x114>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d103      	bne.n	8004710 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004708:	f7fe fe70 	bl	80033ec <HAL_RCC_GetPCLK2Freq>
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	e002      	b.n	8004716 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004710:	f7fe fe58 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
 8004714:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	009a      	lsls	r2, r3, #2
 8004720:	441a      	add	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	fbb2 f3f3 	udiv	r3, r2, r3
 800472c:	4a22      	ldr	r2, [pc, #136]	; (80047b8 <UART_SetConfig+0x118>)
 800472e:	fba2 2303 	umull	r2, r3, r2, r3
 8004732:	095b      	lsrs	r3, r3, #5
 8004734:	0119      	lsls	r1, r3, #4
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	009a      	lsls	r2, r3, #2
 8004740:	441a      	add	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	fbb2 f2f3 	udiv	r2, r2, r3
 800474c:	4b1a      	ldr	r3, [pc, #104]	; (80047b8 <UART_SetConfig+0x118>)
 800474e:	fba3 0302 	umull	r0, r3, r3, r2
 8004752:	095b      	lsrs	r3, r3, #5
 8004754:	2064      	movs	r0, #100	; 0x64
 8004756:	fb00 f303 	mul.w	r3, r0, r3
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	3332      	adds	r3, #50	; 0x32
 8004760:	4a15      	ldr	r2, [pc, #84]	; (80047b8 <UART_SetConfig+0x118>)
 8004762:	fba2 2303 	umull	r2, r3, r2, r3
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800476c:	4419      	add	r1, r3
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4613      	mov	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	009a      	lsls	r2, r3, #2
 8004778:	441a      	add	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	fbb2 f2f3 	udiv	r2, r2, r3
 8004784:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <UART_SetConfig+0x118>)
 8004786:	fba3 0302 	umull	r0, r3, r3, r2
 800478a:	095b      	lsrs	r3, r3, #5
 800478c:	2064      	movs	r0, #100	; 0x64
 800478e:	fb00 f303 	mul.w	r3, r0, r3
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	3332      	adds	r3, #50	; 0x32
 8004798:	4a07      	ldr	r2, [pc, #28]	; (80047b8 <UART_SetConfig+0x118>)
 800479a:	fba2 2303 	umull	r2, r3, r2, r3
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	f003 020f 	and.w	r2, r3, #15
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	440a      	add	r2, r1
 80047aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80047ac:	bf00      	nop
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40013800 	.word	0x40013800
 80047b8:	51eb851f 	.word	0x51eb851f

080047bc <__errno>:
 80047bc:	4b01      	ldr	r3, [pc, #4]	; (80047c4 <__errno+0x8>)
 80047be:	6818      	ldr	r0, [r3, #0]
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	20000028 	.word	0x20000028

080047c8 <__libc_init_array>:
 80047c8:	b570      	push	{r4, r5, r6, lr}
 80047ca:	2600      	movs	r6, #0
 80047cc:	4d0c      	ldr	r5, [pc, #48]	; (8004800 <__libc_init_array+0x38>)
 80047ce:	4c0d      	ldr	r4, [pc, #52]	; (8004804 <__libc_init_array+0x3c>)
 80047d0:	1b64      	subs	r4, r4, r5
 80047d2:	10a4      	asrs	r4, r4, #2
 80047d4:	42a6      	cmp	r6, r4
 80047d6:	d109      	bne.n	80047ec <__libc_init_array+0x24>
 80047d8:	f000 fc9c 	bl	8005114 <_init>
 80047dc:	2600      	movs	r6, #0
 80047de:	4d0a      	ldr	r5, [pc, #40]	; (8004808 <__libc_init_array+0x40>)
 80047e0:	4c0a      	ldr	r4, [pc, #40]	; (800480c <__libc_init_array+0x44>)
 80047e2:	1b64      	subs	r4, r4, r5
 80047e4:	10a4      	asrs	r4, r4, #2
 80047e6:	42a6      	cmp	r6, r4
 80047e8:	d105      	bne.n	80047f6 <__libc_init_array+0x2e>
 80047ea:	bd70      	pop	{r4, r5, r6, pc}
 80047ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80047f0:	4798      	blx	r3
 80047f2:	3601      	adds	r6, #1
 80047f4:	e7ee      	b.n	80047d4 <__libc_init_array+0xc>
 80047f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047fa:	4798      	blx	r3
 80047fc:	3601      	adds	r6, #1
 80047fe:	e7f2      	b.n	80047e6 <__libc_init_array+0x1e>
 8004800:	08005234 	.word	0x08005234
 8004804:	08005234 	.word	0x08005234
 8004808:	08005234 	.word	0x08005234
 800480c:	08005238 	.word	0x08005238

08004810 <memset>:
 8004810:	4603      	mov	r3, r0
 8004812:	4402      	add	r2, r0
 8004814:	4293      	cmp	r3, r2
 8004816:	d100      	bne.n	800481a <memset+0xa>
 8004818:	4770      	bx	lr
 800481a:	f803 1b01 	strb.w	r1, [r3], #1
 800481e:	e7f9      	b.n	8004814 <memset+0x4>

08004820 <siprintf>:
 8004820:	b40e      	push	{r1, r2, r3}
 8004822:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004826:	b500      	push	{lr}
 8004828:	b09c      	sub	sp, #112	; 0x70
 800482a:	ab1d      	add	r3, sp, #116	; 0x74
 800482c:	9002      	str	r0, [sp, #8]
 800482e:	9006      	str	r0, [sp, #24]
 8004830:	9107      	str	r1, [sp, #28]
 8004832:	9104      	str	r1, [sp, #16]
 8004834:	4808      	ldr	r0, [pc, #32]	; (8004858 <siprintf+0x38>)
 8004836:	4909      	ldr	r1, [pc, #36]	; (800485c <siprintf+0x3c>)
 8004838:	f853 2b04 	ldr.w	r2, [r3], #4
 800483c:	9105      	str	r1, [sp, #20]
 800483e:	6800      	ldr	r0, [r0, #0]
 8004840:	a902      	add	r1, sp, #8
 8004842:	9301      	str	r3, [sp, #4]
 8004844:	f000 f868 	bl	8004918 <_svfiprintf_r>
 8004848:	2200      	movs	r2, #0
 800484a:	9b02      	ldr	r3, [sp, #8]
 800484c:	701a      	strb	r2, [r3, #0]
 800484e:	b01c      	add	sp, #112	; 0x70
 8004850:	f85d eb04 	ldr.w	lr, [sp], #4
 8004854:	b003      	add	sp, #12
 8004856:	4770      	bx	lr
 8004858:	20000028 	.word	0x20000028
 800485c:	ffff0208 	.word	0xffff0208

08004860 <__ssputs_r>:
 8004860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004864:	688e      	ldr	r6, [r1, #8]
 8004866:	4682      	mov	sl, r0
 8004868:	429e      	cmp	r6, r3
 800486a:	460c      	mov	r4, r1
 800486c:	4690      	mov	r8, r2
 800486e:	461f      	mov	r7, r3
 8004870:	d838      	bhi.n	80048e4 <__ssputs_r+0x84>
 8004872:	898a      	ldrh	r2, [r1, #12]
 8004874:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004878:	d032      	beq.n	80048e0 <__ssputs_r+0x80>
 800487a:	6825      	ldr	r5, [r4, #0]
 800487c:	6909      	ldr	r1, [r1, #16]
 800487e:	3301      	adds	r3, #1
 8004880:	eba5 0901 	sub.w	r9, r5, r1
 8004884:	6965      	ldr	r5, [r4, #20]
 8004886:	444b      	add	r3, r9
 8004888:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800488c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004890:	106d      	asrs	r5, r5, #1
 8004892:	429d      	cmp	r5, r3
 8004894:	bf38      	it	cc
 8004896:	461d      	movcc	r5, r3
 8004898:	0553      	lsls	r3, r2, #21
 800489a:	d531      	bpl.n	8004900 <__ssputs_r+0xa0>
 800489c:	4629      	mov	r1, r5
 800489e:	f000 fb6f 	bl	8004f80 <_malloc_r>
 80048a2:	4606      	mov	r6, r0
 80048a4:	b950      	cbnz	r0, 80048bc <__ssputs_r+0x5c>
 80048a6:	230c      	movs	r3, #12
 80048a8:	f04f 30ff 	mov.w	r0, #4294967295
 80048ac:	f8ca 3000 	str.w	r3, [sl]
 80048b0:	89a3      	ldrh	r3, [r4, #12]
 80048b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048b6:	81a3      	strh	r3, [r4, #12]
 80048b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048bc:	464a      	mov	r2, r9
 80048be:	6921      	ldr	r1, [r4, #16]
 80048c0:	f000 face 	bl	8004e60 <memcpy>
 80048c4:	89a3      	ldrh	r3, [r4, #12]
 80048c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ce:	81a3      	strh	r3, [r4, #12]
 80048d0:	6126      	str	r6, [r4, #16]
 80048d2:	444e      	add	r6, r9
 80048d4:	6026      	str	r6, [r4, #0]
 80048d6:	463e      	mov	r6, r7
 80048d8:	6165      	str	r5, [r4, #20]
 80048da:	eba5 0509 	sub.w	r5, r5, r9
 80048de:	60a5      	str	r5, [r4, #8]
 80048e0:	42be      	cmp	r6, r7
 80048e2:	d900      	bls.n	80048e6 <__ssputs_r+0x86>
 80048e4:	463e      	mov	r6, r7
 80048e6:	4632      	mov	r2, r6
 80048e8:	4641      	mov	r1, r8
 80048ea:	6820      	ldr	r0, [r4, #0]
 80048ec:	f000 fac6 	bl	8004e7c <memmove>
 80048f0:	68a3      	ldr	r3, [r4, #8]
 80048f2:	2000      	movs	r0, #0
 80048f4:	1b9b      	subs	r3, r3, r6
 80048f6:	60a3      	str	r3, [r4, #8]
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	4433      	add	r3, r6
 80048fc:	6023      	str	r3, [r4, #0]
 80048fe:	e7db      	b.n	80048b8 <__ssputs_r+0x58>
 8004900:	462a      	mov	r2, r5
 8004902:	f000 fbb1 	bl	8005068 <_realloc_r>
 8004906:	4606      	mov	r6, r0
 8004908:	2800      	cmp	r0, #0
 800490a:	d1e1      	bne.n	80048d0 <__ssputs_r+0x70>
 800490c:	4650      	mov	r0, sl
 800490e:	6921      	ldr	r1, [r4, #16]
 8004910:	f000 face 	bl	8004eb0 <_free_r>
 8004914:	e7c7      	b.n	80048a6 <__ssputs_r+0x46>
	...

08004918 <_svfiprintf_r>:
 8004918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800491c:	4698      	mov	r8, r3
 800491e:	898b      	ldrh	r3, [r1, #12]
 8004920:	4607      	mov	r7, r0
 8004922:	061b      	lsls	r3, r3, #24
 8004924:	460d      	mov	r5, r1
 8004926:	4614      	mov	r4, r2
 8004928:	b09d      	sub	sp, #116	; 0x74
 800492a:	d50e      	bpl.n	800494a <_svfiprintf_r+0x32>
 800492c:	690b      	ldr	r3, [r1, #16]
 800492e:	b963      	cbnz	r3, 800494a <_svfiprintf_r+0x32>
 8004930:	2140      	movs	r1, #64	; 0x40
 8004932:	f000 fb25 	bl	8004f80 <_malloc_r>
 8004936:	6028      	str	r0, [r5, #0]
 8004938:	6128      	str	r0, [r5, #16]
 800493a:	b920      	cbnz	r0, 8004946 <_svfiprintf_r+0x2e>
 800493c:	230c      	movs	r3, #12
 800493e:	603b      	str	r3, [r7, #0]
 8004940:	f04f 30ff 	mov.w	r0, #4294967295
 8004944:	e0d1      	b.n	8004aea <_svfiprintf_r+0x1d2>
 8004946:	2340      	movs	r3, #64	; 0x40
 8004948:	616b      	str	r3, [r5, #20]
 800494a:	2300      	movs	r3, #0
 800494c:	9309      	str	r3, [sp, #36]	; 0x24
 800494e:	2320      	movs	r3, #32
 8004950:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004954:	2330      	movs	r3, #48	; 0x30
 8004956:	f04f 0901 	mov.w	r9, #1
 800495a:	f8cd 800c 	str.w	r8, [sp, #12]
 800495e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004b04 <_svfiprintf_r+0x1ec>
 8004962:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004966:	4623      	mov	r3, r4
 8004968:	469a      	mov	sl, r3
 800496a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800496e:	b10a      	cbz	r2, 8004974 <_svfiprintf_r+0x5c>
 8004970:	2a25      	cmp	r2, #37	; 0x25
 8004972:	d1f9      	bne.n	8004968 <_svfiprintf_r+0x50>
 8004974:	ebba 0b04 	subs.w	fp, sl, r4
 8004978:	d00b      	beq.n	8004992 <_svfiprintf_r+0x7a>
 800497a:	465b      	mov	r3, fp
 800497c:	4622      	mov	r2, r4
 800497e:	4629      	mov	r1, r5
 8004980:	4638      	mov	r0, r7
 8004982:	f7ff ff6d 	bl	8004860 <__ssputs_r>
 8004986:	3001      	adds	r0, #1
 8004988:	f000 80aa 	beq.w	8004ae0 <_svfiprintf_r+0x1c8>
 800498c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800498e:	445a      	add	r2, fp
 8004990:	9209      	str	r2, [sp, #36]	; 0x24
 8004992:	f89a 3000 	ldrb.w	r3, [sl]
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 80a2 	beq.w	8004ae0 <_svfiprintf_r+0x1c8>
 800499c:	2300      	movs	r3, #0
 800499e:	f04f 32ff 	mov.w	r2, #4294967295
 80049a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049a6:	f10a 0a01 	add.w	sl, sl, #1
 80049aa:	9304      	str	r3, [sp, #16]
 80049ac:	9307      	str	r3, [sp, #28]
 80049ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049b2:	931a      	str	r3, [sp, #104]	; 0x68
 80049b4:	4654      	mov	r4, sl
 80049b6:	2205      	movs	r2, #5
 80049b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049bc:	4851      	ldr	r0, [pc, #324]	; (8004b04 <_svfiprintf_r+0x1ec>)
 80049be:	f000 fa41 	bl	8004e44 <memchr>
 80049c2:	9a04      	ldr	r2, [sp, #16]
 80049c4:	b9d8      	cbnz	r0, 80049fe <_svfiprintf_r+0xe6>
 80049c6:	06d0      	lsls	r0, r2, #27
 80049c8:	bf44      	itt	mi
 80049ca:	2320      	movmi	r3, #32
 80049cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049d0:	0711      	lsls	r1, r2, #28
 80049d2:	bf44      	itt	mi
 80049d4:	232b      	movmi	r3, #43	; 0x2b
 80049d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049da:	f89a 3000 	ldrb.w	r3, [sl]
 80049de:	2b2a      	cmp	r3, #42	; 0x2a
 80049e0:	d015      	beq.n	8004a0e <_svfiprintf_r+0xf6>
 80049e2:	4654      	mov	r4, sl
 80049e4:	2000      	movs	r0, #0
 80049e6:	f04f 0c0a 	mov.w	ip, #10
 80049ea:	9a07      	ldr	r2, [sp, #28]
 80049ec:	4621      	mov	r1, r4
 80049ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049f2:	3b30      	subs	r3, #48	; 0x30
 80049f4:	2b09      	cmp	r3, #9
 80049f6:	d94e      	bls.n	8004a96 <_svfiprintf_r+0x17e>
 80049f8:	b1b0      	cbz	r0, 8004a28 <_svfiprintf_r+0x110>
 80049fa:	9207      	str	r2, [sp, #28]
 80049fc:	e014      	b.n	8004a28 <_svfiprintf_r+0x110>
 80049fe:	eba0 0308 	sub.w	r3, r0, r8
 8004a02:	fa09 f303 	lsl.w	r3, r9, r3
 8004a06:	4313      	orrs	r3, r2
 8004a08:	46a2      	mov	sl, r4
 8004a0a:	9304      	str	r3, [sp, #16]
 8004a0c:	e7d2      	b.n	80049b4 <_svfiprintf_r+0x9c>
 8004a0e:	9b03      	ldr	r3, [sp, #12]
 8004a10:	1d19      	adds	r1, r3, #4
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	9103      	str	r1, [sp, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	bfbb      	ittet	lt
 8004a1a:	425b      	neglt	r3, r3
 8004a1c:	f042 0202 	orrlt.w	r2, r2, #2
 8004a20:	9307      	strge	r3, [sp, #28]
 8004a22:	9307      	strlt	r3, [sp, #28]
 8004a24:	bfb8      	it	lt
 8004a26:	9204      	strlt	r2, [sp, #16]
 8004a28:	7823      	ldrb	r3, [r4, #0]
 8004a2a:	2b2e      	cmp	r3, #46	; 0x2e
 8004a2c:	d10c      	bne.n	8004a48 <_svfiprintf_r+0x130>
 8004a2e:	7863      	ldrb	r3, [r4, #1]
 8004a30:	2b2a      	cmp	r3, #42	; 0x2a
 8004a32:	d135      	bne.n	8004aa0 <_svfiprintf_r+0x188>
 8004a34:	9b03      	ldr	r3, [sp, #12]
 8004a36:	3402      	adds	r4, #2
 8004a38:	1d1a      	adds	r2, r3, #4
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	9203      	str	r2, [sp, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	bfb8      	it	lt
 8004a42:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a46:	9305      	str	r3, [sp, #20]
 8004a48:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004b08 <_svfiprintf_r+0x1f0>
 8004a4c:	2203      	movs	r2, #3
 8004a4e:	4650      	mov	r0, sl
 8004a50:	7821      	ldrb	r1, [r4, #0]
 8004a52:	f000 f9f7 	bl	8004e44 <memchr>
 8004a56:	b140      	cbz	r0, 8004a6a <_svfiprintf_r+0x152>
 8004a58:	2340      	movs	r3, #64	; 0x40
 8004a5a:	eba0 000a 	sub.w	r0, r0, sl
 8004a5e:	fa03 f000 	lsl.w	r0, r3, r0
 8004a62:	9b04      	ldr	r3, [sp, #16]
 8004a64:	3401      	adds	r4, #1
 8004a66:	4303      	orrs	r3, r0
 8004a68:	9304      	str	r3, [sp, #16]
 8004a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a6e:	2206      	movs	r2, #6
 8004a70:	4826      	ldr	r0, [pc, #152]	; (8004b0c <_svfiprintf_r+0x1f4>)
 8004a72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a76:	f000 f9e5 	bl	8004e44 <memchr>
 8004a7a:	2800      	cmp	r0, #0
 8004a7c:	d038      	beq.n	8004af0 <_svfiprintf_r+0x1d8>
 8004a7e:	4b24      	ldr	r3, [pc, #144]	; (8004b10 <_svfiprintf_r+0x1f8>)
 8004a80:	bb1b      	cbnz	r3, 8004aca <_svfiprintf_r+0x1b2>
 8004a82:	9b03      	ldr	r3, [sp, #12]
 8004a84:	3307      	adds	r3, #7
 8004a86:	f023 0307 	bic.w	r3, r3, #7
 8004a8a:	3308      	adds	r3, #8
 8004a8c:	9303      	str	r3, [sp, #12]
 8004a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a90:	4433      	add	r3, r6
 8004a92:	9309      	str	r3, [sp, #36]	; 0x24
 8004a94:	e767      	b.n	8004966 <_svfiprintf_r+0x4e>
 8004a96:	460c      	mov	r4, r1
 8004a98:	2001      	movs	r0, #1
 8004a9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a9e:	e7a5      	b.n	80049ec <_svfiprintf_r+0xd4>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f04f 0c0a 	mov.w	ip, #10
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	3401      	adds	r4, #1
 8004aaa:	9305      	str	r3, [sp, #20]
 8004aac:	4620      	mov	r0, r4
 8004aae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ab2:	3a30      	subs	r2, #48	; 0x30
 8004ab4:	2a09      	cmp	r2, #9
 8004ab6:	d903      	bls.n	8004ac0 <_svfiprintf_r+0x1a8>
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0c5      	beq.n	8004a48 <_svfiprintf_r+0x130>
 8004abc:	9105      	str	r1, [sp, #20]
 8004abe:	e7c3      	b.n	8004a48 <_svfiprintf_r+0x130>
 8004ac0:	4604      	mov	r4, r0
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ac8:	e7f0      	b.n	8004aac <_svfiprintf_r+0x194>
 8004aca:	ab03      	add	r3, sp, #12
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	462a      	mov	r2, r5
 8004ad0:	4638      	mov	r0, r7
 8004ad2:	4b10      	ldr	r3, [pc, #64]	; (8004b14 <_svfiprintf_r+0x1fc>)
 8004ad4:	a904      	add	r1, sp, #16
 8004ad6:	f3af 8000 	nop.w
 8004ada:	1c42      	adds	r2, r0, #1
 8004adc:	4606      	mov	r6, r0
 8004ade:	d1d6      	bne.n	8004a8e <_svfiprintf_r+0x176>
 8004ae0:	89ab      	ldrh	r3, [r5, #12]
 8004ae2:	065b      	lsls	r3, r3, #25
 8004ae4:	f53f af2c 	bmi.w	8004940 <_svfiprintf_r+0x28>
 8004ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004aea:	b01d      	add	sp, #116	; 0x74
 8004aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004af0:	ab03      	add	r3, sp, #12
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	462a      	mov	r2, r5
 8004af6:	4638      	mov	r0, r7
 8004af8:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <_svfiprintf_r+0x1fc>)
 8004afa:	a904      	add	r1, sp, #16
 8004afc:	f000 f87c 	bl	8004bf8 <_printf_i>
 8004b00:	e7eb      	b.n	8004ada <_svfiprintf_r+0x1c2>
 8004b02:	bf00      	nop
 8004b04:	08005200 	.word	0x08005200
 8004b08:	08005206 	.word	0x08005206
 8004b0c:	0800520a 	.word	0x0800520a
 8004b10:	00000000 	.word	0x00000000
 8004b14:	08004861 	.word	0x08004861

08004b18 <_printf_common>:
 8004b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b1c:	4616      	mov	r6, r2
 8004b1e:	4699      	mov	r9, r3
 8004b20:	688a      	ldr	r2, [r1, #8]
 8004b22:	690b      	ldr	r3, [r1, #16]
 8004b24:	4607      	mov	r7, r0
 8004b26:	4293      	cmp	r3, r2
 8004b28:	bfb8      	it	lt
 8004b2a:	4613      	movlt	r3, r2
 8004b2c:	6033      	str	r3, [r6, #0]
 8004b2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b32:	460c      	mov	r4, r1
 8004b34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b38:	b10a      	cbz	r2, 8004b3e <_printf_common+0x26>
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	6033      	str	r3, [r6, #0]
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	0699      	lsls	r1, r3, #26
 8004b42:	bf42      	ittt	mi
 8004b44:	6833      	ldrmi	r3, [r6, #0]
 8004b46:	3302      	addmi	r3, #2
 8004b48:	6033      	strmi	r3, [r6, #0]
 8004b4a:	6825      	ldr	r5, [r4, #0]
 8004b4c:	f015 0506 	ands.w	r5, r5, #6
 8004b50:	d106      	bne.n	8004b60 <_printf_common+0x48>
 8004b52:	f104 0a19 	add.w	sl, r4, #25
 8004b56:	68e3      	ldr	r3, [r4, #12]
 8004b58:	6832      	ldr	r2, [r6, #0]
 8004b5a:	1a9b      	subs	r3, r3, r2
 8004b5c:	42ab      	cmp	r3, r5
 8004b5e:	dc28      	bgt.n	8004bb2 <_printf_common+0x9a>
 8004b60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b64:	1e13      	subs	r3, r2, #0
 8004b66:	6822      	ldr	r2, [r4, #0]
 8004b68:	bf18      	it	ne
 8004b6a:	2301      	movne	r3, #1
 8004b6c:	0692      	lsls	r2, r2, #26
 8004b6e:	d42d      	bmi.n	8004bcc <_printf_common+0xb4>
 8004b70:	4649      	mov	r1, r9
 8004b72:	4638      	mov	r0, r7
 8004b74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b78:	47c0      	blx	r8
 8004b7a:	3001      	adds	r0, #1
 8004b7c:	d020      	beq.n	8004bc0 <_printf_common+0xa8>
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	68e5      	ldr	r5, [r4, #12]
 8004b82:	f003 0306 	and.w	r3, r3, #6
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	bf18      	it	ne
 8004b8a:	2500      	movne	r5, #0
 8004b8c:	6832      	ldr	r2, [r6, #0]
 8004b8e:	f04f 0600 	mov.w	r6, #0
 8004b92:	68a3      	ldr	r3, [r4, #8]
 8004b94:	bf08      	it	eq
 8004b96:	1aad      	subeq	r5, r5, r2
 8004b98:	6922      	ldr	r2, [r4, #16]
 8004b9a:	bf08      	it	eq
 8004b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	bfc4      	itt	gt
 8004ba4:	1a9b      	subgt	r3, r3, r2
 8004ba6:	18ed      	addgt	r5, r5, r3
 8004ba8:	341a      	adds	r4, #26
 8004baa:	42b5      	cmp	r5, r6
 8004bac:	d11a      	bne.n	8004be4 <_printf_common+0xcc>
 8004bae:	2000      	movs	r0, #0
 8004bb0:	e008      	b.n	8004bc4 <_printf_common+0xac>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	4652      	mov	r2, sl
 8004bb6:	4649      	mov	r1, r9
 8004bb8:	4638      	mov	r0, r7
 8004bba:	47c0      	blx	r8
 8004bbc:	3001      	adds	r0, #1
 8004bbe:	d103      	bne.n	8004bc8 <_printf_common+0xb0>
 8004bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc8:	3501      	adds	r5, #1
 8004bca:	e7c4      	b.n	8004b56 <_printf_common+0x3e>
 8004bcc:	2030      	movs	r0, #48	; 0x30
 8004bce:	18e1      	adds	r1, r4, r3
 8004bd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bda:	4422      	add	r2, r4
 8004bdc:	3302      	adds	r3, #2
 8004bde:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004be2:	e7c5      	b.n	8004b70 <_printf_common+0x58>
 8004be4:	2301      	movs	r3, #1
 8004be6:	4622      	mov	r2, r4
 8004be8:	4649      	mov	r1, r9
 8004bea:	4638      	mov	r0, r7
 8004bec:	47c0      	blx	r8
 8004bee:	3001      	adds	r0, #1
 8004bf0:	d0e6      	beq.n	8004bc0 <_printf_common+0xa8>
 8004bf2:	3601      	adds	r6, #1
 8004bf4:	e7d9      	b.n	8004baa <_printf_common+0x92>
	...

08004bf8 <_printf_i>:
 8004bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bfc:	7e0f      	ldrb	r7, [r1, #24]
 8004bfe:	4691      	mov	r9, r2
 8004c00:	2f78      	cmp	r7, #120	; 0x78
 8004c02:	4680      	mov	r8, r0
 8004c04:	460c      	mov	r4, r1
 8004c06:	469a      	mov	sl, r3
 8004c08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c0e:	d807      	bhi.n	8004c20 <_printf_i+0x28>
 8004c10:	2f62      	cmp	r7, #98	; 0x62
 8004c12:	d80a      	bhi.n	8004c2a <_printf_i+0x32>
 8004c14:	2f00      	cmp	r7, #0
 8004c16:	f000 80d9 	beq.w	8004dcc <_printf_i+0x1d4>
 8004c1a:	2f58      	cmp	r7, #88	; 0x58
 8004c1c:	f000 80a4 	beq.w	8004d68 <_printf_i+0x170>
 8004c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c28:	e03a      	b.n	8004ca0 <_printf_i+0xa8>
 8004c2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c2e:	2b15      	cmp	r3, #21
 8004c30:	d8f6      	bhi.n	8004c20 <_printf_i+0x28>
 8004c32:	a101      	add	r1, pc, #4	; (adr r1, 8004c38 <_printf_i+0x40>)
 8004c34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c38:	08004c91 	.word	0x08004c91
 8004c3c:	08004ca5 	.word	0x08004ca5
 8004c40:	08004c21 	.word	0x08004c21
 8004c44:	08004c21 	.word	0x08004c21
 8004c48:	08004c21 	.word	0x08004c21
 8004c4c:	08004c21 	.word	0x08004c21
 8004c50:	08004ca5 	.word	0x08004ca5
 8004c54:	08004c21 	.word	0x08004c21
 8004c58:	08004c21 	.word	0x08004c21
 8004c5c:	08004c21 	.word	0x08004c21
 8004c60:	08004c21 	.word	0x08004c21
 8004c64:	08004db3 	.word	0x08004db3
 8004c68:	08004cd5 	.word	0x08004cd5
 8004c6c:	08004d95 	.word	0x08004d95
 8004c70:	08004c21 	.word	0x08004c21
 8004c74:	08004c21 	.word	0x08004c21
 8004c78:	08004dd5 	.word	0x08004dd5
 8004c7c:	08004c21 	.word	0x08004c21
 8004c80:	08004cd5 	.word	0x08004cd5
 8004c84:	08004c21 	.word	0x08004c21
 8004c88:	08004c21 	.word	0x08004c21
 8004c8c:	08004d9d 	.word	0x08004d9d
 8004c90:	682b      	ldr	r3, [r5, #0]
 8004c92:	1d1a      	adds	r2, r3, #4
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	602a      	str	r2, [r5, #0]
 8004c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0a4      	b.n	8004dee <_printf_i+0x1f6>
 8004ca4:	6820      	ldr	r0, [r4, #0]
 8004ca6:	6829      	ldr	r1, [r5, #0]
 8004ca8:	0606      	lsls	r6, r0, #24
 8004caa:	f101 0304 	add.w	r3, r1, #4
 8004cae:	d50a      	bpl.n	8004cc6 <_printf_i+0xce>
 8004cb0:	680e      	ldr	r6, [r1, #0]
 8004cb2:	602b      	str	r3, [r5, #0]
 8004cb4:	2e00      	cmp	r6, #0
 8004cb6:	da03      	bge.n	8004cc0 <_printf_i+0xc8>
 8004cb8:	232d      	movs	r3, #45	; 0x2d
 8004cba:	4276      	negs	r6, r6
 8004cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cc0:	230a      	movs	r3, #10
 8004cc2:	485e      	ldr	r0, [pc, #376]	; (8004e3c <_printf_i+0x244>)
 8004cc4:	e019      	b.n	8004cfa <_printf_i+0x102>
 8004cc6:	680e      	ldr	r6, [r1, #0]
 8004cc8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ccc:	602b      	str	r3, [r5, #0]
 8004cce:	bf18      	it	ne
 8004cd0:	b236      	sxthne	r6, r6
 8004cd2:	e7ef      	b.n	8004cb4 <_printf_i+0xbc>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	6820      	ldr	r0, [r4, #0]
 8004cd8:	1d19      	adds	r1, r3, #4
 8004cda:	6029      	str	r1, [r5, #0]
 8004cdc:	0601      	lsls	r1, r0, #24
 8004cde:	d501      	bpl.n	8004ce4 <_printf_i+0xec>
 8004ce0:	681e      	ldr	r6, [r3, #0]
 8004ce2:	e002      	b.n	8004cea <_printf_i+0xf2>
 8004ce4:	0646      	lsls	r6, r0, #25
 8004ce6:	d5fb      	bpl.n	8004ce0 <_printf_i+0xe8>
 8004ce8:	881e      	ldrh	r6, [r3, #0]
 8004cea:	2f6f      	cmp	r7, #111	; 0x6f
 8004cec:	bf0c      	ite	eq
 8004cee:	2308      	moveq	r3, #8
 8004cf0:	230a      	movne	r3, #10
 8004cf2:	4852      	ldr	r0, [pc, #328]	; (8004e3c <_printf_i+0x244>)
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cfa:	6865      	ldr	r5, [r4, #4]
 8004cfc:	2d00      	cmp	r5, #0
 8004cfe:	bfa8      	it	ge
 8004d00:	6821      	ldrge	r1, [r4, #0]
 8004d02:	60a5      	str	r5, [r4, #8]
 8004d04:	bfa4      	itt	ge
 8004d06:	f021 0104 	bicge.w	r1, r1, #4
 8004d0a:	6021      	strge	r1, [r4, #0]
 8004d0c:	b90e      	cbnz	r6, 8004d12 <_printf_i+0x11a>
 8004d0e:	2d00      	cmp	r5, #0
 8004d10:	d04d      	beq.n	8004dae <_printf_i+0x1b6>
 8004d12:	4615      	mov	r5, r2
 8004d14:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d18:	fb03 6711 	mls	r7, r3, r1, r6
 8004d1c:	5dc7      	ldrb	r7, [r0, r7]
 8004d1e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d22:	4637      	mov	r7, r6
 8004d24:	42bb      	cmp	r3, r7
 8004d26:	460e      	mov	r6, r1
 8004d28:	d9f4      	bls.n	8004d14 <_printf_i+0x11c>
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	d10b      	bne.n	8004d46 <_printf_i+0x14e>
 8004d2e:	6823      	ldr	r3, [r4, #0]
 8004d30:	07de      	lsls	r6, r3, #31
 8004d32:	d508      	bpl.n	8004d46 <_printf_i+0x14e>
 8004d34:	6923      	ldr	r3, [r4, #16]
 8004d36:	6861      	ldr	r1, [r4, #4]
 8004d38:	4299      	cmp	r1, r3
 8004d3a:	bfde      	ittt	le
 8004d3c:	2330      	movle	r3, #48	; 0x30
 8004d3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d42:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d46:	1b52      	subs	r2, r2, r5
 8004d48:	6122      	str	r2, [r4, #16]
 8004d4a:	464b      	mov	r3, r9
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	4640      	mov	r0, r8
 8004d50:	f8cd a000 	str.w	sl, [sp]
 8004d54:	aa03      	add	r2, sp, #12
 8004d56:	f7ff fedf 	bl	8004b18 <_printf_common>
 8004d5a:	3001      	adds	r0, #1
 8004d5c:	d14c      	bne.n	8004df8 <_printf_i+0x200>
 8004d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d62:	b004      	add	sp, #16
 8004d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d68:	4834      	ldr	r0, [pc, #208]	; (8004e3c <_printf_i+0x244>)
 8004d6a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d6e:	6829      	ldr	r1, [r5, #0]
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d76:	6029      	str	r1, [r5, #0]
 8004d78:	061d      	lsls	r5, r3, #24
 8004d7a:	d514      	bpl.n	8004da6 <_printf_i+0x1ae>
 8004d7c:	07df      	lsls	r7, r3, #31
 8004d7e:	bf44      	itt	mi
 8004d80:	f043 0320 	orrmi.w	r3, r3, #32
 8004d84:	6023      	strmi	r3, [r4, #0]
 8004d86:	b91e      	cbnz	r6, 8004d90 <_printf_i+0x198>
 8004d88:	6823      	ldr	r3, [r4, #0]
 8004d8a:	f023 0320 	bic.w	r3, r3, #32
 8004d8e:	6023      	str	r3, [r4, #0]
 8004d90:	2310      	movs	r3, #16
 8004d92:	e7af      	b.n	8004cf4 <_printf_i+0xfc>
 8004d94:	6823      	ldr	r3, [r4, #0]
 8004d96:	f043 0320 	orr.w	r3, r3, #32
 8004d9a:	6023      	str	r3, [r4, #0]
 8004d9c:	2378      	movs	r3, #120	; 0x78
 8004d9e:	4828      	ldr	r0, [pc, #160]	; (8004e40 <_printf_i+0x248>)
 8004da0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004da4:	e7e3      	b.n	8004d6e <_printf_i+0x176>
 8004da6:	0659      	lsls	r1, r3, #25
 8004da8:	bf48      	it	mi
 8004daa:	b2b6      	uxthmi	r6, r6
 8004dac:	e7e6      	b.n	8004d7c <_printf_i+0x184>
 8004dae:	4615      	mov	r5, r2
 8004db0:	e7bb      	b.n	8004d2a <_printf_i+0x132>
 8004db2:	682b      	ldr	r3, [r5, #0]
 8004db4:	6826      	ldr	r6, [r4, #0]
 8004db6:	1d18      	adds	r0, r3, #4
 8004db8:	6961      	ldr	r1, [r4, #20]
 8004dba:	6028      	str	r0, [r5, #0]
 8004dbc:	0635      	lsls	r5, r6, #24
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	d501      	bpl.n	8004dc6 <_printf_i+0x1ce>
 8004dc2:	6019      	str	r1, [r3, #0]
 8004dc4:	e002      	b.n	8004dcc <_printf_i+0x1d4>
 8004dc6:	0670      	lsls	r0, r6, #25
 8004dc8:	d5fb      	bpl.n	8004dc2 <_printf_i+0x1ca>
 8004dca:	8019      	strh	r1, [r3, #0]
 8004dcc:	2300      	movs	r3, #0
 8004dce:	4615      	mov	r5, r2
 8004dd0:	6123      	str	r3, [r4, #16]
 8004dd2:	e7ba      	b.n	8004d4a <_printf_i+0x152>
 8004dd4:	682b      	ldr	r3, [r5, #0]
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	1d1a      	adds	r2, r3, #4
 8004dda:	602a      	str	r2, [r5, #0]
 8004ddc:	681d      	ldr	r5, [r3, #0]
 8004dde:	6862      	ldr	r2, [r4, #4]
 8004de0:	4628      	mov	r0, r5
 8004de2:	f000 f82f 	bl	8004e44 <memchr>
 8004de6:	b108      	cbz	r0, 8004dec <_printf_i+0x1f4>
 8004de8:	1b40      	subs	r0, r0, r5
 8004dea:	6060      	str	r0, [r4, #4]
 8004dec:	6863      	ldr	r3, [r4, #4]
 8004dee:	6123      	str	r3, [r4, #16]
 8004df0:	2300      	movs	r3, #0
 8004df2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004df6:	e7a8      	b.n	8004d4a <_printf_i+0x152>
 8004df8:	462a      	mov	r2, r5
 8004dfa:	4649      	mov	r1, r9
 8004dfc:	4640      	mov	r0, r8
 8004dfe:	6923      	ldr	r3, [r4, #16]
 8004e00:	47d0      	blx	sl
 8004e02:	3001      	adds	r0, #1
 8004e04:	d0ab      	beq.n	8004d5e <_printf_i+0x166>
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	079b      	lsls	r3, r3, #30
 8004e0a:	d413      	bmi.n	8004e34 <_printf_i+0x23c>
 8004e0c:	68e0      	ldr	r0, [r4, #12]
 8004e0e:	9b03      	ldr	r3, [sp, #12]
 8004e10:	4298      	cmp	r0, r3
 8004e12:	bfb8      	it	lt
 8004e14:	4618      	movlt	r0, r3
 8004e16:	e7a4      	b.n	8004d62 <_printf_i+0x16a>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	4632      	mov	r2, r6
 8004e1c:	4649      	mov	r1, r9
 8004e1e:	4640      	mov	r0, r8
 8004e20:	47d0      	blx	sl
 8004e22:	3001      	adds	r0, #1
 8004e24:	d09b      	beq.n	8004d5e <_printf_i+0x166>
 8004e26:	3501      	adds	r5, #1
 8004e28:	68e3      	ldr	r3, [r4, #12]
 8004e2a:	9903      	ldr	r1, [sp, #12]
 8004e2c:	1a5b      	subs	r3, r3, r1
 8004e2e:	42ab      	cmp	r3, r5
 8004e30:	dcf2      	bgt.n	8004e18 <_printf_i+0x220>
 8004e32:	e7eb      	b.n	8004e0c <_printf_i+0x214>
 8004e34:	2500      	movs	r5, #0
 8004e36:	f104 0619 	add.w	r6, r4, #25
 8004e3a:	e7f5      	b.n	8004e28 <_printf_i+0x230>
 8004e3c:	08005211 	.word	0x08005211
 8004e40:	08005222 	.word	0x08005222

08004e44 <memchr>:
 8004e44:	4603      	mov	r3, r0
 8004e46:	b510      	push	{r4, lr}
 8004e48:	b2c9      	uxtb	r1, r1
 8004e4a:	4402      	add	r2, r0
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	4618      	mov	r0, r3
 8004e50:	d101      	bne.n	8004e56 <memchr+0x12>
 8004e52:	2000      	movs	r0, #0
 8004e54:	e003      	b.n	8004e5e <memchr+0x1a>
 8004e56:	7804      	ldrb	r4, [r0, #0]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	428c      	cmp	r4, r1
 8004e5c:	d1f6      	bne.n	8004e4c <memchr+0x8>
 8004e5e:	bd10      	pop	{r4, pc}

08004e60 <memcpy>:
 8004e60:	440a      	add	r2, r1
 8004e62:	4291      	cmp	r1, r2
 8004e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e68:	d100      	bne.n	8004e6c <memcpy+0xc>
 8004e6a:	4770      	bx	lr
 8004e6c:	b510      	push	{r4, lr}
 8004e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e72:	4291      	cmp	r1, r2
 8004e74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e78:	d1f9      	bne.n	8004e6e <memcpy+0xe>
 8004e7a:	bd10      	pop	{r4, pc}

08004e7c <memmove>:
 8004e7c:	4288      	cmp	r0, r1
 8004e7e:	b510      	push	{r4, lr}
 8004e80:	eb01 0402 	add.w	r4, r1, r2
 8004e84:	d902      	bls.n	8004e8c <memmove+0x10>
 8004e86:	4284      	cmp	r4, r0
 8004e88:	4623      	mov	r3, r4
 8004e8a:	d807      	bhi.n	8004e9c <memmove+0x20>
 8004e8c:	1e43      	subs	r3, r0, #1
 8004e8e:	42a1      	cmp	r1, r4
 8004e90:	d008      	beq.n	8004ea4 <memmove+0x28>
 8004e92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e9a:	e7f8      	b.n	8004e8e <memmove+0x12>
 8004e9c:	4601      	mov	r1, r0
 8004e9e:	4402      	add	r2, r0
 8004ea0:	428a      	cmp	r2, r1
 8004ea2:	d100      	bne.n	8004ea6 <memmove+0x2a>
 8004ea4:	bd10      	pop	{r4, pc}
 8004ea6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004eaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004eae:	e7f7      	b.n	8004ea0 <memmove+0x24>

08004eb0 <_free_r>:
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	4605      	mov	r5, r0
 8004eb4:	2900      	cmp	r1, #0
 8004eb6:	d040      	beq.n	8004f3a <_free_r+0x8a>
 8004eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ebc:	1f0c      	subs	r4, r1, #4
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	bfb8      	it	lt
 8004ec2:	18e4      	addlt	r4, r4, r3
 8004ec4:	f000 f910 	bl	80050e8 <__malloc_lock>
 8004ec8:	4a1c      	ldr	r2, [pc, #112]	; (8004f3c <_free_r+0x8c>)
 8004eca:	6813      	ldr	r3, [r2, #0]
 8004ecc:	b933      	cbnz	r3, 8004edc <_free_r+0x2c>
 8004ece:	6063      	str	r3, [r4, #4]
 8004ed0:	6014      	str	r4, [r2, #0]
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ed8:	f000 b90c 	b.w	80050f4 <__malloc_unlock>
 8004edc:	42a3      	cmp	r3, r4
 8004ede:	d908      	bls.n	8004ef2 <_free_r+0x42>
 8004ee0:	6820      	ldr	r0, [r4, #0]
 8004ee2:	1821      	adds	r1, r4, r0
 8004ee4:	428b      	cmp	r3, r1
 8004ee6:	bf01      	itttt	eq
 8004ee8:	6819      	ldreq	r1, [r3, #0]
 8004eea:	685b      	ldreq	r3, [r3, #4]
 8004eec:	1809      	addeq	r1, r1, r0
 8004eee:	6021      	streq	r1, [r4, #0]
 8004ef0:	e7ed      	b.n	8004ece <_free_r+0x1e>
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	b10b      	cbz	r3, 8004efc <_free_r+0x4c>
 8004ef8:	42a3      	cmp	r3, r4
 8004efa:	d9fa      	bls.n	8004ef2 <_free_r+0x42>
 8004efc:	6811      	ldr	r1, [r2, #0]
 8004efe:	1850      	adds	r0, r2, r1
 8004f00:	42a0      	cmp	r0, r4
 8004f02:	d10b      	bne.n	8004f1c <_free_r+0x6c>
 8004f04:	6820      	ldr	r0, [r4, #0]
 8004f06:	4401      	add	r1, r0
 8004f08:	1850      	adds	r0, r2, r1
 8004f0a:	4283      	cmp	r3, r0
 8004f0c:	6011      	str	r1, [r2, #0]
 8004f0e:	d1e0      	bne.n	8004ed2 <_free_r+0x22>
 8004f10:	6818      	ldr	r0, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	4401      	add	r1, r0
 8004f16:	6011      	str	r1, [r2, #0]
 8004f18:	6053      	str	r3, [r2, #4]
 8004f1a:	e7da      	b.n	8004ed2 <_free_r+0x22>
 8004f1c:	d902      	bls.n	8004f24 <_free_r+0x74>
 8004f1e:	230c      	movs	r3, #12
 8004f20:	602b      	str	r3, [r5, #0]
 8004f22:	e7d6      	b.n	8004ed2 <_free_r+0x22>
 8004f24:	6820      	ldr	r0, [r4, #0]
 8004f26:	1821      	adds	r1, r4, r0
 8004f28:	428b      	cmp	r3, r1
 8004f2a:	bf01      	itttt	eq
 8004f2c:	6819      	ldreq	r1, [r3, #0]
 8004f2e:	685b      	ldreq	r3, [r3, #4]
 8004f30:	1809      	addeq	r1, r1, r0
 8004f32:	6021      	streq	r1, [r4, #0]
 8004f34:	6063      	str	r3, [r4, #4]
 8004f36:	6054      	str	r4, [r2, #4]
 8004f38:	e7cb      	b.n	8004ed2 <_free_r+0x22>
 8004f3a:	bd38      	pop	{r3, r4, r5, pc}
 8004f3c:	200002c0 	.word	0x200002c0

08004f40 <sbrk_aligned>:
 8004f40:	b570      	push	{r4, r5, r6, lr}
 8004f42:	4e0e      	ldr	r6, [pc, #56]	; (8004f7c <sbrk_aligned+0x3c>)
 8004f44:	460c      	mov	r4, r1
 8004f46:	6831      	ldr	r1, [r6, #0]
 8004f48:	4605      	mov	r5, r0
 8004f4a:	b911      	cbnz	r1, 8004f52 <sbrk_aligned+0x12>
 8004f4c:	f000 f8bc 	bl	80050c8 <_sbrk_r>
 8004f50:	6030      	str	r0, [r6, #0]
 8004f52:	4621      	mov	r1, r4
 8004f54:	4628      	mov	r0, r5
 8004f56:	f000 f8b7 	bl	80050c8 <_sbrk_r>
 8004f5a:	1c43      	adds	r3, r0, #1
 8004f5c:	d00a      	beq.n	8004f74 <sbrk_aligned+0x34>
 8004f5e:	1cc4      	adds	r4, r0, #3
 8004f60:	f024 0403 	bic.w	r4, r4, #3
 8004f64:	42a0      	cmp	r0, r4
 8004f66:	d007      	beq.n	8004f78 <sbrk_aligned+0x38>
 8004f68:	1a21      	subs	r1, r4, r0
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	f000 f8ac 	bl	80050c8 <_sbrk_r>
 8004f70:	3001      	adds	r0, #1
 8004f72:	d101      	bne.n	8004f78 <sbrk_aligned+0x38>
 8004f74:	f04f 34ff 	mov.w	r4, #4294967295
 8004f78:	4620      	mov	r0, r4
 8004f7a:	bd70      	pop	{r4, r5, r6, pc}
 8004f7c:	200002c4 	.word	0x200002c4

08004f80 <_malloc_r>:
 8004f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f84:	1ccd      	adds	r5, r1, #3
 8004f86:	f025 0503 	bic.w	r5, r5, #3
 8004f8a:	3508      	adds	r5, #8
 8004f8c:	2d0c      	cmp	r5, #12
 8004f8e:	bf38      	it	cc
 8004f90:	250c      	movcc	r5, #12
 8004f92:	2d00      	cmp	r5, #0
 8004f94:	4607      	mov	r7, r0
 8004f96:	db01      	blt.n	8004f9c <_malloc_r+0x1c>
 8004f98:	42a9      	cmp	r1, r5
 8004f9a:	d905      	bls.n	8004fa8 <_malloc_r+0x28>
 8004f9c:	230c      	movs	r3, #12
 8004f9e:	2600      	movs	r6, #0
 8004fa0:	603b      	str	r3, [r7, #0]
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fa8:	4e2e      	ldr	r6, [pc, #184]	; (8005064 <_malloc_r+0xe4>)
 8004faa:	f000 f89d 	bl	80050e8 <__malloc_lock>
 8004fae:	6833      	ldr	r3, [r6, #0]
 8004fb0:	461c      	mov	r4, r3
 8004fb2:	bb34      	cbnz	r4, 8005002 <_malloc_r+0x82>
 8004fb4:	4629      	mov	r1, r5
 8004fb6:	4638      	mov	r0, r7
 8004fb8:	f7ff ffc2 	bl	8004f40 <sbrk_aligned>
 8004fbc:	1c43      	adds	r3, r0, #1
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	d14d      	bne.n	800505e <_malloc_r+0xde>
 8004fc2:	6834      	ldr	r4, [r6, #0]
 8004fc4:	4626      	mov	r6, r4
 8004fc6:	2e00      	cmp	r6, #0
 8004fc8:	d140      	bne.n	800504c <_malloc_r+0xcc>
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	4631      	mov	r1, r6
 8004fce:	4638      	mov	r0, r7
 8004fd0:	eb04 0803 	add.w	r8, r4, r3
 8004fd4:	f000 f878 	bl	80050c8 <_sbrk_r>
 8004fd8:	4580      	cmp	r8, r0
 8004fda:	d13a      	bne.n	8005052 <_malloc_r+0xd2>
 8004fdc:	6821      	ldr	r1, [r4, #0]
 8004fde:	3503      	adds	r5, #3
 8004fe0:	1a6d      	subs	r5, r5, r1
 8004fe2:	f025 0503 	bic.w	r5, r5, #3
 8004fe6:	3508      	adds	r5, #8
 8004fe8:	2d0c      	cmp	r5, #12
 8004fea:	bf38      	it	cc
 8004fec:	250c      	movcc	r5, #12
 8004fee:	4638      	mov	r0, r7
 8004ff0:	4629      	mov	r1, r5
 8004ff2:	f7ff ffa5 	bl	8004f40 <sbrk_aligned>
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	d02b      	beq.n	8005052 <_malloc_r+0xd2>
 8004ffa:	6823      	ldr	r3, [r4, #0]
 8004ffc:	442b      	add	r3, r5
 8004ffe:	6023      	str	r3, [r4, #0]
 8005000:	e00e      	b.n	8005020 <_malloc_r+0xa0>
 8005002:	6822      	ldr	r2, [r4, #0]
 8005004:	1b52      	subs	r2, r2, r5
 8005006:	d41e      	bmi.n	8005046 <_malloc_r+0xc6>
 8005008:	2a0b      	cmp	r2, #11
 800500a:	d916      	bls.n	800503a <_malloc_r+0xba>
 800500c:	1961      	adds	r1, r4, r5
 800500e:	42a3      	cmp	r3, r4
 8005010:	6025      	str	r5, [r4, #0]
 8005012:	bf18      	it	ne
 8005014:	6059      	strne	r1, [r3, #4]
 8005016:	6863      	ldr	r3, [r4, #4]
 8005018:	bf08      	it	eq
 800501a:	6031      	streq	r1, [r6, #0]
 800501c:	5162      	str	r2, [r4, r5]
 800501e:	604b      	str	r3, [r1, #4]
 8005020:	4638      	mov	r0, r7
 8005022:	f104 060b 	add.w	r6, r4, #11
 8005026:	f000 f865 	bl	80050f4 <__malloc_unlock>
 800502a:	f026 0607 	bic.w	r6, r6, #7
 800502e:	1d23      	adds	r3, r4, #4
 8005030:	1af2      	subs	r2, r6, r3
 8005032:	d0b6      	beq.n	8004fa2 <_malloc_r+0x22>
 8005034:	1b9b      	subs	r3, r3, r6
 8005036:	50a3      	str	r3, [r4, r2]
 8005038:	e7b3      	b.n	8004fa2 <_malloc_r+0x22>
 800503a:	6862      	ldr	r2, [r4, #4]
 800503c:	42a3      	cmp	r3, r4
 800503e:	bf0c      	ite	eq
 8005040:	6032      	streq	r2, [r6, #0]
 8005042:	605a      	strne	r2, [r3, #4]
 8005044:	e7ec      	b.n	8005020 <_malloc_r+0xa0>
 8005046:	4623      	mov	r3, r4
 8005048:	6864      	ldr	r4, [r4, #4]
 800504a:	e7b2      	b.n	8004fb2 <_malloc_r+0x32>
 800504c:	4634      	mov	r4, r6
 800504e:	6876      	ldr	r6, [r6, #4]
 8005050:	e7b9      	b.n	8004fc6 <_malloc_r+0x46>
 8005052:	230c      	movs	r3, #12
 8005054:	4638      	mov	r0, r7
 8005056:	603b      	str	r3, [r7, #0]
 8005058:	f000 f84c 	bl	80050f4 <__malloc_unlock>
 800505c:	e7a1      	b.n	8004fa2 <_malloc_r+0x22>
 800505e:	6025      	str	r5, [r4, #0]
 8005060:	e7de      	b.n	8005020 <_malloc_r+0xa0>
 8005062:	bf00      	nop
 8005064:	200002c0 	.word	0x200002c0

08005068 <_realloc_r>:
 8005068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800506c:	4680      	mov	r8, r0
 800506e:	4614      	mov	r4, r2
 8005070:	460e      	mov	r6, r1
 8005072:	b921      	cbnz	r1, 800507e <_realloc_r+0x16>
 8005074:	4611      	mov	r1, r2
 8005076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800507a:	f7ff bf81 	b.w	8004f80 <_malloc_r>
 800507e:	b92a      	cbnz	r2, 800508c <_realloc_r+0x24>
 8005080:	f7ff ff16 	bl	8004eb0 <_free_r>
 8005084:	4625      	mov	r5, r4
 8005086:	4628      	mov	r0, r5
 8005088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800508c:	f000 f838 	bl	8005100 <_malloc_usable_size_r>
 8005090:	4284      	cmp	r4, r0
 8005092:	4607      	mov	r7, r0
 8005094:	d802      	bhi.n	800509c <_realloc_r+0x34>
 8005096:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800509a:	d812      	bhi.n	80050c2 <_realloc_r+0x5a>
 800509c:	4621      	mov	r1, r4
 800509e:	4640      	mov	r0, r8
 80050a0:	f7ff ff6e 	bl	8004f80 <_malloc_r>
 80050a4:	4605      	mov	r5, r0
 80050a6:	2800      	cmp	r0, #0
 80050a8:	d0ed      	beq.n	8005086 <_realloc_r+0x1e>
 80050aa:	42bc      	cmp	r4, r7
 80050ac:	4622      	mov	r2, r4
 80050ae:	4631      	mov	r1, r6
 80050b0:	bf28      	it	cs
 80050b2:	463a      	movcs	r2, r7
 80050b4:	f7ff fed4 	bl	8004e60 <memcpy>
 80050b8:	4631      	mov	r1, r6
 80050ba:	4640      	mov	r0, r8
 80050bc:	f7ff fef8 	bl	8004eb0 <_free_r>
 80050c0:	e7e1      	b.n	8005086 <_realloc_r+0x1e>
 80050c2:	4635      	mov	r5, r6
 80050c4:	e7df      	b.n	8005086 <_realloc_r+0x1e>
	...

080050c8 <_sbrk_r>:
 80050c8:	b538      	push	{r3, r4, r5, lr}
 80050ca:	2300      	movs	r3, #0
 80050cc:	4d05      	ldr	r5, [pc, #20]	; (80050e4 <_sbrk_r+0x1c>)
 80050ce:	4604      	mov	r4, r0
 80050d0:	4608      	mov	r0, r1
 80050d2:	602b      	str	r3, [r5, #0]
 80050d4:	f7fc fb82 	bl	80017dc <_sbrk>
 80050d8:	1c43      	adds	r3, r0, #1
 80050da:	d102      	bne.n	80050e2 <_sbrk_r+0x1a>
 80050dc:	682b      	ldr	r3, [r5, #0]
 80050de:	b103      	cbz	r3, 80050e2 <_sbrk_r+0x1a>
 80050e0:	6023      	str	r3, [r4, #0]
 80050e2:	bd38      	pop	{r3, r4, r5, pc}
 80050e4:	200002c8 	.word	0x200002c8

080050e8 <__malloc_lock>:
 80050e8:	4801      	ldr	r0, [pc, #4]	; (80050f0 <__malloc_lock+0x8>)
 80050ea:	f000 b811 	b.w	8005110 <__retarget_lock_acquire_recursive>
 80050ee:	bf00      	nop
 80050f0:	200002cc 	.word	0x200002cc

080050f4 <__malloc_unlock>:
 80050f4:	4801      	ldr	r0, [pc, #4]	; (80050fc <__malloc_unlock+0x8>)
 80050f6:	f000 b80c 	b.w	8005112 <__retarget_lock_release_recursive>
 80050fa:	bf00      	nop
 80050fc:	200002cc 	.word	0x200002cc

08005100 <_malloc_usable_size_r>:
 8005100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005104:	1f18      	subs	r0, r3, #4
 8005106:	2b00      	cmp	r3, #0
 8005108:	bfbc      	itt	lt
 800510a:	580b      	ldrlt	r3, [r1, r0]
 800510c:	18c0      	addlt	r0, r0, r3
 800510e:	4770      	bx	lr

08005110 <__retarget_lock_acquire_recursive>:
 8005110:	4770      	bx	lr

08005112 <__retarget_lock_release_recursive>:
 8005112:	4770      	bx	lr

08005114 <_init>:
 8005114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005116:	bf00      	nop
 8005118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511a:	bc08      	pop	{r3}
 800511c:	469e      	mov	lr, r3
 800511e:	4770      	bx	lr

08005120 <_fini>:
 8005120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005122:	bf00      	nop
 8005124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005126:	bc08      	pop	{r3}
 8005128:	469e      	mov	lr, r3
 800512a:	4770      	bx	lr


STM32F103RBT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000489c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080049a8  080049a8  000149a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a80  08004a80  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08004a80  08004a80  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a80  08004a80  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a80  08004a80  00014a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a84  08004a84  00014a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000080  08004b08  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08004b08  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f03b  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002524  00000000  00000000  0002f0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  00031608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  00032760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001992b  00000000  00000000  000337c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000133eb  00000000  00000000  0004d0f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e875  00000000  00000000  000604de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eed53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004be8  00000000  00000000  000eeda4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08004990 	.word	0x08004990

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08004990 	.word	0x08004990

0800014c <FaBoLCD_PCF8574>:
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)66, (uint8_t *) initData, 1, 0xffff);
	HAL_Delay(100);
}

void FaBoLCD_PCF8574(uint8_t addr)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  _i2caddr = addr;
 8000156:	4a10      	ldr	r2, [pc, #64]	; (8000198 <FaBoLCD_PCF8574+0x4c>)
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	7013      	strb	r3, [r2, #0]
  _backlight = BL;
 800015c:	4b0f      	ldr	r3, [pc, #60]	; (800019c <FaBoLCD_PCF8574+0x50>)
 800015e:	2280      	movs	r2, #128	; 0x80
 8000160:	701a      	strb	r2, [r3, #0]
  uint8_t initData[1] = {0x80};
 8000162:	2380      	movs	r3, #128	; 0x80
 8000164:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)0x42, (uint8_t *) initData, 1, 0xffff);
 8000166:	f107 020c 	add.w	r2, r7, #12
 800016a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800016e:	9300      	str	r3, [sp, #0]
 8000170:	2301      	movs	r3, #1
 8000172:	2142      	movs	r1, #66	; 0x42
 8000174:	480a      	ldr	r0, [pc, #40]	; (80001a0 <FaBoLCD_PCF8574+0x54>)
 8000176:	f001 ff0d 	bl	8001f94 <HAL_I2C_Master_Transmit>
  HAL_Delay(100);
 800017a:	2064      	movs	r0, #100	; 0x64
 800017c:	f001 fa2e 	bl	80015dc <HAL_Delay>
  init();
 8000180:	f000 f810 	bl	80001a4 <init>
  begin(LCD_COLUMN, LCD_LINE, LCD_5x8DOTS);
 8000184:	2200      	movs	r2, #0
 8000186:	2102      	movs	r1, #2
 8000188:	2010      	movs	r0, #16
 800018a:	f000 f817 	bl	80001bc <begin>
}
 800018e:	bf00      	nop
 8000190:	3710      	adds	r7, #16
 8000192:	46bd      	mov	sp, r7
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	200000a4 	.word	0x200000a4
 800019c:	200000a5 	.word	0x200000a5
 80001a0:	20000108 	.word	0x20000108

080001a4 <init>:

/**
 @brief init
*/
void init()
{
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0
  _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80001a8:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <init+0x14>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	701a      	strb	r2, [r3, #0]
}
 80001ae:	bf00      	nop
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr
 80001b6:	bf00      	nop
 80001b8:	2000009c 	.word	0x2000009c

080001bc <begin>:

/**
 @brief brgin
*/
void begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	4603      	mov	r3, r0
 80001c4:	71fb      	strb	r3, [r7, #7]
 80001c6:	460b      	mov	r3, r1
 80001c8:	71bb      	strb	r3, [r7, #6]
 80001ca:	4613      	mov	r3, r2
 80001cc:	717b      	strb	r3, [r7, #5]
  if (lines > 1) {
 80001ce:	79bb      	ldrb	r3, [r7, #6]
 80001d0:	2b01      	cmp	r3, #1
 80001d2:	d906      	bls.n	80001e2 <begin+0x26>
	_displayfunction |= LCD_2LINE;
 80001d4:	4b2b      	ldr	r3, [pc, #172]	; (8000284 <begin+0xc8>)
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	f043 0308 	orr.w	r3, r3, #8
 80001dc:	b2da      	uxtb	r2, r3
 80001de:	4b29      	ldr	r3, [pc, #164]	; (8000284 <begin+0xc8>)
 80001e0:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80001e2:	4a29      	ldr	r2, [pc, #164]	; (8000288 <begin+0xcc>)
 80001e4:	79bb      	ldrb	r3, [r7, #6]
 80001e6:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 80001e8:	79fa      	ldrb	r2, [r7, #7]
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	3340      	adds	r3, #64	; 0x40
 80001ee:	2140      	movs	r1, #64	; 0x40
 80001f0:	2000      	movs	r0, #0
 80001f2:	f000 f84f 	bl	8000294 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80001f6:	797b      	ldrb	r3, [r7, #5]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d009      	beq.n	8000210 <begin+0x54>
 80001fc:	79bb      	ldrb	r3, [r7, #6]
 80001fe:	2b01      	cmp	r3, #1
 8000200:	d106      	bne.n	8000210 <begin+0x54>
	_displayfunction |= LCD_5x10DOTS;
 8000202:	4b20      	ldr	r3, [pc, #128]	; (8000284 <begin+0xc8>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	b2da      	uxtb	r2, r3
 800020c:	4b1d      	ldr	r3, [pc, #116]	; (8000284 <begin+0xc8>)
 800020e:	701a      	strb	r2, [r3, #0]
  }

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way before 4.5V so we'll wait 50
  HAL_Delay(50);
 8000210:	2032      	movs	r0, #50	; 0x32
 8000212:	f001 f9e3 	bl	80015dc <HAL_Delay>
  // Now we pull both RS and R/W low to begin commands
  writeI2c(0x00);
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f922 	bl	8000460 <writeI2c>

  // this is according to the hitachi HD44780 datasheet
  // figure 24, pg 46

  // we start in 8bit mode, try to set 4 bit mode
  write4bits(DB4|DB5);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 f90e 	bl	800043e <write4bits>
  HAL_Delay(5); // wait min 4.1ms
 8000222:	2005      	movs	r0, #5
 8000224:	f001 f9da 	bl	80015dc <HAL_Delay>

  // second try
  write4bits(DB4|DB5);
 8000228:	2003      	movs	r0, #3
 800022a:	f000 f908 	bl	800043e <write4bits>
  HAL_Delay(5); // wait min 4.1ms
 800022e:	2005      	movs	r0, #5
 8000230:	f001 f9d4 	bl	80015dc <HAL_Delay>

  // third go!
  write4bits(DB4|DB5);
 8000234:	2003      	movs	r0, #3
 8000236:	f000 f902 	bl	800043e <write4bits>
  HAL_Delay(2);
 800023a:	2002      	movs	r0, #2
 800023c:	f001 f9ce 	bl	80015dc <HAL_Delay>

  // finally, set to 4-bit interface
  write4bits(DB5);
 8000240:	2002      	movs	r0, #2
 8000242:	f000 f8fc 	bl	800043e <write4bits>

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 8000246:	4b0f      	ldr	r3, [pc, #60]	; (8000284 <begin+0xc8>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	f043 0320 	orr.w	r3, r3, #32
 800024e:	b2db      	uxtb	r3, r3
 8000250:	4618      	mov	r0, r3
 8000252:	f000 f88f 	bl	8000374 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000256:	4b0d      	ldr	r3, [pc, #52]	; (800028c <begin+0xd0>)
 8000258:	2204      	movs	r2, #4
 800025a:	701a      	strb	r2, [r3, #0]
  display();
 800025c:	f000 f874 	bl	8000348 <display>

  // clear it off
  clear();
 8000260:	f000 f836 	bl	80002d0 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000264:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <begin+0xd4>)
 8000266:	2202      	movs	r2, #2
 8000268:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800026a:	4b09      	ldr	r3, [pc, #36]	; (8000290 <begin+0xd4>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	f043 0304 	orr.w	r3, r3, #4
 8000272:	b2db      	uxtb	r3, r3
 8000274:	4618      	mov	r0, r3
 8000276:	f000 f87d 	bl	8000374 <command>

}
 800027a:	bf00      	nop
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	2000009c 	.word	0x2000009c
 8000288:	2000009f 	.word	0x2000009f
 800028c:	2000009d 	.word	0x2000009d
 8000290:	2000009e 	.word	0x2000009e

08000294 <setRowOffsets>:

/**
 @brief setRowOffsets
*/
void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	60f8      	str	r0, [r7, #12]
 800029c:	60b9      	str	r1, [r7, #8]
 800029e:	607a      	str	r2, [r7, #4]
 80002a0:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	b2da      	uxtb	r2, r3
 80002a6:	4b09      	ldr	r3, [pc, #36]	; (80002cc <setRowOffsets+0x38>)
 80002a8:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	4b07      	ldr	r3, [pc, #28]	; (80002cc <setRowOffsets+0x38>)
 80002b0:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	b2da      	uxtb	r2, r3
 80002b6:	4b05      	ldr	r3, [pc, #20]	; (80002cc <setRowOffsets+0x38>)
 80002b8:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	b2da      	uxtb	r2, r3
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <setRowOffsets+0x38>)
 80002c0:	70da      	strb	r2, [r3, #3]
}
 80002c2:	bf00      	nop
 80002c4:	3714      	adds	r7, #20
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	200000a0 	.word	0x200000a0

080002d0 <clear>:

/**
 @brief clear
*/
void clear()
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 80002d4:	2001      	movs	r0, #1
 80002d6:	f000 f84d 	bl	8000374 <command>
  HAL_Delay(2);  // this command takes a long time!
 80002da:	2002      	movs	r0, #2
 80002dc:	f001 f97e 	bl	80015dc <HAL_Delay>
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <setCursor>:

/**
 @brief setCursor
*/
void setCursor(uint8_t col, uint8_t row)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	460a      	mov	r2, r1
 80002ee:	71fb      	strb	r3, [r7, #7]
 80002f0:	4613      	mov	r3, r2
 80002f2:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 80002f4:	2304      	movs	r3, #4
 80002f6:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 80002f8:	79bb      	ldrb	r3, [r7, #6]
 80002fa:	68fa      	ldr	r2, [r7, #12]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d803      	bhi.n	8000308 <setCursor+0x24>
	row = max_lines - 1;    // we count rows starting w/0
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	b2db      	uxtb	r3, r3
 8000304:	3b01      	subs	r3, #1
 8000306:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000308:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <setCursor+0x5c>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	79ba      	ldrb	r2, [r7, #6]
 800030e:	429a      	cmp	r2, r3
 8000310:	d303      	bcc.n	800031a <setCursor+0x36>
	row = _numlines - 1;    // we count rows starting w/0
 8000312:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <setCursor+0x5c>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	3b01      	subs	r3, #1
 8000318:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 800031a:	79bb      	ldrb	r3, [r7, #6]
 800031c:	4a09      	ldr	r2, [pc, #36]	; (8000344 <setCursor+0x60>)
 800031e:	5cd2      	ldrb	r2, [r2, r3]
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	4413      	add	r3, r2
 8000324:	b2db      	uxtb	r3, r3
 8000326:	b25b      	sxtb	r3, r3
 8000328:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800032c:	b25b      	sxtb	r3, r3
 800032e:	b2db      	uxtb	r3, r3
 8000330:	4618      	mov	r0, r3
 8000332:	f000 f81f 	bl	8000374 <command>
}
 8000336:	bf00      	nop
 8000338:	3710      	adds	r7, #16
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	2000009f 	.word	0x2000009f
 8000344:	200000a0 	.word	0x200000a0

08000348 <display>:
}

/**
 @brief Turn the display on (quickly)
*/
void display() {
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 800034c:	4b08      	ldr	r3, [pc, #32]	; (8000370 <display+0x28>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	f043 0304 	orr.w	r3, r3, #4
 8000354:	b2da      	uxtb	r2, r3
 8000356:	4b06      	ldr	r3, [pc, #24]	; (8000370 <display+0x28>)
 8000358:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 800035a:	4b05      	ldr	r3, [pc, #20]	; (8000370 <display+0x28>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	f043 0308 	orr.w	r3, r3, #8
 8000362:	b2db      	uxtb	r3, r3
 8000364:	4618      	mov	r0, r3
 8000366:	f000 f805 	bl	8000374 <command>
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	2000009d 	.word	0x2000009d

08000374 <command>:
/*********** mid level commands, for sending data/cmds */

/**
 @brief command
*/
inline void command(uint8_t value) {
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
  send(value, 0);
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f000 f813 	bl	80003ae <send>
}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <write>:

/**
 @brief write
*/
inline uint8_t write(uint8_t value) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
  send(value, RS);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	2140      	movs	r1, #64	; 0x40
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 f805 	bl	80003ae <send>
  return 1; // assume sucess
 80003a4:	2301      	movs	r3, #1
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}

080003ae <send>:
/************ low level data pushing commands **********/

/**
 @brief write either command or data, 4-bit
*/
void send(uint8_t value, uint8_t mode) {
 80003ae:	b580      	push	{r7, lr}
 80003b0:	b084      	sub	sp, #16
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	4603      	mov	r3, r0
 80003b6:	460a      	mov	r2, r1
 80003b8:	71fb      	strb	r3, [r7, #7]
 80003ba:	4613      	mov	r3, r2
 80003bc:	71bb      	strb	r3, [r7, #6]
  uint8_t Hbit = (value >> 4) & 0x0F;
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	091b      	lsrs	r3, r3, #4
 80003c2:	73fb      	strb	r3, [r7, #15]
  uint8_t Lbit = value & 0x0F;
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	f003 030f 	and.w	r3, r3, #15
 80003ca:	73bb      	strb	r3, [r7, #14]
  write4bits(Hbit|mode);
 80003cc:	7bfa      	ldrb	r2, [r7, #15]
 80003ce:	79bb      	ldrb	r3, [r7, #6]
 80003d0:	4313      	orrs	r3, r2
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	4618      	mov	r0, r3
 80003d6:	f000 f832 	bl	800043e <write4bits>
  write4bits(Lbit|mode);
 80003da:	7bba      	ldrb	r2, [r7, #14]
 80003dc:	79bb      	ldrb	r3, [r7, #6]
 80003de:	4313      	orrs	r3, r2
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 f82b 	bl	800043e <write4bits>
}
 80003e8:	bf00      	nop
 80003ea:	3710      	adds	r7, #16
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <pulseEnable>:

/**
 @brief pulseEnable
*/
void pulseEnable(uint8_t value) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	71fb      	strb	r3, [r7, #7]
  writeI2c(value & ~EN); // EN LOW
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	f023 0310 	bic.w	r3, r3, #16
 8000400:	b2db      	uxtb	r3, r3
 8000402:	4618      	mov	r0, r3
 8000404:	f000 f82c 	bl	8000460 <writeI2c>
  HAL_Delay(1);
 8000408:	2001      	movs	r0, #1
 800040a:	f001 f8e7 	bl	80015dc <HAL_Delay>
  writeI2c(value|EN);    // EN HIGH
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	f043 0310 	orr.w	r3, r3, #16
 8000414:	b2db      	uxtb	r3, r3
 8000416:	4618      	mov	r0, r3
 8000418:	f000 f822 	bl	8000460 <writeI2c>
  HAL_Delay(1);  // enable pulse must be >450ns
 800041c:	2001      	movs	r0, #1
 800041e:	f001 f8dd 	bl	80015dc <HAL_Delay>
  writeI2c(value & ~EN); // EN LOW
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	f023 0310 	bic.w	r3, r3, #16
 8000428:	b2db      	uxtb	r3, r3
 800042a:	4618      	mov	r0, r3
 800042c:	f000 f818 	bl	8000460 <writeI2c>
  HAL_Delay(1); // commands need > 37us to settle
 8000430:	2001      	movs	r0, #1
 8000432:	f001 f8d3 	bl	80015dc <HAL_Delay>
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}

0800043e <write4bits>:

/**
 @brief write4bits
*/
void write4bits(uint8_t value) {
 800043e:	b580      	push	{r7, lr}
 8000440:	b082      	sub	sp, #8
 8000442:	af00      	add	r7, sp, #0
 8000444:	4603      	mov	r3, r0
 8000446:	71fb      	strb	r3, [r7, #7]
  writeI2c(value);
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	4618      	mov	r0, r3
 800044c:	f000 f808 	bl	8000460 <writeI2c>
  pulseEnable(value);
 8000450:	79fb      	ldrb	r3, [r7, #7]
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff ffcc 	bl	80003f0 <pulseEnable>
}
 8000458:	bf00      	nop
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <writeI2c>:

/**
 @brief writeI2c
*/
void writeI2c(uint8_t data) {
 8000460:	b580      	push	{r7, lr}
 8000462:	b086      	sub	sp, #24
 8000464:	af02      	add	r7, sp, #8
 8000466:	4603      	mov	r3, r0
 8000468:	71fb      	strb	r3, [r7, #7]
  uint8_t data_t[1];
  data_t[0] = data|_backlight;
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <writeI2c+0x38>)
 800046c:	781a      	ldrb	r2, [r3, #0]
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	4313      	orrs	r3, r2
 8000472:	b2db      	uxtb	r3, r3
 8000474:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit (&hi2c1, (uint16_t)_i2caddr,(uint8_t *) data_t, 1, 0xFFFF);
 8000476:	4b09      	ldr	r3, [pc, #36]	; (800049c <writeI2c+0x3c>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	b299      	uxth	r1, r3
 800047c:	f107 020c 	add.w	r2, r7, #12
 8000480:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000484:	9300      	str	r3, [sp, #0]
 8000486:	2301      	movs	r3, #1
 8000488:	4805      	ldr	r0, [pc, #20]	; (80004a0 <writeI2c+0x40>)
 800048a:	f001 fd83 	bl	8001f94 <HAL_I2C_Master_Transmit>
}
 800048e:	bf00      	nop
 8000490:	3710      	adds	r7, #16
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	200000a5 	.word	0x200000a5
 800049c:	200000a4 	.word	0x200000a4
 80004a0:	20000108 	.word	0x20000108

080004a4 <Lcd_Initialization>:

//////////////////////////////////////////////////////////////////////////


void Lcd_Initialization (void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	FaBoLCD_PCF8574(SLAVE_ADDRESS_LCD);
 80004a8:	2042      	movs	r0, #66	; 0x42
 80004aa:	f7ff fe4f 	bl	800014c <FaBoLCD_PCF8574>
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <Lcd_Send_Data>:
{
	command(cmd);
}

void Lcd_Send_Data (char data)
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	b082      	sub	sp, #8
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	4603      	mov	r3, r0
 80004ba:	71fb      	strb	r3, [r7, #7]
	write(data);
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff ff66 	bl	8000390 <write>
}
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <Lcd_Send_String>:

void Lcd_Send_String (char *str)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	while (*str) Lcd_Send_Data (*str++);
 80004d4:	e006      	b.n	80004e4 <Lcd_Send_String+0x18>
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	1c5a      	adds	r2, r3, #1
 80004da:	607a      	str	r2, [r7, #4]
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff ffe7 	bl	80004b2 <Lcd_Send_Data>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d1f4      	bne.n	80004d6 <Lcd_Send_String+0xa>
}
 80004ec:	bf00      	nop
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <Lcd_Goto_XY>:
{
	Lcd_Send_Cmd (0x01); //clear display
}

void Lcd_Goto_XY (int row, int col)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	b082      	sub	sp, #8
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
 80004fe:	6039      	str	r1, [r7, #0]
	setCursor(col, row);
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	b2db      	uxtb	r3, r3
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	b2d2      	uxtb	r2, r2
 8000508:	4611      	mov	r1, r2
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff feea 	bl	80002e4 <setCursor>
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <displayNum>:

	Lcd_Goto_XY(1, 0);
	Lcd_Send_String((char*)strTotalKWH);
}

void displayNum(int num1, int num2, int state1, int state2){
 8000518:	b580      	push	{r7, lr}
 800051a:	b08c      	sub	sp, #48	; 0x30
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
 8000524:	603b      	str	r3, [r7, #0]
	char str1[16];
	char str2[16];

	if (state1 == STATE_RED)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d107      	bne.n	800053c <displayNum+0x24>
		sprintf(str1, "Lane1->R: %03d", num1);
 800052c:	f107 0320 	add.w	r3, r7, #32
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	4928      	ldr	r1, [pc, #160]	; (80005d4 <displayNum+0xbc>)
 8000534:	4618      	mov	r0, r3
 8000536:	f003 fdb1 	bl	800409c <siprintf>
 800053a:	e014      	b.n	8000566 <displayNum+0x4e>
	else if (state1 == STATE_GREEN)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b02      	cmp	r3, #2
 8000540:	d107      	bne.n	8000552 <displayNum+0x3a>
		sprintf(str1, "Lane1->G: %03d", num1);
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	4923      	ldr	r1, [pc, #140]	; (80005d8 <displayNum+0xc0>)
 800054a:	4618      	mov	r0, r3
 800054c:	f003 fda6 	bl	800409c <siprintf>
 8000550:	e009      	b.n	8000566 <displayNum+0x4e>
	else if (state1 == STATE_YELLOW)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b03      	cmp	r3, #3
 8000556:	d106      	bne.n	8000566 <displayNum+0x4e>
		sprintf(str1, "Lane1->Y: %03d", num1);
 8000558:	f107 0320 	add.w	r3, r7, #32
 800055c:	68fa      	ldr	r2, [r7, #12]
 800055e:	491f      	ldr	r1, [pc, #124]	; (80005dc <displayNum+0xc4>)
 8000560:	4618      	mov	r0, r3
 8000562:	f003 fd9b 	bl	800409c <siprintf>

	if (state2 == STATE_RED)
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d107      	bne.n	800057c <displayNum+0x64>
		sprintf(str2, "Lane2->R: %03d", num2);
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	68ba      	ldr	r2, [r7, #8]
 8000572:	491b      	ldr	r1, [pc, #108]	; (80005e0 <displayNum+0xc8>)
 8000574:	4618      	mov	r0, r3
 8000576:	f003 fd91 	bl	800409c <siprintf>
 800057a:	e014      	b.n	80005a6 <displayNum+0x8e>
	else if (state2 == STATE_GREEN)
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	2b02      	cmp	r3, #2
 8000580:	d107      	bne.n	8000592 <displayNum+0x7a>
		sprintf(str2, "Lane2->G: %03d", num2);
 8000582:	f107 0310 	add.w	r3, r7, #16
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	4916      	ldr	r1, [pc, #88]	; (80005e4 <displayNum+0xcc>)
 800058a:	4618      	mov	r0, r3
 800058c:	f003 fd86 	bl	800409c <siprintf>
 8000590:	e009      	b.n	80005a6 <displayNum+0x8e>
	else if (state2 == STATE_YELLOW)
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	2b03      	cmp	r3, #3
 8000596:	d106      	bne.n	80005a6 <displayNum+0x8e>
		sprintf(str2, "Lane2->Y: %03d", num2);
 8000598:	f107 0310 	add.w	r3, r7, #16
 800059c:	68ba      	ldr	r2, [r7, #8]
 800059e:	4912      	ldr	r1, [pc, #72]	; (80005e8 <displayNum+0xd0>)
 80005a0:	4618      	mov	r0, r3
 80005a2:	f003 fd7b 	bl	800409c <siprintf>

	Lcd_Goto_XY(0, 0);
 80005a6:	2100      	movs	r1, #0
 80005a8:	2000      	movs	r0, #0
 80005aa:	f7ff ffa4 	bl	80004f6 <Lcd_Goto_XY>
	Lcd_Send_String((char*)str1);
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff ff8a 	bl	80004cc <Lcd_Send_String>

	Lcd_Goto_XY(1, 0);
 80005b8:	2100      	movs	r1, #0
 80005ba:	2001      	movs	r0, #1
 80005bc:	f7ff ff9b 	bl	80004f6 <Lcd_Goto_XY>
	Lcd_Send_String((char*)str2);
 80005c0:	f107 0310 	add.w	r3, r7, #16
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff ff81 	bl	80004cc <Lcd_Send_String>
}
 80005ca:	bf00      	nop
 80005cc:	3730      	adds	r7, #48	; 0x30
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	080049c4 	.word	0x080049c4
 80005d8:	080049d4 	.word	0x080049d4
 80005dc:	080049e4 	.word	0x080049e4
 80005e0:	080049f4 	.word	0x080049f4
 80005e4:	08004a04 	.word	0x08004a04
 80005e8:	08004a14 	.word	0x08004a14

080005ec <fsm_automatic_run>:
#include "fsm_automatic.h"

int num_buffer[2] = {0,0};
int state_buffer[2] = {0,0};

void fsm_automatic_run(void){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	if (mode == MODE1){
 80005f0:	4b63      	ldr	r3, [pc, #396]	; (8000780 <fsm_automatic_run+0x194>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	f040 80c0 	bne.w	800077a <fsm_automatic_run+0x18e>
		switch (statusAUTO1){
 80005fa:	4b62      	ldr	r3, [pc, #392]	; (8000784 <fsm_automatic_run+0x198>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b03      	cmp	r3, #3
 8000600:	f200 80aa 	bhi.w	8000758 <fsm_automatic_run+0x16c>
 8000604:	a201      	add	r2, pc, #4	; (adr r2, 800060c <fsm_automatic_run+0x20>)
 8000606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800060a:	bf00      	nop
 800060c:	0800061d 	.word	0x0800061d
 8000610:	0800062b 	.word	0x0800062b
 8000614:	080006af 	.word	0x080006af
 8000618:	08000707 	.word	0x08000707
			case INIT:
				statusAUTO1 = STATE_RED;
 800061c:	4b59      	ldr	r3, [pc, #356]	; (8000784 <fsm_automatic_run+0x198>)
 800061e:	2201      	movs	r2, #1
 8000620:	601a      	str	r2, [r3, #0]
				setTimer2(1);
 8000622:	2001      	movs	r0, #1
 8000624:	f000 fc5e 	bl	8000ee4 <setTimer2>
				break;
 8000628:	e09d      	b.n	8000766 <fsm_automatic_run+0x17a>
			case STATE_RED:
				state_buffer[0] = STATE_RED;
 800062a:	4b57      	ldr	r3, [pc, #348]	; (8000788 <fsm_automatic_run+0x19c>)
 800062c:	2201      	movs	r2, #1
 800062e:	601a      	str	r2, [r3, #0]
				if (timer2_flag == 1){
 8000630:	4b56      	ldr	r3, [pc, #344]	; (800078c <fsm_automatic_run+0x1a0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b01      	cmp	r3, #1
 8000636:	f040 8091 	bne.w	800075c <fsm_automatic_run+0x170>
					if (counterRed > AUTO_YELLOW){
 800063a:	4b55      	ldr	r3, [pc, #340]	; (8000790 <fsm_automatic_run+0x1a4>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	4b55      	ldr	r3, [pc, #340]	; (8000794 <fsm_automatic_run+0x1a8>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	429a      	cmp	r2, r3
 8000644:	dd11      	ble.n	800066a <fsm_automatic_run+0x7e>
						state_buffer[1] = STATE_GREEN;
 8000646:	4b50      	ldr	r3, [pc, #320]	; (8000788 <fsm_automatic_run+0x19c>)
 8000648:	2202      	movs	r2, #2
 800064a:	605a      	str	r2, [r3, #4]
						enableLedPannel(1);
 800064c:	2001      	movs	r0, #1
 800064e:	f000 fa25 	bl	8000a9c <enableLedPannel>
						num_buffer[0] = counterRed;
 8000652:	4b4f      	ldr	r3, [pc, #316]	; (8000790 <fsm_automatic_run+0x1a4>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a50      	ldr	r2, [pc, #320]	; (8000798 <fsm_automatic_run+0x1ac>)
 8000658:	6013      	str	r3, [r2, #0]
						num_buffer[1] = counterRed - counterYellow;
 800065a:	4b4d      	ldr	r3, [pc, #308]	; (8000790 <fsm_automatic_run+0x1a4>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	4b4f      	ldr	r3, [pc, #316]	; (800079c <fsm_automatic_run+0x1b0>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	4a4c      	ldr	r2, [pc, #304]	; (8000798 <fsm_automatic_run+0x1ac>)
 8000666:	6053      	str	r3, [r2, #4]
 8000668:	e00d      	b.n	8000686 <fsm_automatic_run+0x9a>
					}
					else{
						state_buffer[1] = STATE_YELLOW;
 800066a:	4b47      	ldr	r3, [pc, #284]	; (8000788 <fsm_automatic_run+0x19c>)
 800066c:	2203      	movs	r2, #3
 800066e:	605a      	str	r2, [r3, #4]
						enableLedPannel(2);
 8000670:	2002      	movs	r0, #2
 8000672:	f000 fa13 	bl	8000a9c <enableLedPannel>
						num_buffer[0] = counterRed;
 8000676:	4b46      	ldr	r3, [pc, #280]	; (8000790 <fsm_automatic_run+0x1a4>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a47      	ldr	r2, [pc, #284]	; (8000798 <fsm_automatic_run+0x1ac>)
 800067c:	6013      	str	r3, [r2, #0]
						num_buffer[1] = counterRed;
 800067e:	4b44      	ldr	r3, [pc, #272]	; (8000790 <fsm_automatic_run+0x1a4>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a45      	ldr	r2, [pc, #276]	; (8000798 <fsm_automatic_run+0x1ac>)
 8000684:	6053      	str	r3, [r2, #4]
					}
					counterRed--;
 8000686:	4b42      	ldr	r3, [pc, #264]	; (8000790 <fsm_automatic_run+0x1a4>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	3b01      	subs	r3, #1
 800068c:	4a40      	ldr	r2, [pc, #256]	; (8000790 <fsm_automatic_run+0x1a4>)
 800068e:	6013      	str	r3, [r2, #0]
					if (counterRed == INIT){
 8000690:	4b3f      	ldr	r3, [pc, #252]	; (8000790 <fsm_automatic_run+0x1a4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d106      	bne.n	80006a6 <fsm_automatic_run+0xba>
						counterRed = AUTO_RED;
 8000698:	4b41      	ldr	r3, [pc, #260]	; (80007a0 <fsm_automatic_run+0x1b4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <fsm_automatic_run+0x1a4>)
 800069e:	6013      	str	r3, [r2, #0]
						statusAUTO1 = STATE_GREEN;
 80006a0:	4b38      	ldr	r3, [pc, #224]	; (8000784 <fsm_automatic_run+0x198>)
 80006a2:	2202      	movs	r2, #2
 80006a4:	601a      	str	r2, [r3, #0]
					}
					setTimer2(100);
 80006a6:	2064      	movs	r0, #100	; 0x64
 80006a8:	f000 fc1c 	bl	8000ee4 <setTimer2>
				}
				break;
 80006ac:	e056      	b.n	800075c <fsm_automatic_run+0x170>
			case STATE_GREEN:
				state_buffer[0] = STATE_GREEN;
 80006ae:	4b36      	ldr	r3, [pc, #216]	; (8000788 <fsm_automatic_run+0x19c>)
 80006b0:	2202      	movs	r2, #2
 80006b2:	601a      	str	r2, [r3, #0]
				state_buffer[1] = STATE_RED;
 80006b4:	4b34      	ldr	r3, [pc, #208]	; (8000788 <fsm_automatic_run+0x19c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	605a      	str	r2, [r3, #4]
				if (timer2_flag == 1){
 80006ba:	4b34      	ldr	r3, [pc, #208]	; (800078c <fsm_automatic_run+0x1a0>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d14e      	bne.n	8000760 <fsm_automatic_run+0x174>
					enableLedPannel(3);
 80006c2:	2003      	movs	r0, #3
 80006c4:	f000 f9ea 	bl	8000a9c <enableLedPannel>
					num_buffer[0] = counterGreen;
 80006c8:	4b36      	ldr	r3, [pc, #216]	; (80007a4 <fsm_automatic_run+0x1b8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a32      	ldr	r2, [pc, #200]	; (8000798 <fsm_automatic_run+0x1ac>)
 80006ce:	6013      	str	r3, [r2, #0]
					num_buffer[1] = counterGreen + counterYellow;
 80006d0:	4b34      	ldr	r3, [pc, #208]	; (80007a4 <fsm_automatic_run+0x1b8>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	4b31      	ldr	r3, [pc, #196]	; (800079c <fsm_automatic_run+0x1b0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4413      	add	r3, r2
 80006da:	4a2f      	ldr	r2, [pc, #188]	; (8000798 <fsm_automatic_run+0x1ac>)
 80006dc:	6053      	str	r3, [r2, #4]
					counterGreen--;
 80006de:	4b31      	ldr	r3, [pc, #196]	; (80007a4 <fsm_automatic_run+0x1b8>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	4a2f      	ldr	r2, [pc, #188]	; (80007a4 <fsm_automatic_run+0x1b8>)
 80006e6:	6013      	str	r3, [r2, #0]
					if (counterGreen == INIT){
 80006e8:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <fsm_automatic_run+0x1b8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d106      	bne.n	80006fe <fsm_automatic_run+0x112>
						counterGreen = AUTO_GREEN;
 80006f0:	4b2d      	ldr	r3, [pc, #180]	; (80007a8 <fsm_automatic_run+0x1bc>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a2b      	ldr	r2, [pc, #172]	; (80007a4 <fsm_automatic_run+0x1b8>)
 80006f6:	6013      	str	r3, [r2, #0]
						statusAUTO1 = STATE_YELLOW;
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <fsm_automatic_run+0x198>)
 80006fa:	2203      	movs	r2, #3
 80006fc:	601a      	str	r2, [r3, #0]
					}
					setTimer2(100);
 80006fe:	2064      	movs	r0, #100	; 0x64
 8000700:	f000 fbf0 	bl	8000ee4 <setTimer2>
				}
				break;
 8000704:	e02c      	b.n	8000760 <fsm_automatic_run+0x174>
			case STATE_YELLOW:
				state_buffer[0] = STATE_YELLOW;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <fsm_automatic_run+0x19c>)
 8000708:	2203      	movs	r2, #3
 800070a:	601a      	str	r2, [r3, #0]
				state_buffer[1] = STATE_RED;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <fsm_automatic_run+0x19c>)
 800070e:	2201      	movs	r2, #1
 8000710:	605a      	str	r2, [r3, #4]
				if (timer2_flag == 1){
 8000712:	4b1e      	ldr	r3, [pc, #120]	; (800078c <fsm_automatic_run+0x1a0>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d124      	bne.n	8000764 <fsm_automatic_run+0x178>
					enableLedPannel(4);
 800071a:	2004      	movs	r0, #4
 800071c:	f000 f9be 	bl	8000a9c <enableLedPannel>
					num_buffer[0] = counterYellow;
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <fsm_automatic_run+0x1b0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <fsm_automatic_run+0x1ac>)
 8000726:	6013      	str	r3, [r2, #0]
					num_buffer[1] = counterYellow;
 8000728:	4b1c      	ldr	r3, [pc, #112]	; (800079c <fsm_automatic_run+0x1b0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a1a      	ldr	r2, [pc, #104]	; (8000798 <fsm_automatic_run+0x1ac>)
 800072e:	6053      	str	r3, [r2, #4]
					counterYellow--;
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <fsm_automatic_run+0x1b0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	3b01      	subs	r3, #1
 8000736:	4a19      	ldr	r2, [pc, #100]	; (800079c <fsm_automatic_run+0x1b0>)
 8000738:	6013      	str	r3, [r2, #0]
					if (counterYellow == INIT){
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <fsm_automatic_run+0x1b0>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d106      	bne.n	8000750 <fsm_automatic_run+0x164>
						counterYellow = AUTO_YELLOW;
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <fsm_automatic_run+0x1a8>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a15      	ldr	r2, [pc, #84]	; (800079c <fsm_automatic_run+0x1b0>)
 8000748:	6013      	str	r3, [r2, #0]
						statusAUTO1 = STATE_RED;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <fsm_automatic_run+0x198>)
 800074c:	2201      	movs	r2, #1
 800074e:	601a      	str	r2, [r3, #0]
					}
					setTimer2(100);
 8000750:	2064      	movs	r0, #100	; 0x64
 8000752:	f000 fbc7 	bl	8000ee4 <setTimer2>
				}
				break;
 8000756:	e005      	b.n	8000764 <fsm_automatic_run+0x178>
			default:
				break;
 8000758:	bf00      	nop
 800075a:	e004      	b.n	8000766 <fsm_automatic_run+0x17a>
				break;
 800075c:	bf00      	nop
 800075e:	e002      	b.n	8000766 <fsm_automatic_run+0x17a>
				break;
 8000760:	bf00      	nop
 8000762:	e000      	b.n	8000766 <fsm_automatic_run+0x17a>
				break;
 8000764:	bf00      	nop
		}


		displayNum(num_buffer[0], num_buffer[1], state_buffer[0], state_buffer[1]);
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <fsm_automatic_run+0x1ac>)
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <fsm_automatic_run+0x1ac>)
 800076c:	6859      	ldr	r1, [r3, #4]
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <fsm_automatic_run+0x19c>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <fsm_automatic_run+0x19c>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	f7ff fecf 	bl	8000518 <displayNum>

	}

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200000b8 	.word	0x200000b8
 8000784:	200000bc 	.word	0x200000bc
 8000788:	200000b0 	.word	0x200000b0
 800078c:	200001f4 	.word	0x200001f4
 8000790:	200000fc 	.word	0x200000fc
 8000794:	200000f8 	.word	0x200000f8
 8000798:	200000a8 	.word	0x200000a8
 800079c:	20000104 	.word	0x20000104
 80007a0:	200000f0 	.word	0x200000f0
 80007a4:	20000100 	.word	0x20000100
 80007a8:	200000f4 	.word	0x200000f4

080007ac <initWaitingTime>:

int counterRed = 0;
int counterGreen = 0;
int counterYellow = 0;

void initWaitingTime(void){
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
	AUTO_GREEN = 18;
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <initWaitingTime+0x28>)
 80007b2:	2212      	movs	r2, #18
 80007b4:	601a      	str	r2, [r3, #0]
	AUTO_YELLOW = 7;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <initWaitingTime+0x2c>)
 80007b8:	2207      	movs	r2, #7
 80007ba:	601a      	str	r2, [r3, #0]
	AUTO_RED = AUTO_GREEN + AUTO_YELLOW;
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <initWaitingTime+0x28>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <initWaitingTime+0x2c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4413      	add	r3, r2
 80007c6:	4a05      	ldr	r2, [pc, #20]	; (80007dc <initWaitingTime+0x30>)
 80007c8:	6013      	str	r3, [r2, #0]
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	200000f4 	.word	0x200000f4
 80007d8:	200000f8 	.word	0x200000f8
 80007dc:	200000f0 	.word	0x200000f0

080007e0 <initVar>:

void initVar(void){
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
	mode = MODE1;
 80007e4:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <initVar+0x78>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	601a      	str	r2, [r3, #0]

	statusAUTO1 = INIT;
 80007ea:	4b1c      	ldr	r3, [pc, #112]	; (800085c <initVar+0x7c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
	statusAUTO2 = INIT;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <initVar+0x80>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
	statusAUTO3 = INIT;
 80007f6:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <initVar+0x84>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
	statusAUTO4 = INIT;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <initVar+0x88>)
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]

	statusMODE2_1 = INIT;
 8000802:	4b1a      	ldr	r3, [pc, #104]	; (800086c <initVar+0x8c>)
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
	statusMODE2_2 = INIT;
 8000808:	4b19      	ldr	r3, [pc, #100]	; (8000870 <initVar+0x90>)
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
	statusMODE2_3 = INIT;
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <initVar+0x94>)
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]

	statusMODE3_1 = INIT;
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <initVar+0x98>)
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
	statusMODE3_2 = INIT;
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <initVar+0x9c>)
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
	statusMODE3_3 = INIT;
 8000820:	4b17      	ldr	r3, [pc, #92]	; (8000880 <initVar+0xa0>)
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]

	statusMODE4_1 = INIT;
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <initVar+0xa4>)
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
	statusMODE4_2 = INIT;
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <initVar+0xa8>)
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
	statusMODE4_3 = INIT;
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <initVar+0xac>)
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]

	counterRed = AUTO_RED;
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <initVar+0xb0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a15      	ldr	r2, [pc, #84]	; (8000894 <initVar+0xb4>)
 800083e:	6013      	str	r3, [r2, #0]
	counterGreen = AUTO_GREEN;
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <initVar+0xb8>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a15      	ldr	r2, [pc, #84]	; (800089c <initVar+0xbc>)
 8000846:	6013      	str	r3, [r2, #0]
	counterYellow = AUTO_YELLOW;
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <initVar+0xc0>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a15      	ldr	r2, [pc, #84]	; (80008a4 <initVar+0xc4>)
 800084e:	6013      	str	r3, [r2, #0]
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	200000b8 	.word	0x200000b8
 800085c:	200000bc 	.word	0x200000bc
 8000860:	200000c0 	.word	0x200000c0
 8000864:	200000c4 	.word	0x200000c4
 8000868:	200000c8 	.word	0x200000c8
 800086c:	200000cc 	.word	0x200000cc
 8000870:	200000d0 	.word	0x200000d0
 8000874:	200000d4 	.word	0x200000d4
 8000878:	200000d8 	.word	0x200000d8
 800087c:	200000dc 	.word	0x200000dc
 8000880:	200000e0 	.word	0x200000e0
 8000884:	200000e4 	.word	0x200000e4
 8000888:	200000e8 	.word	0x200000e8
 800088c:	200000ec 	.word	0x200000ec
 8000890:	200000f0 	.word	0x200000f0
 8000894:	200000fc 	.word	0x200000fc
 8000898:	200000f4 	.word	0x200000f4
 800089c:	20000100 	.word	0x20000100
 80008a0:	200000f8 	.word	0x200000f8
 80008a4:	20000104 	.word	0x20000104

080008a8 <latchEnable>:
 *      Author: Admin
 */

#include "led_pannel.h"

void latchEnable (void){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_LE_GPIO_Port, LED_LE_Pin, RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2110      	movs	r1, #16
 80008b0:	4802      	ldr	r0, [pc, #8]	; (80008bc <latchEnable+0x14>)
 80008b2:	f001 f9f9 	bl	8001ca8 <HAL_GPIO_WritePin>
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40011000 	.word	0x40011000

080008c0 <latchDisable>:

void latchDisable (void){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_LE_GPIO_Port, LED_LE_Pin, SET);
 80008c4:	2201      	movs	r2, #1
 80008c6:	2110      	movs	r1, #16
 80008c8:	4802      	ldr	r0, [pc, #8]	; (80008d4 <latchDisable+0x14>)
 80008ca:	f001 f9ed 	bl	8001ca8 <HAL_GPIO_WritePin>
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40011000 	.word	0x40011000

080008d8 <outputEnable>:

void outputEnable (void){
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_OE_GPIO_Port, LED_OE_Pin, SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2120      	movs	r1, #32
 80008e0:	4802      	ldr	r0, [pc, #8]	; (80008ec <outputEnable+0x14>)
 80008e2:	f001 f9e1 	bl	8001ca8 <HAL_GPIO_WritePin>
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40011000 	.word	0x40011000

080008f0 <clockON>:

void outputDisable (void){
	HAL_GPIO_WritePin(LED_OE_GPIO_Port, LED_OE_Pin, RESET);
}

void clockON (void){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_SCK_GPIO_Port, LED_SCK_Pin, RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2108      	movs	r1, #8
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <clockON+0x14>)
 80008fa:	f001 f9d5 	bl	8001ca8 <HAL_GPIO_WritePin>
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40011000 	.word	0x40011000

08000908 <clockOFF>:

void clockOFF (void){
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_SCK_GPIO_Port, LED_SCK_Pin, SET);
 800090c:	2201      	movs	r2, #1
 800090e:	2108      	movs	r1, #8
 8000910:	4802      	ldr	r0, [pc, #8]	; (800091c <clockOFF+0x14>)
 8000912:	f001 f9c9 	bl	8001ca8 <HAL_GPIO_WritePin>
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40011000 	.word	0x40011000

08000920 <dataOUT>:

void dataOUT (GPIO_PinState state){
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_SDI_GPIO_Port, LED_SDI_Pin, state);
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	461a      	mov	r2, r3
 800092e:	2140      	movs	r1, #64	; 0x40
 8000930:	4803      	ldr	r0, [pc, #12]	; (8000940 <dataOUT+0x20>)
 8000932:	f001 f9b9 	bl	8001ca8 <HAL_GPIO_WritePin>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40011000 	.word	0x40011000

08000944 <getBitValue>:

uint8_t getBitValue (uint32_t data, uint32_t index){
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
	data = (data >> index) & 0x01;
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	fa22 f303 	lsr.w	r3, r2, r3
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	607b      	str	r3, [r7, #4]
	return data;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	b2db      	uxtb	r3, r3
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
	...

0800096c <ledDisplay1>:


uint32_t data[4] = {0x40800, 0x40300, 0x21000, 0x0D000};

void ledDisplay1 (void){	//red1 + green2
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
	uint8_t i;
	uint32_t temp1 = data[0];
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <ledDisplay1+0x48>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	603b      	str	r3, [r7, #0]
	latchDisable();
 8000978:	f7ff ffa2 	bl	80008c0 <latchDisable>
	for(i = 0; i < 20; i++){
 800097c:	2300      	movs	r3, #0
 800097e:	71fb      	strb	r3, [r7, #7]
 8000980:	e00f      	b.n	80009a2 <ledDisplay1+0x36>
		clockOFF();
 8000982:	f7ff ffc1 	bl	8000908 <clockOFF>
		dataOUT(getBitValue(temp1, i));
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	4619      	mov	r1, r3
 800098a:	6838      	ldr	r0, [r7, #0]
 800098c:	f7ff ffda 	bl	8000944 <getBitValue>
 8000990:	4603      	mov	r3, r0
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff ffc4 	bl	8000920 <dataOUT>
		clockON();
 8000998:	f7ff ffaa 	bl	80008f0 <clockON>
	for(i = 0; i < 20; i++){
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	3301      	adds	r3, #1
 80009a0:	71fb      	strb	r3, [r7, #7]
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	2b13      	cmp	r3, #19
 80009a6:	d9ec      	bls.n	8000982 <ledDisplay1+0x16>
	}
	latchEnable();
 80009a8:	f7ff ff7e 	bl	80008a8 <latchEnable>
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000000 	.word	0x20000000

080009b8 <ledDisplay2>:

void ledDisplay2 (void){	//red1 + yellow2
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
	uint8_t i;
	uint32_t temp1 = data[1];
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <ledDisplay2+0x48>)
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	603b      	str	r3, [r7, #0]
	latchDisable();
 80009c4:	f7ff ff7c 	bl	80008c0 <latchDisable>
	for(i = 0; i < 20; i++){
 80009c8:	2300      	movs	r3, #0
 80009ca:	71fb      	strb	r3, [r7, #7]
 80009cc:	e00f      	b.n	80009ee <ledDisplay2+0x36>
		clockOFF();
 80009ce:	f7ff ff9b 	bl	8000908 <clockOFF>
		dataOUT(getBitValue(temp1, i));
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	4619      	mov	r1, r3
 80009d6:	6838      	ldr	r0, [r7, #0]
 80009d8:	f7ff ffb4 	bl	8000944 <getBitValue>
 80009dc:	4603      	mov	r3, r0
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ff9e 	bl	8000920 <dataOUT>
		clockON();
 80009e4:	f7ff ff84 	bl	80008f0 <clockON>
	for(i = 0; i < 20; i++){
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	3301      	adds	r3, #1
 80009ec:	71fb      	strb	r3, [r7, #7]
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b13      	cmp	r3, #19
 80009f2:	d9ec      	bls.n	80009ce <ledDisplay2+0x16>
	}
	latchEnable();
 80009f4:	f7ff ff58 	bl	80008a8 <latchEnable>
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000000 	.word	0x20000000

08000a04 <ledDisplay3>:

void ledDisplay3 (void){	//Green1 + Red2
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
	uint8_t i;
	uint32_t temp1 = data[2];
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <ledDisplay3+0x48>)
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	603b      	str	r3, [r7, #0]
	latchDisable();
 8000a10:	f7ff ff56 	bl	80008c0 <latchDisable>
	for(i = 0; i < 20; i++){
 8000a14:	2300      	movs	r3, #0
 8000a16:	71fb      	strb	r3, [r7, #7]
 8000a18:	e00f      	b.n	8000a3a <ledDisplay3+0x36>
		clockOFF();
 8000a1a:	f7ff ff75 	bl	8000908 <clockOFF>
		dataOUT(getBitValue(temp1, i));
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	4619      	mov	r1, r3
 8000a22:	6838      	ldr	r0, [r7, #0]
 8000a24:	f7ff ff8e 	bl	8000944 <getBitValue>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff ff78 	bl	8000920 <dataOUT>
		clockON();
 8000a30:	f7ff ff5e 	bl	80008f0 <clockON>
	for(i = 0; i < 20; i++){
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	3301      	adds	r3, #1
 8000a38:	71fb      	strb	r3, [r7, #7]
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	2b13      	cmp	r3, #19
 8000a3e:	d9ec      	bls.n	8000a1a <ledDisplay3+0x16>
	}
	latchEnable();
 8000a40:	f7ff ff32 	bl	80008a8 <latchEnable>
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000000 	.word	0x20000000

08000a50 <ledDisplay4>:

void ledDisplay4 (void){	//Yellow1 + Red2
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
	uint8_t i;
	uint32_t temp1 = data[3];
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <ledDisplay4+0x48>)
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	603b      	str	r3, [r7, #0]
	latchDisable();
 8000a5c:	f7ff ff30 	bl	80008c0 <latchDisable>
	for(i = 0; i < 20; i++){
 8000a60:	2300      	movs	r3, #0
 8000a62:	71fb      	strb	r3, [r7, #7]
 8000a64:	e00f      	b.n	8000a86 <ledDisplay4+0x36>
		clockOFF();
 8000a66:	f7ff ff4f 	bl	8000908 <clockOFF>
		dataOUT(getBitValue(temp1, i));
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	6838      	ldr	r0, [r7, #0]
 8000a70:	f7ff ff68 	bl	8000944 <getBitValue>
 8000a74:	4603      	mov	r3, r0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff ff52 	bl	8000920 <dataOUT>
		clockON();
 8000a7c:	f7ff ff38 	bl	80008f0 <clockON>
	for(i = 0; i < 20; i++){
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	3301      	adds	r3, #1
 8000a84:	71fb      	strb	r3, [r7, #7]
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b13      	cmp	r3, #19
 8000a8a:	d9ec      	bls.n	8000a66 <ledDisplay4+0x16>
	}
	latchEnable();
 8000a8c:	f7ff ff0c 	bl	80008a8 <latchEnable>
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000000 	.word	0x20000000

08000a9c <enableLedPannel>:


void enableLedPannel (int index){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	switch (index){
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	2b03      	cmp	r3, #3
 8000aaa:	d817      	bhi.n	8000adc <enableLedPannel+0x40>
 8000aac:	a201      	add	r2, pc, #4	; (adr r2, 8000ab4 <enableLedPannel+0x18>)
 8000aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab2:	bf00      	nop
 8000ab4:	08000ac5 	.word	0x08000ac5
 8000ab8:	08000acb 	.word	0x08000acb
 8000abc:	08000ad1 	.word	0x08000ad1
 8000ac0:	08000ad7 	.word	0x08000ad7
		case 1:
			ledDisplay1();
 8000ac4:	f7ff ff52 	bl	800096c <ledDisplay1>
			break;
 8000ac8:	e009      	b.n	8000ade <enableLedPannel+0x42>
		case 2:
			ledDisplay2();
 8000aca:	f7ff ff75 	bl	80009b8 <ledDisplay2>
			break;
 8000ace:	e006      	b.n	8000ade <enableLedPannel+0x42>
		case 3:
			ledDisplay3();
 8000ad0:	f7ff ff98 	bl	8000a04 <ledDisplay3>
			break;
 8000ad4:	e003      	b.n	8000ade <enableLedPannel+0x42>
		case 4:
			ledDisplay4();
 8000ad6:	f7ff ffbb 	bl	8000a50 <ledDisplay4>
			break;
 8000ada:	e000      	b.n	8000ade <enableLedPannel+0x42>
		default:
			break;
 8000adc:	bf00      	nop
	}
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop

08000ae8 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3){
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <HAL_UART_RxCpltCallback+0x60>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d122      	bne.n	8000b40 <HAL_UART_RxCpltCallback+0x58>
		HAL_UART_Transmit(&huart3, &buffer_byte, 1, 500);
 8000afa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000afe:	2201      	movs	r2, #1
 8000b00:	4912      	ldr	r1, [pc, #72]	; (8000b4c <HAL_UART_RxCpltCallback+0x64>)
 8000b02:	4813      	ldr	r0, [pc, #76]	; (8000b50 <HAL_UART_RxCpltCallback+0x68>)
 8000b04:	f002 fdad 	bl	8003662 <HAL_UART_Transmit>
		buffer[index_buffer] = buffer_byte;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_UART_RxCpltCallback+0x6c>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <HAL_UART_RxCpltCallback+0x64>)
 8000b10:	7819      	ldrb	r1, [r3, #0]
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <HAL_UART_RxCpltCallback+0x70>)
 8000b14:	5499      	strb	r1, [r3, r2]
		index_buffer++;
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <HAL_UART_RxCpltCallback+0x6c>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <HAL_UART_RxCpltCallback+0x6c>)
 8000b20:	701a      	strb	r2, [r3, #0]
		if (index_buffer == MAX_BUFFER_SIZE) index_buffer = 0;
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <HAL_UART_RxCpltCallback+0x6c>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b32      	cmp	r3, #50	; 0x32
 8000b28:	d102      	bne.n	8000b30 <HAL_UART_RxCpltCallback+0x48>
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <HAL_UART_RxCpltCallback+0x6c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_UART_RxCpltCallback+0x74>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, &buffer_byte, 1);
 8000b36:	2201      	movs	r2, #1
 8000b38:	4904      	ldr	r1, [pc, #16]	; (8000b4c <HAL_UART_RxCpltCallback+0x64>)
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <HAL_UART_RxCpltCallback+0x68>)
 8000b3c:	f002 fe23 	bl	8003786 <HAL_UART_Receive_IT>
	}
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40004800 	.word	0x40004800
 8000b4c:	2000023c 	.word	0x2000023c
 8000b50:	200001a4 	.word	0x200001a4
 8000b54:	20000272 	.word	0x20000272
 8000b58:	20000240 	.word	0x20000240
 8000b5c:	20000273 	.word	0x20000273

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b64:	f000 fcd8 	bl	8001518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b68:	f000 f838 	bl	8000bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6c:	f000 f916 	bl	8000d9c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b70:	f000 f89e 	bl	8000cb0 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000b74:	f000 f86e 	bl	8000c54 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000b78:	f000 f8e6 	bl	8000d48 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b7c:	4812      	ldr	r0, [pc, #72]	; (8000bc8 <main+0x68>)
 8000b7e:	f002 f979 	bl	8002e74 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart3, &buffer_byte, 1);
 8000b82:	2201      	movs	r2, #1
 8000b84:	4911      	ldr	r1, [pc, #68]	; (8000bcc <main+0x6c>)
 8000b86:	4812      	ldr	r0, [pc, #72]	; (8000bd0 <main+0x70>)
 8000b88:	f002 fdfd 	bl	8003786 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2104      	movs	r1, #4
 8000b90:	4810      	ldr	r0, [pc, #64]	; (8000bd4 <main+0x74>)
 8000b92:	f001 f889 	bl	8001ca8 <HAL_GPIO_WritePin>
  outputEnable();
 8000b96:	f7ff fe9f 	bl	80008d8 <outputEnable>
  Lcd_Initialization();
 8000b9a:	f7ff fc83 	bl	80004a4 <Lcd_Initialization>
  initWaitingTime();
 8000b9e:	f7ff fe05 	bl	80007ac <initWaitingTime>
  initVar();
 8000ba2:	f7ff fe1d 	bl	80007e0 <initVar>
  setTimer1(1);
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f000 f988 	bl	8000ebc <setTimer1>
//	if (timer1_flag == 1){
//		HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
//		setTimer1(100);
//	}

	fsm_automatic_run();
 8000bac:	f7ff fd1e 	bl	80005ec <fsm_automatic_run>

	if (buffer_flag == 1){
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <main+0x78>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d104      	bne.n	8000bc2 <main+0x62>
		cmd_parser_fsm();
 8000bb8:	f000 fc10 	bl	80013dc <cmd_parser_fsm>
		buffer_flag = 0;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <main+0x78>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
	}
	uart_comms_fsm();
 8000bc2:	f000 fc69 	bl	8001498 <uart_comms_fsm>
	fsm_automatic_run();
 8000bc6:	e7f1      	b.n	8000bac <main+0x4c>
 8000bc8:	2000015c 	.word	0x2000015c
 8000bcc:	2000023c 	.word	0x2000023c
 8000bd0:	200001a4 	.word	0x200001a4
 8000bd4:	40011400 	.word	0x40011400
 8000bd8:	20000273 	.word	0x20000273

08000bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b090      	sub	sp, #64	; 0x40
 8000be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be2:	f107 0318 	add.w	r3, r7, #24
 8000be6:	2228      	movs	r2, #40	; 0x28
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f003 fa4e 	bl	800408c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c02:	2301      	movs	r3, #1
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c06:	2310      	movs	r3, #16
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0e:	f107 0318 	add.w	r3, r7, #24
 8000c12:	4618      	mov	r0, r3
 8000c14:	f001 fcc4 	bl	80025a0 <HAL_RCC_OscConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c1e:	f000 f947 	bl	8000eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c22:	230f      	movs	r3, #15
 8000c24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 ff32 	bl	8002aa4 <HAL_RCC_ClockConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c46:	f000 f933 	bl	8000eb0 <Error_Handler>
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	3740      	adds	r7, #64	; 0x40
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c5a:	4a13      	ldr	r2, [pc, #76]	; (8000ca8 <MX_I2C1_Init+0x54>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c60:	4a12      	ldr	r2, [pc, #72]	; (8000cac <MX_I2C1_Init+0x58>)
 8000c62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c92:	f001 f83b 	bl	8001d0c <HAL_I2C_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c9c:	f000 f908 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000108 	.word	0x20000108
 8000ca8:	40005400 	.word	0x40005400
 8000cac:	000186a0 	.word	0x000186a0

08000cb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cb6:	f107 0308 	add.w	r3, r7, #8
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <MX_TIM2_Init+0x94>)
 8000cce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <MX_TIM2_Init+0x94>)
 8000cd6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000cda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cdc:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <MX_TIM2_Init+0x94>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <MX_TIM2_Init+0x94>)
 8000ce4:	2209      	movs	r2, #9
 8000ce6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <MX_TIM2_Init+0x94>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <MX_TIM2_Init+0x94>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cf4:	4813      	ldr	r0, [pc, #76]	; (8000d44 <MX_TIM2_Init+0x94>)
 8000cf6:	f002 f86d 	bl	8002dd4 <HAL_TIM_Base_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d00:	f000 f8d6 	bl	8000eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	4619      	mov	r1, r3
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <MX_TIM2_Init+0x94>)
 8000d12:	f002 fa09 	bl	8003128 <HAL_TIM_ConfigClockSource>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d1c:	f000 f8c8 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d20:	2300      	movs	r3, #0
 8000d22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d28:	463b      	mov	r3, r7
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4805      	ldr	r0, [pc, #20]	; (8000d44 <MX_TIM2_Init+0x94>)
 8000d2e:	f002 fbdb 	bl	80034e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d38:	f000 f8ba 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	2000015c 	.word	0x2000015c

08000d48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <MX_USART3_UART_Init+0x50>)
 8000d50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d80:	f002 fc22 	bl	80035c8 <HAL_UART_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d8a:	f000 f891 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200001a4 	.word	0x200001a4
 8000d98:	40004800 	.word	0x40004800

08000d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db0:	4b36      	ldr	r3, [pc, #216]	; (8000e8c <MX_GPIO_Init+0xf0>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4a35      	ldr	r2, [pc, #212]	; (8000e8c <MX_GPIO_Init+0xf0>)
 8000db6:	f043 0310 	orr.w	r3, r3, #16
 8000dba:	6193      	str	r3, [r2, #24]
 8000dbc:	4b33      	ldr	r3, [pc, #204]	; (8000e8c <MX_GPIO_Init+0xf0>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f003 0310 	and.w	r3, r3, #16
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc8:	4b30      	ldr	r3, [pc, #192]	; (8000e8c <MX_GPIO_Init+0xf0>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	4a2f      	ldr	r2, [pc, #188]	; (8000e8c <MX_GPIO_Init+0xf0>)
 8000dce:	f043 0308 	orr.w	r3, r3, #8
 8000dd2:	6193      	str	r3, [r2, #24]
 8000dd4:	4b2d      	ldr	r3, [pc, #180]	; (8000e8c <MX_GPIO_Init+0xf0>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f003 0308 	and.w	r3, r3, #8
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <MX_GPIO_Init+0xf0>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	4a29      	ldr	r2, [pc, #164]	; (8000e8c <MX_GPIO_Init+0xf0>)
 8000de6:	f043 0304 	orr.w	r3, r3, #4
 8000dea:	6193      	str	r3, [r2, #24]
 8000dec:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <MX_GPIO_Init+0xf0>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df8:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <MX_GPIO_Init+0xf0>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	4a23      	ldr	r2, [pc, #140]	; (8000e8c <MX_GPIO_Init+0xf0>)
 8000dfe:	f043 0320 	orr.w	r3, r3, #32
 8000e02:	6193      	str	r3, [r2, #24]
 8000e04:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <MX_GPIO_Init+0xf0>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	f003 0320 	and.w	r3, r3, #32
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_SCK_Pin|LED_LE_Pin|LED_OE_Pin|LED_SDI_Pin, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2178      	movs	r1, #120	; 0x78
 8000e14:	481e      	ldr	r0, [pc, #120]	; (8000e90 <MX_GPIO_Init+0xf4>)
 8000e16:	f000 ff47 	bl	8001ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2124      	movs	r1, #36	; 0x24
 8000e1e:	481d      	ldr	r0, [pc, #116]	; (8000e94 <MX_GPIO_Init+0xf8>)
 8000e20:	f000 ff42 	bl	8001ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2104      	movs	r1, #4
 8000e28:	481b      	ldr	r0, [pc, #108]	; (8000e98 <MX_GPIO_Init+0xfc>)
 8000e2a:	f000 ff3d 	bl	8001ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_SCK_Pin LED_LE_Pin LED_OE_Pin LED_SDI_Pin */
  GPIO_InitStruct.Pin = LED_SCK_Pin|LED_LE_Pin|LED_OE_Pin|LED_SDI_Pin;
 8000e2e:	2378      	movs	r3, #120	; 0x78
 8000e30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e3e:	f107 0310 	add.w	r3, r7, #16
 8000e42:	4619      	mov	r1, r3
 8000e44:	4812      	ldr	r0, [pc, #72]	; (8000e90 <MX_GPIO_Init+0xf4>)
 8000e46:	f000 fdab 	bl	80019a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|BUZZER_Pin;
 8000e4a:	2324      	movs	r3, #36	; 0x24
 8000e4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2302      	movs	r3, #2
 8000e58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5a:	f107 0310 	add.w	r3, r7, #16
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480c      	ldr	r0, [pc, #48]	; (8000e94 <MX_GPIO_Init+0xf8>)
 8000e62:	f000 fd9d 	bl	80019a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 8000e66:	2304      	movs	r3, #4
 8000e68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2302      	movs	r3, #2
 8000e74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4806      	ldr	r0, [pc, #24]	; (8000e98 <MX_GPIO_Init+0xfc>)
 8000e7e:	f000 fd8f 	bl	80019a0 <HAL_GPIO_Init>

}
 8000e82:	bf00      	nop
 8000e84:	3720      	adds	r7, #32
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40011000 	.word	0x40011000
 8000e94:	40010c00 	.word	0x40010c00
 8000e98:	40011400 	.word	0x40011400

08000e9c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Interrupt is invoked every 10ms
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

	/*ledBlink(50, 50);
	UpdateStatus();
	buzzerProcess();*/
	timerRun();
 8000ea4:	f000 f832 	bl	8000f0c <timerRun>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <Error_Handler+0x8>
	...

08000ebc <setTimer1>:
int timer9_flag = 0;

int timer10_counter = 0;
int timer10_flag = 0;

void setTimer1(int duration){
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8000ec4:	4a05      	ldr	r2, [pc, #20]	; (8000edc <setTimer1+0x20>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000eca:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <setTimer1+0x24>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	200001e8 	.word	0x200001e8
 8000ee0:	200001ec 	.word	0x200001ec

08000ee4 <setTimer2>:

void setTimer2(int duration){
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8000eec:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <setTimer2+0x20>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000ef2:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <setTimer2+0x24>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	200001f0 	.word	0x200001f0
 8000f08:	200001f4 	.word	0x200001f4

08000f0c <timerRun>:
void setTimer10(int duration){
	timer10_counter = duration;
	timer10_flag = 0;
}

void timerRun(){
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000f10:	4b51      	ldr	r3, [pc, #324]	; (8001058 <timerRun+0x14c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	dd0b      	ble.n	8000f30 <timerRun+0x24>
		timer1_counter--;
 8000f18:	4b4f      	ldr	r3, [pc, #316]	; (8001058 <timerRun+0x14c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	4a4e      	ldr	r2, [pc, #312]	; (8001058 <timerRun+0x14c>)
 8000f20:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0){
 8000f22:	4b4d      	ldr	r3, [pc, #308]	; (8001058 <timerRun+0x14c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d102      	bne.n	8000f30 <timerRun+0x24>
			timer1_flag = 1;
 8000f2a:	4b4c      	ldr	r3, [pc, #304]	; (800105c <timerRun+0x150>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8000f30:	4b4b      	ldr	r3, [pc, #300]	; (8001060 <timerRun+0x154>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	dd0b      	ble.n	8000f50 <timerRun+0x44>
		timer2_counter--;
 8000f38:	4b49      	ldr	r3, [pc, #292]	; (8001060 <timerRun+0x154>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	4a48      	ldr	r2, [pc, #288]	; (8001060 <timerRun+0x154>)
 8000f40:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0){
 8000f42:	4b47      	ldr	r3, [pc, #284]	; (8001060 <timerRun+0x154>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d102      	bne.n	8000f50 <timerRun+0x44>
			timer2_flag = 1;
 8000f4a:	4b46      	ldr	r3, [pc, #280]	; (8001064 <timerRun+0x158>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 8000f50:	4b45      	ldr	r3, [pc, #276]	; (8001068 <timerRun+0x15c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	dd0b      	ble.n	8000f70 <timerRun+0x64>
		timer3_counter--;
 8000f58:	4b43      	ldr	r3, [pc, #268]	; (8001068 <timerRun+0x15c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	4a42      	ldr	r2, [pc, #264]	; (8001068 <timerRun+0x15c>)
 8000f60:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0){
 8000f62:	4b41      	ldr	r3, [pc, #260]	; (8001068 <timerRun+0x15c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d102      	bne.n	8000f70 <timerRun+0x64>
			timer3_flag = 1;
 8000f6a:	4b40      	ldr	r3, [pc, #256]	; (800106c <timerRun+0x160>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 8000f70:	4b3f      	ldr	r3, [pc, #252]	; (8001070 <timerRun+0x164>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	dd0b      	ble.n	8000f90 <timerRun+0x84>
		timer4_counter--;
 8000f78:	4b3d      	ldr	r3, [pc, #244]	; (8001070 <timerRun+0x164>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	4a3c      	ldr	r2, [pc, #240]	; (8001070 <timerRun+0x164>)
 8000f80:	6013      	str	r3, [r2, #0]
		if(timer4_counter == 0){
 8000f82:	4b3b      	ldr	r3, [pc, #236]	; (8001070 <timerRun+0x164>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d102      	bne.n	8000f90 <timerRun+0x84>
			timer4_flag = 1;
 8000f8a:	4b3a      	ldr	r3, [pc, #232]	; (8001074 <timerRun+0x168>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer5_counter > 0){
 8000f90:	4b39      	ldr	r3, [pc, #228]	; (8001078 <timerRun+0x16c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	dd0b      	ble.n	8000fb0 <timerRun+0xa4>
		timer5_counter--;
 8000f98:	4b37      	ldr	r3, [pc, #220]	; (8001078 <timerRun+0x16c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	4a36      	ldr	r2, [pc, #216]	; (8001078 <timerRun+0x16c>)
 8000fa0:	6013      	str	r3, [r2, #0]
		if(timer5_counter == 0){
 8000fa2:	4b35      	ldr	r3, [pc, #212]	; (8001078 <timerRun+0x16c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d102      	bne.n	8000fb0 <timerRun+0xa4>
			timer5_flag = 1;
 8000faa:	4b34      	ldr	r3, [pc, #208]	; (800107c <timerRun+0x170>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer6_counter > 0){
 8000fb0:	4b33      	ldr	r3, [pc, #204]	; (8001080 <timerRun+0x174>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	dd0b      	ble.n	8000fd0 <timerRun+0xc4>
		timer6_counter--;
 8000fb8:	4b31      	ldr	r3, [pc, #196]	; (8001080 <timerRun+0x174>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	4a30      	ldr	r2, [pc, #192]	; (8001080 <timerRun+0x174>)
 8000fc0:	6013      	str	r3, [r2, #0]
		if(timer6_counter == 0){
 8000fc2:	4b2f      	ldr	r3, [pc, #188]	; (8001080 <timerRun+0x174>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d102      	bne.n	8000fd0 <timerRun+0xc4>
			timer6_flag = 1;
 8000fca:	4b2e      	ldr	r3, [pc, #184]	; (8001084 <timerRun+0x178>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer7_counter > 0){
 8000fd0:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <timerRun+0x17c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	dd0b      	ble.n	8000ff0 <timerRun+0xe4>
		timer7_counter--;
 8000fd8:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <timerRun+0x17c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	4a2a      	ldr	r2, [pc, #168]	; (8001088 <timerRun+0x17c>)
 8000fe0:	6013      	str	r3, [r2, #0]
		if(timer7_counter == 0){
 8000fe2:	4b29      	ldr	r3, [pc, #164]	; (8001088 <timerRun+0x17c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d102      	bne.n	8000ff0 <timerRun+0xe4>
			timer7_flag = 1;
 8000fea:	4b28      	ldr	r3, [pc, #160]	; (800108c <timerRun+0x180>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer8_counter > 0){
 8000ff0:	4b27      	ldr	r3, [pc, #156]	; (8001090 <timerRun+0x184>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	dd0b      	ble.n	8001010 <timerRun+0x104>
		timer8_counter--;
 8000ff8:	4b25      	ldr	r3, [pc, #148]	; (8001090 <timerRun+0x184>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	4a24      	ldr	r2, [pc, #144]	; (8001090 <timerRun+0x184>)
 8001000:	6013      	str	r3, [r2, #0]
		if(timer8_counter == 0){
 8001002:	4b23      	ldr	r3, [pc, #140]	; (8001090 <timerRun+0x184>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d102      	bne.n	8001010 <timerRun+0x104>
			timer8_flag = 1;
 800100a:	4b22      	ldr	r3, [pc, #136]	; (8001094 <timerRun+0x188>)
 800100c:	2201      	movs	r2, #1
 800100e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer9_counter > 0){
 8001010:	4b21      	ldr	r3, [pc, #132]	; (8001098 <timerRun+0x18c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	dd0b      	ble.n	8001030 <timerRun+0x124>
		timer9_counter--;
 8001018:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <timerRun+0x18c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	3b01      	subs	r3, #1
 800101e:	4a1e      	ldr	r2, [pc, #120]	; (8001098 <timerRun+0x18c>)
 8001020:	6013      	str	r3, [r2, #0]
		if(timer9_counter == 0){
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <timerRun+0x18c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d102      	bne.n	8001030 <timerRun+0x124>
			timer9_flag = 1;
 800102a:	4b1c      	ldr	r3, [pc, #112]	; (800109c <timerRun+0x190>)
 800102c:	2201      	movs	r2, #1
 800102e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer10_counter > 0){
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <timerRun+0x194>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	dd0b      	ble.n	8001050 <timerRun+0x144>
		timer10_counter--;
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <timerRun+0x194>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	3b01      	subs	r3, #1
 800103e:	4a18      	ldr	r2, [pc, #96]	; (80010a0 <timerRun+0x194>)
 8001040:	6013      	str	r3, [r2, #0]
		if(timer10_counter == 0){
 8001042:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <timerRun+0x194>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d102      	bne.n	8001050 <timerRun+0x144>
			timer10_flag = 1;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <timerRun+0x198>)
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr
 8001058:	200001e8 	.word	0x200001e8
 800105c:	200001ec 	.word	0x200001ec
 8001060:	200001f0 	.word	0x200001f0
 8001064:	200001f4 	.word	0x200001f4
 8001068:	200001f8 	.word	0x200001f8
 800106c:	200001fc 	.word	0x200001fc
 8001070:	20000200 	.word	0x20000200
 8001074:	20000204 	.word	0x20000204
 8001078:	20000208 	.word	0x20000208
 800107c:	2000020c 	.word	0x2000020c
 8001080:	20000210 	.word	0x20000210
 8001084:	20000214 	.word	0x20000214
 8001088:	20000218 	.word	0x20000218
 800108c:	2000021c 	.word	0x2000021c
 8001090:	20000220 	.word	0x20000220
 8001094:	20000224 	.word	0x20000224
 8001098:	20000228 	.word	0x20000228
 800109c:	2000022c 	.word	0x2000022c
 80010a0:	20000230 	.word	0x20000230
 80010a4:	20000234 	.word	0x20000234

080010a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_MspInit+0x5c>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	4a14      	ldr	r2, [pc, #80]	; (8001104 <HAL_MspInit+0x5c>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6193      	str	r3, [r2, #24]
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_MspInit+0x5c>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <HAL_MspInit+0x5c>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <HAL_MspInit+0x5c>)
 80010cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d0:	61d3      	str	r3, [r2, #28]
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_MspInit+0x5c>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_MspInit+0x60>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_MspInit+0x60>)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	40021000 	.word	0x40021000
 8001108:	40010000 	.word	0x40010000

0800110c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a15      	ldr	r2, [pc, #84]	; (800117c <HAL_I2C_MspInit+0x70>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d123      	bne.n	8001174 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <HAL_I2C_MspInit+0x74>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a13      	ldr	r2, [pc, #76]	; (8001180 <HAL_I2C_MspInit+0x74>)
 8001132:	f043 0308 	orr.w	r3, r3, #8
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <HAL_I2C_MspInit+0x74>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f003 0308 	and.w	r3, r3, #8
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001144:	23c0      	movs	r3, #192	; 0xc0
 8001146:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001148:	2312      	movs	r3, #18
 800114a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	4619      	mov	r1, r3
 8001156:	480b      	ldr	r0, [pc, #44]	; (8001184 <HAL_I2C_MspInit+0x78>)
 8001158:	f000 fc22 	bl	80019a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <HAL_I2C_MspInit+0x74>)
 800115e:	69db      	ldr	r3, [r3, #28]
 8001160:	4a07      	ldr	r2, [pc, #28]	; (8001180 <HAL_I2C_MspInit+0x74>)
 8001162:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001166:	61d3      	str	r3, [r2, #28]
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_I2C_MspInit+0x74>)
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001174:	bf00      	nop
 8001176:	3720      	adds	r7, #32
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40005400 	.word	0x40005400
 8001180:	40021000 	.word	0x40021000
 8001184:	40010c00 	.word	0x40010c00

08001188 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001198:	d113      	bne.n	80011c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HAL_TIM_Base_MspInit+0x44>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <HAL_TIM_Base_MspInit+0x44>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	61d3      	str	r3, [r2, #28]
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_TIM_Base_MspInit+0x44>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	201c      	movs	r0, #28
 80011b8:	f000 fb0b 	bl	80017d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011bc:	201c      	movs	r0, #28
 80011be:	f000 fb24 	bl	800180a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000

080011d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a20      	ldr	r2, [pc, #128]	; (800126c <HAL_UART_MspInit+0x9c>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d139      	bne.n	8001264 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <HAL_UART_MspInit+0xa0>)
 80011f2:	69db      	ldr	r3, [r3, #28]
 80011f4:	4a1e      	ldr	r2, [pc, #120]	; (8001270 <HAL_UART_MspInit+0xa0>)
 80011f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011fa:	61d3      	str	r3, [r2, #28]
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <HAL_UART_MspInit+0xa0>)
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <HAL_UART_MspInit+0xa0>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a18      	ldr	r2, [pc, #96]	; (8001270 <HAL_UART_MspInit+0xa0>)
 800120e:	f043 0308 	orr.w	r3, r3, #8
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b16      	ldr	r3, [pc, #88]	; (8001270 <HAL_UART_MspInit+0xa0>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001224:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800122a:	2303      	movs	r3, #3
 800122c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	f107 0310 	add.w	r3, r7, #16
 8001232:	4619      	mov	r1, r3
 8001234:	480f      	ldr	r0, [pc, #60]	; (8001274 <HAL_UART_MspInit+0xa4>)
 8001236:	f000 fbb3 	bl	80019a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800123a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800123e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	4619      	mov	r1, r3
 800124e:	4809      	ldr	r0, [pc, #36]	; (8001274 <HAL_UART_MspInit+0xa4>)
 8001250:	f000 fba6 	bl	80019a0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2100      	movs	r1, #0
 8001258:	2027      	movs	r0, #39	; 0x27
 800125a:	f000 faba 	bl	80017d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800125e:	2027      	movs	r0, #39	; 0x27
 8001260:	f000 fad3 	bl	800180a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001264:	bf00      	nop
 8001266:	3720      	adds	r7, #32
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40004800 	.word	0x40004800
 8001270:	40021000 	.word	0x40021000
 8001274:	40010c00 	.word	0x40010c00

08001278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800127c:	e7fe      	b.n	800127c <NMI_Handler+0x4>

0800127e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <HardFault_Handler+0x4>

08001284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <MemManage_Handler+0x4>

0800128a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128e:	e7fe      	b.n	800128e <BusFault_Handler+0x4>

08001290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <UsageFault_Handler+0x4>

08001296 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr

080012a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr

080012ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012be:	f000 f971 	bl	80015a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <TIM2_IRQHandler+0x10>)
 80012ce:	f001 fe23 	bl	8002f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	2000015c 	.word	0x2000015c

080012dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012e0:	4802      	ldr	r0, [pc, #8]	; (80012ec <USART3_IRQHandler+0x10>)
 80012e2:	f002 fa81 	bl	80037e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200001a4 	.word	0x200001a4

080012f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f8:	4a14      	ldr	r2, [pc, #80]	; (800134c <_sbrk+0x5c>)
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <_sbrk+0x60>)
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <_sbrk+0x64>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d102      	bne.n	8001312 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <_sbrk+0x64>)
 800130e:	4a12      	ldr	r2, [pc, #72]	; (8001358 <_sbrk+0x68>)
 8001310:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <_sbrk+0x64>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	429a      	cmp	r2, r3
 800131e:	d207      	bcs.n	8001330 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001320:	f002 fe8a 	bl	8004038 <__errno>
 8001324:	4603      	mov	r3, r0
 8001326:	220c      	movs	r2, #12
 8001328:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
 800132e:	e009      	b.n	8001344 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <_sbrk+0x64>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001336:	4b07      	ldr	r3, [pc, #28]	; (8001354 <_sbrk+0x64>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	4a05      	ldr	r2, [pc, #20]	; (8001354 <_sbrk+0x64>)
 8001340:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001342:	68fb      	ldr	r3, [r7, #12]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20005000 	.word	0x20005000
 8001350:	00000400 	.word	0x00000400
 8001354:	20000238 	.word	0x20000238
 8001358:	20000298 	.word	0x20000298

0800135c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <isCmdEqualToRST>:
uint8_t cmd_flag = INIT_UART;
uint8_t cmd_data[MAX_CMD_SIZE];
uint8_t traveler = 0;
uint8_t cmd_index = 0;

int isCmdEqualToRST(uint8_t str[]){
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	int flag = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
	if (str[0] == 'R' && str[1] == 'S' && str[2] == 'T')
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b52      	cmp	r3, #82	; 0x52
 800137a:	d10c      	bne.n	8001396 <isCmdEqualToRST+0x2e>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3301      	adds	r3, #1
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b53      	cmp	r3, #83	; 0x53
 8001384:	d107      	bne.n	8001396 <isCmdEqualToRST+0x2e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3302      	adds	r3, #2
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b54      	cmp	r3, #84	; 0x54
 800138e:	d102      	bne.n	8001396 <isCmdEqualToRST+0x2e>
		flag = 1;
 8001390:	2301      	movs	r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	e001      	b.n	800139a <isCmdEqualToRST+0x32>
	else
		flag = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
	return flag;
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <isCmdEqualToOK>:

int isCmdEqualToOK(uint8_t str[]){
 80013a6:	b480      	push	{r7}
 80013a8:	b085      	sub	sp, #20
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
	int flag = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
	if (str[0] == 'O' && str[1] == 'K')
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b4f      	cmp	r3, #79	; 0x4f
 80013b8:	d107      	bne.n	80013ca <isCmdEqualToOK+0x24>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3301      	adds	r3, #1
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b4b      	cmp	r3, #75	; 0x4b
 80013c2:	d102      	bne.n	80013ca <isCmdEqualToOK+0x24>
		flag = 1;
 80013c4:	2301      	movs	r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	e001      	b.n	80013ce <isCmdEqualToOK+0x28>
	else
		flag = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
	return flag;
 80013ce:	68fb      	ldr	r3, [r7, #12]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
	...

080013dc <cmd_parser_fsm>:

void cmd_parser_fsm(){
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	switch(status1){
 80013e0:	4b28      	ldr	r3, [pc, #160]	; (8001484 <cmd_parser_fsm+0xa8>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d02f      	beq.n	8001448 <cmd_parser_fsm+0x6c>
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	dc44      	bgt.n	8001476 <cmd_parser_fsm+0x9a>
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <cmd_parser_fsm+0x1a>
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d008      	beq.n	8001406 <cmd_parser_fsm+0x2a>
				cmd_flag = OK;
			}
			status1 = INIT_UART;
			break;
		default:
			break;
 80013f4:	e03f      	b.n	8001476 <cmd_parser_fsm+0x9a>
			if (buffer_byte == '!') status1 = READING;
 80013f6:	4b24      	ldr	r3, [pc, #144]	; (8001488 <cmd_parser_fsm+0xac>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b21      	cmp	r3, #33	; 0x21
 80013fc:	d13d      	bne.n	800147a <cmd_parser_fsm+0x9e>
 80013fe:	4b21      	ldr	r3, [pc, #132]	; (8001484 <cmd_parser_fsm+0xa8>)
 8001400:	2201      	movs	r2, #1
 8001402:	601a      	str	r2, [r3, #0]
			break;
 8001404:	e039      	b.n	800147a <cmd_parser_fsm+0x9e>
			if (buffer_byte != '!' && buffer_byte != '#'){
 8001406:	4b20      	ldr	r3, [pc, #128]	; (8001488 <cmd_parser_fsm+0xac>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b21      	cmp	r3, #33	; 0x21
 800140c:	d011      	beq.n	8001432 <cmd_parser_fsm+0x56>
 800140e:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <cmd_parser_fsm+0xac>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b23      	cmp	r3, #35	; 0x23
 8001414:	d00d      	beq.n	8001432 <cmd_parser_fsm+0x56>
				cmd_data[cmd_index] = buffer_byte;
 8001416:	4b1d      	ldr	r3, [pc, #116]	; (800148c <cmd_parser_fsm+0xb0>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	461a      	mov	r2, r3
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <cmd_parser_fsm+0xac>)
 800141e:	7819      	ldrb	r1, [r3, #0]
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <cmd_parser_fsm+0xb4>)
 8001422:	5499      	strb	r1, [r3, r2]
				cmd_index++;
 8001424:	4b19      	ldr	r3, [pc, #100]	; (800148c <cmd_parser_fsm+0xb0>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	3301      	adds	r3, #1
 800142a:	b2da      	uxtb	r2, r3
 800142c:	4b17      	ldr	r3, [pc, #92]	; (800148c <cmd_parser_fsm+0xb0>)
 800142e:	701a      	strb	r2, [r3, #0]
			break;
 8001430:	e025      	b.n	800147e <cmd_parser_fsm+0xa2>
			else if (buffer_byte == '#'){
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <cmd_parser_fsm+0xac>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b23      	cmp	r3, #35	; 0x23
 8001438:	d121      	bne.n	800147e <cmd_parser_fsm+0xa2>
				status1 = STOP;
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <cmd_parser_fsm+0xa8>)
 800143c:	2202      	movs	r2, #2
 800143e:	601a      	str	r2, [r3, #0]
				cmd_index = 0;
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <cmd_parser_fsm+0xb0>)
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
			break;
 8001446:	e01a      	b.n	800147e <cmd_parser_fsm+0xa2>
			if (isCmdEqualToRST(cmd_data)==1){
 8001448:	4811      	ldr	r0, [pc, #68]	; (8001490 <cmd_parser_fsm+0xb4>)
 800144a:	f7ff ff8d 	bl	8001368 <isCmdEqualToRST>
 800144e:	4603      	mov	r3, r0
 8001450:	2b01      	cmp	r3, #1
 8001452:	d103      	bne.n	800145c <cmd_parser_fsm+0x80>
				cmd_flag = RST;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <cmd_parser_fsm+0xb8>)
 8001456:	2208      	movs	r2, #8
 8001458:	701a      	strb	r2, [r3, #0]
 800145a:	e008      	b.n	800146e <cmd_parser_fsm+0x92>
			else if (isCmdEqualToOK(cmd_data)==1){
 800145c:	480c      	ldr	r0, [pc, #48]	; (8001490 <cmd_parser_fsm+0xb4>)
 800145e:	f7ff ffa2 	bl	80013a6 <isCmdEqualToOK>
 8001462:	4603      	mov	r3, r0
 8001464:	2b01      	cmp	r3, #1
 8001466:	d102      	bne.n	800146e <cmd_parser_fsm+0x92>
				cmd_flag = OK;
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <cmd_parser_fsm+0xb8>)
 800146a:	2209      	movs	r2, #9
 800146c:	701a      	strb	r2, [r3, #0]
			status1 = INIT_UART;
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <cmd_parser_fsm+0xa8>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
			break;
 8001474:	e004      	b.n	8001480 <cmd_parser_fsm+0xa4>
			break;
 8001476:	bf00      	nop
 8001478:	e002      	b.n	8001480 <cmd_parser_fsm+0xa4>
			break;
 800147a:	bf00      	nop
 800147c:	e000      	b.n	8001480 <cmd_parser_fsm+0xa4>
			break;
 800147e:	bf00      	nop
	}
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000274 	.word	0x20000274
 8001488:	2000023c 	.word	0x2000023c
 800148c:	2000027f 	.word	0x2000027f
 8001490:	2000027c 	.word	0x2000027c
 8001494:	20000278 	.word	0x20000278

08001498 <uart_comms_fsm>:
//		default:
//			break;
//		}
//}

void uart_comms_fsm(){
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
	if (cmd_flag == RST)
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <uart_comms_fsm+0x2c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d103      	bne.n	80014ac <uart_comms_fsm+0x14>
		HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 80014a4:	2104      	movs	r1, #4
 80014a6:	4808      	ldr	r0, [pc, #32]	; (80014c8 <uart_comms_fsm+0x30>)
 80014a8:	f000 fc16 	bl	8001cd8 <HAL_GPIO_TogglePin>
//		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, SET);
	if (cmd_flag == OK)
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <uart_comms_fsm+0x2c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b09      	cmp	r3, #9
 80014b2:	d104      	bne.n	80014be <uart_comms_fsm+0x26>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2104      	movs	r1, #4
 80014b8:	4803      	ldr	r0, [pc, #12]	; (80014c8 <uart_comms_fsm+0x30>)
 80014ba:	f000 fbf5 	bl	8001ca8 <HAL_GPIO_WritePin>
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000278 	.word	0x20000278
 80014c8:	40010c00 	.word	0x40010c00

080014cc <Reset_Handler>:
 80014cc:	480c      	ldr	r0, [pc, #48]	; (8001500 <LoopFillZerobss+0x12>)
 80014ce:	490d      	ldr	r1, [pc, #52]	; (8001504 <LoopFillZerobss+0x16>)
 80014d0:	4a0d      	ldr	r2, [pc, #52]	; (8001508 <LoopFillZerobss+0x1a>)
 80014d2:	2300      	movs	r3, #0
 80014d4:	e002      	b.n	80014dc <LoopCopyDataInit>

080014d6 <CopyDataInit>:
 80014d6:	58d4      	ldr	r4, [r2, r3]
 80014d8:	50c4      	str	r4, [r0, r3]
 80014da:	3304      	adds	r3, #4

080014dc <LoopCopyDataInit>:
 80014dc:	18c4      	adds	r4, r0, r3
 80014de:	428c      	cmp	r4, r1
 80014e0:	d3f9      	bcc.n	80014d6 <CopyDataInit>
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <LoopFillZerobss+0x1e>)
 80014e4:	4c0a      	ldr	r4, [pc, #40]	; (8001510 <LoopFillZerobss+0x22>)
 80014e6:	2300      	movs	r3, #0
 80014e8:	e001      	b.n	80014ee <LoopFillZerobss>

080014ea <FillZerobss>:
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	3204      	adds	r2, #4

080014ee <LoopFillZerobss>:
 80014ee:	42a2      	cmp	r2, r4
 80014f0:	d3fb      	bcc.n	80014ea <FillZerobss>
 80014f2:	f7ff ff33 	bl	800135c <SystemInit>
 80014f6:	f002 fda5 	bl	8004044 <__libc_init_array>
 80014fa:	f7ff fb31 	bl	8000b60 <main>
 80014fe:	4770      	bx	lr
 8001500:	20000000 	.word	0x20000000
 8001504:	20000080 	.word	0x20000080
 8001508:	08004a88 	.word	0x08004a88
 800150c:	20000080 	.word	0x20000080
 8001510:	20000294 	.word	0x20000294

08001514 <ADC1_2_IRQHandler>:
 8001514:	e7fe      	b.n	8001514 <ADC1_2_IRQHandler>
	...

08001518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <HAL_Init+0x28>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a07      	ldr	r2, [pc, #28]	; (8001540 <HAL_Init+0x28>)
 8001522:	f043 0310 	orr.w	r3, r3, #16
 8001526:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001528:	2003      	movs	r0, #3
 800152a:	f000 f947 	bl	80017bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800152e:	200f      	movs	r0, #15
 8001530:	f000 f808 	bl	8001544 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001534:	f7ff fdb8 	bl	80010a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40022000 	.word	0x40022000

08001544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <HAL_InitTick+0x54>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_InitTick+0x58>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	4619      	mov	r1, r3
 8001556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155a:	fbb3 f3f1 	udiv	r3, r3, r1
 800155e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001562:	4618      	mov	r0, r3
 8001564:	f000 f95f 	bl	8001826 <HAL_SYSTICK_Config>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e00e      	b.n	8001590 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b0f      	cmp	r3, #15
 8001576:	d80a      	bhi.n	800158e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001578:	2200      	movs	r2, #0
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	f04f 30ff 	mov.w	r0, #4294967295
 8001580:	f000 f927 	bl	80017d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001584:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <HAL_InitTick+0x5c>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
 800158c:	e000      	b.n	8001590 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
}
 8001590:	4618      	mov	r0, r3
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000010 	.word	0x20000010
 800159c:	20000018 	.word	0x20000018
 80015a0:	20000014 	.word	0x20000014

080015a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <HAL_IncTick+0x1c>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <HAL_IncTick+0x20>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4413      	add	r3, r2
 80015b4:	4a03      	ldr	r2, [pc, #12]	; (80015c4 <HAL_IncTick+0x20>)
 80015b6:	6013      	str	r3, [r2, #0]
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	20000018 	.word	0x20000018
 80015c4:	20000280 	.word	0x20000280

080015c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return uwTick;
 80015cc:	4b02      	ldr	r3, [pc, #8]	; (80015d8 <HAL_GetTick+0x10>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	20000280 	.word	0x20000280

080015dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e4:	f7ff fff0 	bl	80015c8 <HAL_GetTick>
 80015e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f4:	d005      	beq.n	8001602 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_Delay+0x44>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4413      	add	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001602:	bf00      	nop
 8001604:	f7ff ffe0 	bl	80015c8 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	429a      	cmp	r2, r3
 8001612:	d8f7      	bhi.n	8001604 <HAL_Delay+0x28>
  {
  }
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000018 	.word	0x20000018

08001624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001640:	4013      	ands	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800164c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001656:	4a04      	ldr	r2, [pc, #16]	; (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	60d3      	str	r3, [r2, #12]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <__NVIC_GetPriorityGrouping+0x18>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	f003 0307 	and.w	r3, r3, #7
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	2b00      	cmp	r3, #0
 8001698:	db0b      	blt.n	80016b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f003 021f 	and.w	r2, r3, #31
 80016a0:	4906      	ldr	r1, [pc, #24]	; (80016bc <__NVIC_EnableIRQ+0x34>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	2001      	movs	r0, #1
 80016aa:	fa00 f202 	lsl.w	r2, r0, r2
 80016ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	; (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f1c3 0307 	rsb	r3, r3, #7
 800172e:	2b04      	cmp	r3, #4
 8001730:	bf28      	it	cs
 8001732:	2304      	movcs	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	2b06      	cmp	r3, #6
 800173c:	d902      	bls.n	8001744 <NVIC_EncodePriority+0x30>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b03      	subs	r3, #3
 8001742:	e000      	b.n	8001746 <NVIC_EncodePriority+0x32>
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800175c:	f04f 31ff 	mov.w	r1, #4294967295
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43d9      	mvns	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	4313      	orrs	r3, r2
         );
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3b01      	subs	r3, #1
 8001784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001788:	d301      	bcc.n	800178e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178a:	2301      	movs	r3, #1
 800178c:	e00f      	b.n	80017ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <SysTick_Config+0x40>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3b01      	subs	r3, #1
 8001794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001796:	210f      	movs	r1, #15
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	f7ff ff90 	bl	80016c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <SysTick_Config+0x40>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a6:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <SysTick_Config+0x40>)
 80017a8:	2207      	movs	r2, #7
 80017aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	e000e010 	.word	0xe000e010

080017bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ff2d 	bl	8001624 <__NVIC_SetPriorityGrouping>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	4603      	mov	r3, r0
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e4:	f7ff ff42 	bl	800166c <__NVIC_GetPriorityGrouping>
 80017e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	68b9      	ldr	r1, [r7, #8]
 80017ee:	6978      	ldr	r0, [r7, #20]
 80017f0:	f7ff ff90 	bl	8001714 <NVIC_EncodePriority>
 80017f4:	4602      	mov	r2, r0
 80017f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fa:	4611      	mov	r1, r2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff5f 	bl	80016c0 <__NVIC_SetPriority>
}
 8001802:	bf00      	nop
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	4603      	mov	r3, r0
 8001812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff35 	bl	8001688 <__NVIC_EnableIRQ>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ffa2 	bl	8001778 <SysTick_Config>
 8001834:	4603      	mov	r3, r0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800183e:	b480      	push	{r7}
 8001840:	b085      	sub	sp, #20
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001846:	2300      	movs	r3, #0
 8001848:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001850:	2b02      	cmp	r3, #2
 8001852:	d008      	beq.n	8001866 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2204      	movs	r2, #4
 8001858:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e020      	b.n	80018a8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 020e 	bic.w	r2, r2, #14
 8001874:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0201 	bic.w	r2, r2, #1
 8001884:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800188e:	2101      	movs	r1, #1
 8001890:	fa01 f202 	lsl.w	r2, r1, r2
 8001894:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
	...

080018b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018bc:	2300      	movs	r3, #0
 80018be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d005      	beq.n	80018d6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2204      	movs	r2, #4
 80018ce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	73fb      	strb	r3, [r7, #15]
 80018d4:	e051      	b.n	800197a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 020e 	bic.w	r2, r2, #14
 80018e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0201 	bic.w	r2, r2, #1
 80018f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a22      	ldr	r2, [pc, #136]	; (8001984 <HAL_DMA_Abort_IT+0xd0>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d029      	beq.n	8001954 <HAL_DMA_Abort_IT+0xa0>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a20      	ldr	r2, [pc, #128]	; (8001988 <HAL_DMA_Abort_IT+0xd4>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d022      	beq.n	8001950 <HAL_DMA_Abort_IT+0x9c>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a1f      	ldr	r2, [pc, #124]	; (800198c <HAL_DMA_Abort_IT+0xd8>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d01a      	beq.n	800194a <HAL_DMA_Abort_IT+0x96>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a1d      	ldr	r2, [pc, #116]	; (8001990 <HAL_DMA_Abort_IT+0xdc>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d012      	beq.n	8001944 <HAL_DMA_Abort_IT+0x90>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a1c      	ldr	r2, [pc, #112]	; (8001994 <HAL_DMA_Abort_IT+0xe0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d00a      	beq.n	800193e <HAL_DMA_Abort_IT+0x8a>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a1a      	ldr	r2, [pc, #104]	; (8001998 <HAL_DMA_Abort_IT+0xe4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d102      	bne.n	8001938 <HAL_DMA_Abort_IT+0x84>
 8001932:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001936:	e00e      	b.n	8001956 <HAL_DMA_Abort_IT+0xa2>
 8001938:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800193c:	e00b      	b.n	8001956 <HAL_DMA_Abort_IT+0xa2>
 800193e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001942:	e008      	b.n	8001956 <HAL_DMA_Abort_IT+0xa2>
 8001944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001948:	e005      	b.n	8001956 <HAL_DMA_Abort_IT+0xa2>
 800194a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800194e:	e002      	b.n	8001956 <HAL_DMA_Abort_IT+0xa2>
 8001950:	2310      	movs	r3, #16
 8001952:	e000      	b.n	8001956 <HAL_DMA_Abort_IT+0xa2>
 8001954:	2301      	movs	r3, #1
 8001956:	4a11      	ldr	r2, [pc, #68]	; (800199c <HAL_DMA_Abort_IT+0xe8>)
 8001958:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	4798      	blx	r3
    } 
  }
  return status;
 800197a:	7bfb      	ldrb	r3, [r7, #15]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40020008 	.word	0x40020008
 8001988:	4002001c 	.word	0x4002001c
 800198c:	40020030 	.word	0x40020030
 8001990:	40020044 	.word	0x40020044
 8001994:	40020058 	.word	0x40020058
 8001998:	4002006c 	.word	0x4002006c
 800199c:	40020000 	.word	0x40020000

080019a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b08b      	sub	sp, #44	; 0x2c
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019aa:	2300      	movs	r3, #0
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019ae:	2300      	movs	r3, #0
 80019b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b2:	e169      	b.n	8001c88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019b4:	2201      	movs	r2, #1
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	69fa      	ldr	r2, [r7, #28]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	f040 8158 	bne.w	8001c82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	4a9a      	ldr	r2, [pc, #616]	; (8001c40 <HAL_GPIO_Init+0x2a0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d05e      	beq.n	8001a9a <HAL_GPIO_Init+0xfa>
 80019dc:	4a98      	ldr	r2, [pc, #608]	; (8001c40 <HAL_GPIO_Init+0x2a0>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d875      	bhi.n	8001ace <HAL_GPIO_Init+0x12e>
 80019e2:	4a98      	ldr	r2, [pc, #608]	; (8001c44 <HAL_GPIO_Init+0x2a4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d058      	beq.n	8001a9a <HAL_GPIO_Init+0xfa>
 80019e8:	4a96      	ldr	r2, [pc, #600]	; (8001c44 <HAL_GPIO_Init+0x2a4>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d86f      	bhi.n	8001ace <HAL_GPIO_Init+0x12e>
 80019ee:	4a96      	ldr	r2, [pc, #600]	; (8001c48 <HAL_GPIO_Init+0x2a8>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d052      	beq.n	8001a9a <HAL_GPIO_Init+0xfa>
 80019f4:	4a94      	ldr	r2, [pc, #592]	; (8001c48 <HAL_GPIO_Init+0x2a8>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d869      	bhi.n	8001ace <HAL_GPIO_Init+0x12e>
 80019fa:	4a94      	ldr	r2, [pc, #592]	; (8001c4c <HAL_GPIO_Init+0x2ac>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d04c      	beq.n	8001a9a <HAL_GPIO_Init+0xfa>
 8001a00:	4a92      	ldr	r2, [pc, #584]	; (8001c4c <HAL_GPIO_Init+0x2ac>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d863      	bhi.n	8001ace <HAL_GPIO_Init+0x12e>
 8001a06:	4a92      	ldr	r2, [pc, #584]	; (8001c50 <HAL_GPIO_Init+0x2b0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d046      	beq.n	8001a9a <HAL_GPIO_Init+0xfa>
 8001a0c:	4a90      	ldr	r2, [pc, #576]	; (8001c50 <HAL_GPIO_Init+0x2b0>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d85d      	bhi.n	8001ace <HAL_GPIO_Init+0x12e>
 8001a12:	2b12      	cmp	r3, #18
 8001a14:	d82a      	bhi.n	8001a6c <HAL_GPIO_Init+0xcc>
 8001a16:	2b12      	cmp	r3, #18
 8001a18:	d859      	bhi.n	8001ace <HAL_GPIO_Init+0x12e>
 8001a1a:	a201      	add	r2, pc, #4	; (adr r2, 8001a20 <HAL_GPIO_Init+0x80>)
 8001a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a20:	08001a9b 	.word	0x08001a9b
 8001a24:	08001a75 	.word	0x08001a75
 8001a28:	08001a87 	.word	0x08001a87
 8001a2c:	08001ac9 	.word	0x08001ac9
 8001a30:	08001acf 	.word	0x08001acf
 8001a34:	08001acf 	.word	0x08001acf
 8001a38:	08001acf 	.word	0x08001acf
 8001a3c:	08001acf 	.word	0x08001acf
 8001a40:	08001acf 	.word	0x08001acf
 8001a44:	08001acf 	.word	0x08001acf
 8001a48:	08001acf 	.word	0x08001acf
 8001a4c:	08001acf 	.word	0x08001acf
 8001a50:	08001acf 	.word	0x08001acf
 8001a54:	08001acf 	.word	0x08001acf
 8001a58:	08001acf 	.word	0x08001acf
 8001a5c:	08001acf 	.word	0x08001acf
 8001a60:	08001acf 	.word	0x08001acf
 8001a64:	08001a7d 	.word	0x08001a7d
 8001a68:	08001a91 	.word	0x08001a91
 8001a6c:	4a79      	ldr	r2, [pc, #484]	; (8001c54 <HAL_GPIO_Init+0x2b4>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d013      	beq.n	8001a9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a72:	e02c      	b.n	8001ace <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	623b      	str	r3, [r7, #32]
          break;
 8001a7a:	e029      	b.n	8001ad0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	3304      	adds	r3, #4
 8001a82:	623b      	str	r3, [r7, #32]
          break;
 8001a84:	e024      	b.n	8001ad0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	3308      	adds	r3, #8
 8001a8c:	623b      	str	r3, [r7, #32]
          break;
 8001a8e:	e01f      	b.n	8001ad0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	330c      	adds	r3, #12
 8001a96:	623b      	str	r3, [r7, #32]
          break;
 8001a98:	e01a      	b.n	8001ad0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d102      	bne.n	8001aa8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	623b      	str	r3, [r7, #32]
          break;
 8001aa6:	e013      	b.n	8001ad0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d105      	bne.n	8001abc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ab0:	2308      	movs	r3, #8
 8001ab2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69fa      	ldr	r2, [r7, #28]
 8001ab8:	611a      	str	r2, [r3, #16]
          break;
 8001aba:	e009      	b.n	8001ad0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001abc:	2308      	movs	r3, #8
 8001abe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69fa      	ldr	r2, [r7, #28]
 8001ac4:	615a      	str	r2, [r3, #20]
          break;
 8001ac6:	e003      	b.n	8001ad0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	623b      	str	r3, [r7, #32]
          break;
 8001acc:	e000      	b.n	8001ad0 <HAL_GPIO_Init+0x130>
          break;
 8001ace:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	2bff      	cmp	r3, #255	; 0xff
 8001ad4:	d801      	bhi.n	8001ada <HAL_GPIO_Init+0x13a>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	e001      	b.n	8001ade <HAL_GPIO_Init+0x13e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3304      	adds	r3, #4
 8001ade:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	2bff      	cmp	r3, #255	; 0xff
 8001ae4:	d802      	bhi.n	8001aec <HAL_GPIO_Init+0x14c>
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	e002      	b.n	8001af2 <HAL_GPIO_Init+0x152>
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	3b08      	subs	r3, #8
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	210f      	movs	r1, #15
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	fa01 f303 	lsl.w	r3, r1, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	401a      	ands	r2, r3
 8001b04:	6a39      	ldr	r1, [r7, #32]
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 80b1 	beq.w	8001c82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b20:	4b4d      	ldr	r3, [pc, #308]	; (8001c58 <HAL_GPIO_Init+0x2b8>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	4a4c      	ldr	r2, [pc, #304]	; (8001c58 <HAL_GPIO_Init+0x2b8>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	6193      	str	r3, [r2, #24]
 8001b2c:	4b4a      	ldr	r3, [pc, #296]	; (8001c58 <HAL_GPIO_Init+0x2b8>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b38:	4a48      	ldr	r2, [pc, #288]	; (8001c5c <HAL_GPIO_Init+0x2bc>)
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	089b      	lsrs	r3, r3, #2
 8001b3e:	3302      	adds	r3, #2
 8001b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	220f      	movs	r2, #15
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a40      	ldr	r2, [pc, #256]	; (8001c60 <HAL_GPIO_Init+0x2c0>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d013      	beq.n	8001b8c <HAL_GPIO_Init+0x1ec>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a3f      	ldr	r2, [pc, #252]	; (8001c64 <HAL_GPIO_Init+0x2c4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d00d      	beq.n	8001b88 <HAL_GPIO_Init+0x1e8>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a3e      	ldr	r2, [pc, #248]	; (8001c68 <HAL_GPIO_Init+0x2c8>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d007      	beq.n	8001b84 <HAL_GPIO_Init+0x1e4>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a3d      	ldr	r2, [pc, #244]	; (8001c6c <HAL_GPIO_Init+0x2cc>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d101      	bne.n	8001b80 <HAL_GPIO_Init+0x1e0>
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e006      	b.n	8001b8e <HAL_GPIO_Init+0x1ee>
 8001b80:	2304      	movs	r3, #4
 8001b82:	e004      	b.n	8001b8e <HAL_GPIO_Init+0x1ee>
 8001b84:	2302      	movs	r3, #2
 8001b86:	e002      	b.n	8001b8e <HAL_GPIO_Init+0x1ee>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <HAL_GPIO_Init+0x1ee>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b90:	f002 0203 	and.w	r2, r2, #3
 8001b94:	0092      	lsls	r2, r2, #2
 8001b96:	4093      	lsls	r3, r2
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b9e:	492f      	ldr	r1, [pc, #188]	; (8001c5c <HAL_GPIO_Init+0x2bc>)
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	089b      	lsrs	r3, r3, #2
 8001ba4:	3302      	adds	r3, #2
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d006      	beq.n	8001bc6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bb8:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <HAL_GPIO_Init+0x2d0>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	492c      	ldr	r1, [pc, #176]	; (8001c70 <HAL_GPIO_Init+0x2d0>)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	600b      	str	r3, [r1, #0]
 8001bc4:	e006      	b.n	8001bd4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bc6:	4b2a      	ldr	r3, [pc, #168]	; (8001c70 <HAL_GPIO_Init+0x2d0>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	4928      	ldr	r1, [pc, #160]	; (8001c70 <HAL_GPIO_Init+0x2d0>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d006      	beq.n	8001bee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001be0:	4b23      	ldr	r3, [pc, #140]	; (8001c70 <HAL_GPIO_Init+0x2d0>)
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	4922      	ldr	r1, [pc, #136]	; (8001c70 <HAL_GPIO_Init+0x2d0>)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]
 8001bec:	e006      	b.n	8001bfc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bee:	4b20      	ldr	r3, [pc, #128]	; (8001c70 <HAL_GPIO_Init+0x2d0>)
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	491e      	ldr	r1, [pc, #120]	; (8001c70 <HAL_GPIO_Init+0x2d0>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d006      	beq.n	8001c16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c08:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <HAL_GPIO_Init+0x2d0>)
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	4918      	ldr	r1, [pc, #96]	; (8001c70 <HAL_GPIO_Init+0x2d0>)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	608b      	str	r3, [r1, #8]
 8001c14:	e006      	b.n	8001c24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c16:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <HAL_GPIO_Init+0x2d0>)
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	4914      	ldr	r1, [pc, #80]	; (8001c70 <HAL_GPIO_Init+0x2d0>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d021      	beq.n	8001c74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <HAL_GPIO_Init+0x2d0>)
 8001c32:	68da      	ldr	r2, [r3, #12]
 8001c34:	490e      	ldr	r1, [pc, #56]	; (8001c70 <HAL_GPIO_Init+0x2d0>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	60cb      	str	r3, [r1, #12]
 8001c3c:	e021      	b.n	8001c82 <HAL_GPIO_Init+0x2e2>
 8001c3e:	bf00      	nop
 8001c40:	10320000 	.word	0x10320000
 8001c44:	10310000 	.word	0x10310000
 8001c48:	10220000 	.word	0x10220000
 8001c4c:	10210000 	.word	0x10210000
 8001c50:	10120000 	.word	0x10120000
 8001c54:	10110000 	.word	0x10110000
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40010000 	.word	0x40010000
 8001c60:	40010800 	.word	0x40010800
 8001c64:	40010c00 	.word	0x40010c00
 8001c68:	40011000 	.word	0x40011000
 8001c6c:	40011400 	.word	0x40011400
 8001c70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <HAL_GPIO_Init+0x304>)
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	4909      	ldr	r1, [pc, #36]	; (8001ca4 <HAL_GPIO_Init+0x304>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	3301      	adds	r3, #1
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f47f ae8e 	bne.w	80019b4 <HAL_GPIO_Init+0x14>
  }
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	372c      	adds	r7, #44	; 0x2c
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	40010400 	.word	0x40010400

08001ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	807b      	strh	r3, [r7, #2]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cb8:	787b      	ldrb	r3, [r7, #1]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cbe:	887a      	ldrh	r2, [r7, #2]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cc4:	e003      	b.n	8001cce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cc6:	887b      	ldrh	r3, [r7, #2]
 8001cc8:	041a      	lsls	r2, r3, #16
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	611a      	str	r2, [r3, #16]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cea:	887a      	ldrh	r2, [r7, #2]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	041a      	lsls	r2, r3, #16
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	43d9      	mvns	r1, r3
 8001cf6:	887b      	ldrh	r3, [r7, #2]
 8001cf8:	400b      	ands	r3, r1
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	611a      	str	r2, [r3, #16]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
	...

08001d0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e12b      	b.n	8001f76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d106      	bne.n	8001d38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff f9ea 	bl	800110c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2224      	movs	r2, #36	; 0x24
 8001d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0201 	bic.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d70:	f000 ffea 	bl	8002d48 <HAL_RCC_GetPCLK1Freq>
 8001d74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4a81      	ldr	r2, [pc, #516]	; (8001f80 <HAL_I2C_Init+0x274>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d807      	bhi.n	8001d90 <HAL_I2C_Init+0x84>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4a80      	ldr	r2, [pc, #512]	; (8001f84 <HAL_I2C_Init+0x278>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	bf94      	ite	ls
 8001d88:	2301      	movls	r3, #1
 8001d8a:	2300      	movhi	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	e006      	b.n	8001d9e <HAL_I2C_Init+0x92>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4a7d      	ldr	r2, [pc, #500]	; (8001f88 <HAL_I2C_Init+0x27c>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	bf94      	ite	ls
 8001d98:	2301      	movls	r3, #1
 8001d9a:	2300      	movhi	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e0e7      	b.n	8001f76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4a78      	ldr	r2, [pc, #480]	; (8001f8c <HAL_I2C_Init+0x280>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	0c9b      	lsrs	r3, r3, #18
 8001db0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	4a6a      	ldr	r2, [pc, #424]	; (8001f80 <HAL_I2C_Init+0x274>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d802      	bhi.n	8001de0 <HAL_I2C_Init+0xd4>
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	e009      	b.n	8001df4 <HAL_I2C_Init+0xe8>
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001de6:	fb02 f303 	mul.w	r3, r2, r3
 8001dea:	4a69      	ldr	r2, [pc, #420]	; (8001f90 <HAL_I2C_Init+0x284>)
 8001dec:	fba2 2303 	umull	r2, r3, r2, r3
 8001df0:	099b      	lsrs	r3, r3, #6
 8001df2:	3301      	adds	r3, #1
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	430b      	orrs	r3, r1
 8001dfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	495c      	ldr	r1, [pc, #368]	; (8001f80 <HAL_I2C_Init+0x274>)
 8001e10:	428b      	cmp	r3, r1
 8001e12:	d819      	bhi.n	8001e48 <HAL_I2C_Init+0x13c>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	1e59      	subs	r1, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e22:	1c59      	adds	r1, r3, #1
 8001e24:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e28:	400b      	ands	r3, r1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00a      	beq.n	8001e44 <HAL_I2C_Init+0x138>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	1e59      	subs	r1, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e42:	e051      	b.n	8001ee8 <HAL_I2C_Init+0x1dc>
 8001e44:	2304      	movs	r3, #4
 8001e46:	e04f      	b.n	8001ee8 <HAL_I2C_Init+0x1dc>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d111      	bne.n	8001e74 <HAL_I2C_Init+0x168>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	1e58      	subs	r0, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6859      	ldr	r1, [r3, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	440b      	add	r3, r1
 8001e5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e62:	3301      	adds	r3, #1
 8001e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	bf0c      	ite	eq
 8001e6c:	2301      	moveq	r3, #1
 8001e6e:	2300      	movne	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	e012      	b.n	8001e9a <HAL_I2C_Init+0x18e>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	1e58      	subs	r0, r3, #1
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6859      	ldr	r1, [r3, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	0099      	lsls	r1, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	bf0c      	ite	eq
 8001e94:	2301      	moveq	r3, #1
 8001e96:	2300      	movne	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_I2C_Init+0x196>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e022      	b.n	8001ee8 <HAL_I2C_Init+0x1dc>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10e      	bne.n	8001ec8 <HAL_I2C_Init+0x1bc>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1e58      	subs	r0, r3, #1
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6859      	ldr	r1, [r3, #4]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	440b      	add	r3, r1
 8001eb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ec6:	e00f      	b.n	8001ee8 <HAL_I2C_Init+0x1dc>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1e58      	subs	r0, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6859      	ldr	r1, [r3, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	0099      	lsls	r1, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ede:	3301      	adds	r3, #1
 8001ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	6809      	ldr	r1, [r1, #0]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69da      	ldr	r2, [r3, #28]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6911      	ldr	r1, [r2, #16]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68d2      	ldr	r2, [r2, #12]
 8001f22:	4311      	orrs	r1, r2
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695a      	ldr	r2, [r3, #20]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2220      	movs	r2, #32
 8001f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	000186a0 	.word	0x000186a0
 8001f84:	001e847f 	.word	0x001e847f
 8001f88:	003d08ff 	.word	0x003d08ff
 8001f8c:	431bde83 	.word	0x431bde83
 8001f90:	10624dd3 	.word	0x10624dd3

08001f94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af02      	add	r7, sp, #8
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	817b      	strh	r3, [r7, #10]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fa8:	f7ff fb0e 	bl	80015c8 <HAL_GetTick>
 8001fac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b20      	cmp	r3, #32
 8001fb8:	f040 80e0 	bne.w	800217c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	2319      	movs	r3, #25
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	4970      	ldr	r1, [pc, #448]	; (8002188 <HAL_I2C_Master_Transmit+0x1f4>)
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f964 	bl	8002294 <I2C_WaitOnFlagUntilTimeout>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e0d3      	b.n	800217e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_I2C_Master_Transmit+0x50>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e0cc      	b.n	800217e <HAL_I2C_Master_Transmit+0x1ea>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d007      	beq.n	800200a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 0201 	orr.w	r2, r2, #1
 8002008:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002018:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2221      	movs	r2, #33	; 0x21
 800201e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2210      	movs	r2, #16
 8002026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	893a      	ldrh	r2, [r7, #8]
 800203a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002040:	b29a      	uxth	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4a50      	ldr	r2, [pc, #320]	; (800218c <HAL_I2C_Master_Transmit+0x1f8>)
 800204a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800204c:	8979      	ldrh	r1, [r7, #10]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	6a3a      	ldr	r2, [r7, #32]
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 f89c 	bl	8002190 <I2C_MasterRequestWrite>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e08d      	b.n	800217e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002078:	e066      	b.n	8002148 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	6a39      	ldr	r1, [r7, #32]
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 f9de 	bl	8002440 <I2C_WaitOnTXEFlagUntilTimeout>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00d      	beq.n	80020a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	2b04      	cmp	r3, #4
 8002090:	d107      	bne.n	80020a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e06b      	b.n	800217e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	781a      	ldrb	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	3b01      	subs	r3, #1
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d11b      	bne.n	800211c <HAL_I2C_Master_Transmit+0x188>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d017      	beq.n	800211c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	781a      	ldrb	r2, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002106:	b29b      	uxth	r3, r3
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002114:	3b01      	subs	r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	6a39      	ldr	r1, [r7, #32]
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f000 f9ce 	bl	80024c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00d      	beq.n	8002148 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	2b04      	cmp	r3, #4
 8002132:	d107      	bne.n	8002144 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002142:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e01a      	b.n	800217e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214c:	2b00      	cmp	r3, #0
 800214e:	d194      	bne.n	800207a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800215e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	e000      	b.n	800217e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800217c:	2302      	movs	r3, #2
  }
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	00100002 	.word	0x00100002
 800218c:	ffff0000 	.word	0xffff0000

08002190 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af02      	add	r7, sp, #8
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	460b      	mov	r3, r1
 800219e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d006      	beq.n	80021ba <I2C_MasterRequestWrite+0x2a>
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d003      	beq.n	80021ba <I2C_MasterRequestWrite+0x2a>
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021b8:	d108      	bne.n	80021cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	e00b      	b.n	80021e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	2b12      	cmp	r3, #18
 80021d2:	d107      	bne.n	80021e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 f84f 	bl	8002294 <I2C_WaitOnFlagUntilTimeout>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00d      	beq.n	8002218 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800220a:	d103      	bne.n	8002214 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002212:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e035      	b.n	8002284 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002220:	d108      	bne.n	8002234 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002222:	897b      	ldrh	r3, [r7, #10]
 8002224:	b2db      	uxtb	r3, r3
 8002226:	461a      	mov	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002230:	611a      	str	r2, [r3, #16]
 8002232:	e01b      	b.n	800226c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002234:	897b      	ldrh	r3, [r7, #10]
 8002236:	11db      	asrs	r3, r3, #7
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f003 0306 	and.w	r3, r3, #6
 800223e:	b2db      	uxtb	r3, r3
 8002240:	f063 030f 	orn	r3, r3, #15
 8002244:	b2da      	uxtb	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	490e      	ldr	r1, [pc, #56]	; (800228c <I2C_MasterRequestWrite+0xfc>)
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 f875 	bl	8002342 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e010      	b.n	8002284 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002262:	897b      	ldrh	r3, [r7, #10]
 8002264:	b2da      	uxtb	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	4907      	ldr	r1, [pc, #28]	; (8002290 <I2C_MasterRequestWrite+0x100>)
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 f865 	bl	8002342 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	00010008 	.word	0x00010008
 8002290:	00010002 	.word	0x00010002

08002294 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	4613      	mov	r3, r2
 80022a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022a4:	e025      	b.n	80022f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ac:	d021      	beq.n	80022f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ae:	f7ff f98b 	bl	80015c8 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d302      	bcc.n	80022c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d116      	bne.n	80022f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2220      	movs	r2, #32
 80022ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f043 0220 	orr.w	r2, r3, #32
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e023      	b.n	800233a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	0c1b      	lsrs	r3, r3, #16
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d10d      	bne.n	8002318 <I2C_WaitOnFlagUntilTimeout+0x84>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	43da      	mvns	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	4013      	ands	r3, r2
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	bf0c      	ite	eq
 800230e:	2301      	moveq	r3, #1
 8002310:	2300      	movne	r3, #0
 8002312:	b2db      	uxtb	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	e00c      	b.n	8002332 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	43da      	mvns	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	4013      	ands	r3, r2
 8002324:	b29b      	uxth	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	bf0c      	ite	eq
 800232a:	2301      	moveq	r3, #1
 800232c:	2300      	movne	r3, #0
 800232e:	b2db      	uxtb	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	429a      	cmp	r2, r3
 8002336:	d0b6      	beq.n	80022a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
 800234e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002350:	e051      	b.n	80023f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002360:	d123      	bne.n	80023aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002370:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800237a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2220      	movs	r2, #32
 8002386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f043 0204 	orr.w	r2, r3, #4
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e046      	b.n	8002438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b0:	d021      	beq.n	80023f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b2:	f7ff f909 	bl	80015c8 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d302      	bcc.n	80023c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d116      	bne.n	80023f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2220      	movs	r2, #32
 80023d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f043 0220 	orr.w	r2, r3, #32
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e020      	b.n	8002438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	0c1b      	lsrs	r3, r3, #16
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d10c      	bne.n	800241a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	43da      	mvns	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	4013      	ands	r3, r2
 800240c:	b29b      	uxth	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	bf14      	ite	ne
 8002412:	2301      	movne	r3, #1
 8002414:	2300      	moveq	r3, #0
 8002416:	b2db      	uxtb	r3, r3
 8002418:	e00b      	b.n	8002432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	43da      	mvns	r2, r3
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	4013      	ands	r3, r2
 8002426:	b29b      	uxth	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	bf14      	ite	ne
 800242c:	2301      	movne	r3, #1
 800242e:	2300      	moveq	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d18d      	bne.n	8002352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800244c:	e02d      	b.n	80024aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 f878 	bl	8002544 <I2C_IsAcknowledgeFailed>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e02d      	b.n	80024ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002464:	d021      	beq.n	80024aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002466:	f7ff f8af 	bl	80015c8 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	429a      	cmp	r2, r3
 8002474:	d302      	bcc.n	800247c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d116      	bne.n	80024aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f043 0220 	orr.w	r2, r3, #32
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e007      	b.n	80024ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b4:	2b80      	cmp	r3, #128	; 0x80
 80024b6:	d1ca      	bne.n	800244e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b084      	sub	sp, #16
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024ce:	e02d      	b.n	800252c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 f837 	bl	8002544 <I2C_IsAcknowledgeFailed>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e02d      	b.n	800253c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e6:	d021      	beq.n	800252c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e8:	f7ff f86e 	bl	80015c8 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d302      	bcc.n	80024fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d116      	bne.n	800252c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	f043 0220 	orr.w	r2, r3, #32
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e007      	b.n	800253c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b04      	cmp	r3, #4
 8002538:	d1ca      	bne.n	80024d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800255a:	d11b      	bne.n	8002594 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002564:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f043 0204 	orr.w	r2, r3, #4
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e272      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8087 	beq.w	80026ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025c0:	4b92      	ldr	r3, [pc, #584]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d00c      	beq.n	80025e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025cc:	4b8f      	ldr	r3, [pc, #572]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 030c 	and.w	r3, r3, #12
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d112      	bne.n	80025fe <HAL_RCC_OscConfig+0x5e>
 80025d8:	4b8c      	ldr	r3, [pc, #560]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e4:	d10b      	bne.n	80025fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e6:	4b89      	ldr	r3, [pc, #548]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d06c      	beq.n	80026cc <HAL_RCC_OscConfig+0x12c>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d168      	bne.n	80026cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e24c      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002606:	d106      	bne.n	8002616 <HAL_RCC_OscConfig+0x76>
 8002608:	4b80      	ldr	r3, [pc, #512]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a7f      	ldr	r2, [pc, #508]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 800260e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	e02e      	b.n	8002674 <HAL_RCC_OscConfig+0xd4>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10c      	bne.n	8002638 <HAL_RCC_OscConfig+0x98>
 800261e:	4b7b      	ldr	r3, [pc, #492]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a7a      	ldr	r2, [pc, #488]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	4b78      	ldr	r3, [pc, #480]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a77      	ldr	r2, [pc, #476]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e01d      	b.n	8002674 <HAL_RCC_OscConfig+0xd4>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002640:	d10c      	bne.n	800265c <HAL_RCC_OscConfig+0xbc>
 8002642:	4b72      	ldr	r3, [pc, #456]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a71      	ldr	r2, [pc, #452]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	4b6f      	ldr	r3, [pc, #444]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a6e      	ldr	r2, [pc, #440]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e00b      	b.n	8002674 <HAL_RCC_OscConfig+0xd4>
 800265c:	4b6b      	ldr	r3, [pc, #428]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a6a      	ldr	r2, [pc, #424]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4b68      	ldr	r3, [pc, #416]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a67      	ldr	r2, [pc, #412]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 800266e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002672:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d013      	beq.n	80026a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe ffa4 	bl	80015c8 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002684:	f7fe ffa0 	bl	80015c8 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e200      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b5d      	ldr	r3, [pc, #372]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0xe4>
 80026a2:	e014      	b.n	80026ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe ff90 	bl	80015c8 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ac:	f7fe ff8c 	bl	80015c8 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e1ec      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026be:	4b53      	ldr	r3, [pc, #332]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x10c>
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d063      	beq.n	80027a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026da:	4b4c      	ldr	r3, [pc, #304]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00b      	beq.n	80026fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026e6:	4b49      	ldr	r3, [pc, #292]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d11c      	bne.n	800272c <HAL_RCC_OscConfig+0x18c>
 80026f2:	4b46      	ldr	r3, [pc, #280]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d116      	bne.n	800272c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fe:	4b43      	ldr	r3, [pc, #268]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <HAL_RCC_OscConfig+0x176>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d001      	beq.n	8002716 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e1c0      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002716:	4b3d      	ldr	r3, [pc, #244]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4939      	ldr	r1, [pc, #228]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272a:	e03a      	b.n	80027a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d020      	beq.n	8002776 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002734:	4b36      	ldr	r3, [pc, #216]	; (8002810 <HAL_RCC_OscConfig+0x270>)
 8002736:	2201      	movs	r2, #1
 8002738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273a:	f7fe ff45 	bl	80015c8 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002742:	f7fe ff41 	bl	80015c8 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e1a1      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002754:	4b2d      	ldr	r3, [pc, #180]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002760:	4b2a      	ldr	r3, [pc, #168]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4927      	ldr	r1, [pc, #156]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002770:	4313      	orrs	r3, r2
 8002772:	600b      	str	r3, [r1, #0]
 8002774:	e015      	b.n	80027a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002776:	4b26      	ldr	r3, [pc, #152]	; (8002810 <HAL_RCC_OscConfig+0x270>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277c:	f7fe ff24 	bl	80015c8 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002784:	f7fe ff20 	bl	80015c8 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e180      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002796:	4b1d      	ldr	r3, [pc, #116]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d03a      	beq.n	8002824 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d019      	beq.n	80027ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b6:	4b17      	ldr	r3, [pc, #92]	; (8002814 <HAL_RCC_OscConfig+0x274>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027bc:	f7fe ff04 	bl	80015c8 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c4:	f7fe ff00 	bl	80015c8 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e160      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d6:	4b0d      	ldr	r3, [pc, #52]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027e2:	2001      	movs	r0, #1
 80027e4:	f000 fad8 	bl	8002d98 <RCC_Delay>
 80027e8:	e01c      	b.n	8002824 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ea:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <HAL_RCC_OscConfig+0x274>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f0:	f7fe feea 	bl	80015c8 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f6:	e00f      	b.n	8002818 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f8:	f7fe fee6 	bl	80015c8 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d908      	bls.n	8002818 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e146      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	42420000 	.word	0x42420000
 8002814:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002818:	4b92      	ldr	r3, [pc, #584]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1e9      	bne.n	80027f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80a6 	beq.w	800297e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002832:	2300      	movs	r3, #0
 8002834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002836:	4b8b      	ldr	r3, [pc, #556]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10d      	bne.n	800285e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002842:	4b88      	ldr	r3, [pc, #544]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	4a87      	ldr	r2, [pc, #540]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284c:	61d3      	str	r3, [r2, #28]
 800284e:	4b85      	ldr	r3, [pc, #532]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800285a:	2301      	movs	r3, #1
 800285c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285e:	4b82      	ldr	r3, [pc, #520]	; (8002a68 <HAL_RCC_OscConfig+0x4c8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002866:	2b00      	cmp	r3, #0
 8002868:	d118      	bne.n	800289c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800286a:	4b7f      	ldr	r3, [pc, #508]	; (8002a68 <HAL_RCC_OscConfig+0x4c8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a7e      	ldr	r2, [pc, #504]	; (8002a68 <HAL_RCC_OscConfig+0x4c8>)
 8002870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002874:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002876:	f7fe fea7 	bl	80015c8 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287e:	f7fe fea3 	bl	80015c8 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b64      	cmp	r3, #100	; 0x64
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e103      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002890:	4b75      	ldr	r3, [pc, #468]	; (8002a68 <HAL_RCC_OscConfig+0x4c8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d106      	bne.n	80028b2 <HAL_RCC_OscConfig+0x312>
 80028a4:	4b6f      	ldr	r3, [pc, #444]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	4a6e      	ldr	r2, [pc, #440]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6213      	str	r3, [r2, #32]
 80028b0:	e02d      	b.n	800290e <HAL_RCC_OscConfig+0x36e>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x334>
 80028ba:	4b6a      	ldr	r3, [pc, #424]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	4a69      	ldr	r2, [pc, #420]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	f023 0301 	bic.w	r3, r3, #1
 80028c4:	6213      	str	r3, [r2, #32]
 80028c6:	4b67      	ldr	r3, [pc, #412]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	4a66      	ldr	r2, [pc, #408]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028cc:	f023 0304 	bic.w	r3, r3, #4
 80028d0:	6213      	str	r3, [r2, #32]
 80028d2:	e01c      	b.n	800290e <HAL_RCC_OscConfig+0x36e>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	2b05      	cmp	r3, #5
 80028da:	d10c      	bne.n	80028f6 <HAL_RCC_OscConfig+0x356>
 80028dc:	4b61      	ldr	r3, [pc, #388]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	4a60      	ldr	r2, [pc, #384]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028e2:	f043 0304 	orr.w	r3, r3, #4
 80028e6:	6213      	str	r3, [r2, #32]
 80028e8:	4b5e      	ldr	r3, [pc, #376]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	4a5d      	ldr	r2, [pc, #372]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6213      	str	r3, [r2, #32]
 80028f4:	e00b      	b.n	800290e <HAL_RCC_OscConfig+0x36e>
 80028f6:	4b5b      	ldr	r3, [pc, #364]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	4a5a      	ldr	r2, [pc, #360]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	f023 0301 	bic.w	r3, r3, #1
 8002900:	6213      	str	r3, [r2, #32]
 8002902:	4b58      	ldr	r3, [pc, #352]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	4a57      	ldr	r2, [pc, #348]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002908:	f023 0304 	bic.w	r3, r3, #4
 800290c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d015      	beq.n	8002942 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002916:	f7fe fe57 	bl	80015c8 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291c:	e00a      	b.n	8002934 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291e:	f7fe fe53 	bl	80015c8 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	f241 3288 	movw	r2, #5000	; 0x1388
 800292c:	4293      	cmp	r3, r2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e0b1      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002934:	4b4b      	ldr	r3, [pc, #300]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0ee      	beq.n	800291e <HAL_RCC_OscConfig+0x37e>
 8002940:	e014      	b.n	800296c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002942:	f7fe fe41 	bl	80015c8 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002948:	e00a      	b.n	8002960 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294a:	f7fe fe3d 	bl	80015c8 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	f241 3288 	movw	r2, #5000	; 0x1388
 8002958:	4293      	cmp	r3, r2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e09b      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002960:	4b40      	ldr	r3, [pc, #256]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1ee      	bne.n	800294a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800296c:	7dfb      	ldrb	r3, [r7, #23]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d105      	bne.n	800297e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002972:	4b3c      	ldr	r3, [pc, #240]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	4a3b      	ldr	r2, [pc, #236]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800297c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8087 	beq.w	8002a96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002988:	4b36      	ldr	r3, [pc, #216]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 030c 	and.w	r3, r3, #12
 8002990:	2b08      	cmp	r3, #8
 8002992:	d061      	beq.n	8002a58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	2b02      	cmp	r3, #2
 800299a:	d146      	bne.n	8002a2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299c:	4b33      	ldr	r3, [pc, #204]	; (8002a6c <HAL_RCC_OscConfig+0x4cc>)
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a2:	f7fe fe11 	bl	80015c8 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029aa:	f7fe fe0d 	bl	80015c8 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e06d      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029bc:	4b29      	ldr	r3, [pc, #164]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1f0      	bne.n	80029aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d0:	d108      	bne.n	80029e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029d2:	4b24      	ldr	r3, [pc, #144]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	4921      	ldr	r1, [pc, #132]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029e4:	4b1f      	ldr	r3, [pc, #124]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a19      	ldr	r1, [r3, #32]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	430b      	orrs	r3, r1
 80029f6:	491b      	ldr	r1, [pc, #108]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029fc:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <HAL_RCC_OscConfig+0x4cc>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a02:	f7fe fde1 	bl	80015c8 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0a:	f7fe fddd 	bl	80015c8 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e03d      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a1c:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0f0      	beq.n	8002a0a <HAL_RCC_OscConfig+0x46a>
 8002a28:	e035      	b.n	8002a96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2a:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <HAL_RCC_OscConfig+0x4cc>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7fe fdca 	bl	80015c8 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a38:	f7fe fdc6 	bl	80015c8 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e026      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a4a:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x498>
 8002a56:	e01e      	b.n	8002a96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d107      	bne.n	8002a70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e019      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40007000 	.word	0x40007000
 8002a6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_RCC_OscConfig+0x500>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d106      	bne.n	8002a92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d001      	beq.n	8002a96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40021000 	.word	0x40021000

08002aa4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0d0      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b6a      	ldr	r3, [pc, #424]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d910      	bls.n	8002ae8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b67      	ldr	r3, [pc, #412]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 0207 	bic.w	r2, r3, #7
 8002ace:	4965      	ldr	r1, [pc, #404]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad6:	4b63      	ldr	r3, [pc, #396]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0b8      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d020      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b00:	4b59      	ldr	r3, [pc, #356]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	4a58      	ldr	r2, [pc, #352]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b18:	4b53      	ldr	r3, [pc, #332]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	4a52      	ldr	r2, [pc, #328]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b24:	4b50      	ldr	r3, [pc, #320]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	494d      	ldr	r1, [pc, #308]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d040      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d107      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4a:	4b47      	ldr	r3, [pc, #284]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d115      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e07f      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d107      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b62:	4b41      	ldr	r3, [pc, #260]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d109      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e073      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b72:	4b3d      	ldr	r3, [pc, #244]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e06b      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b82:	4b39      	ldr	r3, [pc, #228]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f023 0203 	bic.w	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	4936      	ldr	r1, [pc, #216]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b94:	f7fe fd18 	bl	80015c8 <HAL_GetTick>
 8002b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9a:	e00a      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b9c:	f7fe fd14 	bl	80015c8 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e053      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb2:	4b2d      	ldr	r3, [pc, #180]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 020c 	and.w	r2, r3, #12
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d1eb      	bne.n	8002b9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc4:	4b27      	ldr	r3, [pc, #156]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d210      	bcs.n	8002bf4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd2:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 0207 	bic.w	r2, r3, #7
 8002bda:	4922      	ldr	r1, [pc, #136]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e032      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c00:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	4916      	ldr	r1, [pc, #88]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d009      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c1e:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	490e      	ldr	r1, [pc, #56]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c32:	f000 f821 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8002c36:	4602      	mov	r2, r0
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	490a      	ldr	r1, [pc, #40]	; (8002c6c <HAL_RCC_ClockConfig+0x1c8>)
 8002c44:	5ccb      	ldrb	r3, [r1, r3]
 8002c46:	fa22 f303 	lsr.w	r3, r2, r3
 8002c4a:	4a09      	ldr	r2, [pc, #36]	; (8002c70 <HAL_RCC_ClockConfig+0x1cc>)
 8002c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_RCC_ClockConfig+0x1d0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fe fc76 	bl	8001544 <HAL_InitTick>

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40022000 	.word	0x40022000
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	08004a34 	.word	0x08004a34
 8002c70:	20000010 	.word	0x20000010
 8002c74:	20000014 	.word	0x20000014

08002c78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c78:	b490      	push	{r4, r7}
 8002c7a:	b08a      	sub	sp, #40	; 0x28
 8002c7c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c7e:	4b29      	ldr	r3, [pc, #164]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xac>)
 8002c80:	1d3c      	adds	r4, r7, #4
 8002c82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c88:	f240 2301 	movw	r3, #513	; 0x201
 8002c8c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]
 8002c92:	2300      	movs	r3, #0
 8002c94:	61bb      	str	r3, [r7, #24]
 8002c96:	2300      	movs	r3, #0
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ca2:	4b21      	ldr	r3, [pc, #132]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d002      	beq.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x40>
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d003      	beq.n	8002cbe <HAL_RCC_GetSysClockFreq+0x46>
 8002cb6:	e02b      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cb8:	4b1c      	ldr	r3, [pc, #112]	; (8002d2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cba:	623b      	str	r3, [r7, #32]
      break;
 8002cbc:	e02b      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	0c9b      	lsrs	r3, r3, #18
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	3328      	adds	r3, #40	; 0x28
 8002cc8:	443b      	add	r3, r7
 8002cca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002cce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d012      	beq.n	8002d00 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cda:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	0c5b      	lsrs	r3, r3, #17
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	3328      	adds	r3, #40	; 0x28
 8002ce6:	443b      	add	r3, r7
 8002ce8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002cec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	4a0e      	ldr	r2, [pc, #56]	; (8002d2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cf2:	fb03 f202 	mul.w	r2, r3, r2
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfe:	e004      	b.n	8002d0a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	4a0b      	ldr	r2, [pc, #44]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d04:	fb02 f303 	mul.w	r3, r2, r3
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	623b      	str	r3, [r7, #32]
      break;
 8002d0e:	e002      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d10:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d12:	623b      	str	r3, [r7, #32]
      break;
 8002d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d16:	6a3b      	ldr	r3, [r7, #32]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3728      	adds	r7, #40	; 0x28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc90      	pop	{r4, r7}
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	08004a24 	.word	0x08004a24
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	007a1200 	.word	0x007a1200
 8002d30:	003d0900 	.word	0x003d0900

08002d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d38:	4b02      	ldr	r3, [pc, #8]	; (8002d44 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	20000010 	.word	0x20000010

08002d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d4c:	f7ff fff2 	bl	8002d34 <HAL_RCC_GetHCLKFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	0a1b      	lsrs	r3, r3, #8
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	4903      	ldr	r1, [pc, #12]	; (8002d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d5e:	5ccb      	ldrb	r3, [r1, r3]
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	08004a44 	.word	0x08004a44

08002d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d74:	f7ff ffde 	bl	8002d34 <HAL_RCC_GetHCLKFreq>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	0adb      	lsrs	r3, r3, #11
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	4903      	ldr	r1, [pc, #12]	; (8002d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d86:	5ccb      	ldrb	r3, [r1, r3]
 8002d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40021000 	.word	0x40021000
 8002d94:	08004a44 	.word	0x08004a44

08002d98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002da0:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <RCC_Delay+0x34>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a0a      	ldr	r2, [pc, #40]	; (8002dd0 <RCC_Delay+0x38>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	0a5b      	lsrs	r3, r3, #9
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	fb02 f303 	mul.w	r3, r2, r3
 8002db2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002db4:	bf00      	nop
  }
  while (Delay --);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1e5a      	subs	r2, r3, #1
 8002dba:	60fa      	str	r2, [r7, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f9      	bne.n	8002db4 <RCC_Delay+0x1c>
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr
 8002dcc:	20000010 	.word	0x20000010
 8002dd0:	10624dd3 	.word	0x10624dd3

08002dd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e041      	b.n	8002e6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fe f9c4 	bl	8001188 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3304      	adds	r3, #4
 8002e10:	4619      	mov	r1, r3
 8002e12:	4610      	mov	r0, r2
 8002e14:	f000 fa70 	bl	80032f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d001      	beq.n	8002e8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e03a      	b.n	8002f02 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a18      	ldr	r2, [pc, #96]	; (8002f0c <HAL_TIM_Base_Start_IT+0x98>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d00e      	beq.n	8002ecc <HAL_TIM_Base_Start_IT+0x58>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb6:	d009      	beq.n	8002ecc <HAL_TIM_Base_Start_IT+0x58>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a14      	ldr	r2, [pc, #80]	; (8002f10 <HAL_TIM_Base_Start_IT+0x9c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d004      	beq.n	8002ecc <HAL_TIM_Base_Start_IT+0x58>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a13      	ldr	r2, [pc, #76]	; (8002f14 <HAL_TIM_Base_Start_IT+0xa0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d111      	bne.n	8002ef0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b06      	cmp	r3, #6
 8002edc:	d010      	beq.n	8002f00 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0201 	orr.w	r2, r2, #1
 8002eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eee:	e007      	b.n	8002f00 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr
 8002f0c:	40012c00 	.word	0x40012c00
 8002f10:	40000400 	.word	0x40000400
 8002f14:	40000800 	.word	0x40000800

08002f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d122      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d11b      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f06f 0202 	mvn.w	r2, #2
 8002f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f9b1 	bl	80032c2 <HAL_TIM_IC_CaptureCallback>
 8002f60:	e005      	b.n	8002f6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f9a4 	bl	80032b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f9b3 	bl	80032d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d122      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d11b      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0204 	mvn.w	r2, #4
 8002f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f987 	bl	80032c2 <HAL_TIM_IC_CaptureCallback>
 8002fb4:	e005      	b.n	8002fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f97a 	bl	80032b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f989 	bl	80032d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d122      	bne.n	800301c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d11b      	bne.n	800301c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0208 	mvn.w	r2, #8
 8002fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2204      	movs	r2, #4
 8002ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f95d 	bl	80032c2 <HAL_TIM_IC_CaptureCallback>
 8003008:	e005      	b.n	8003016 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f950 	bl	80032b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f95f 	bl	80032d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	2b10      	cmp	r3, #16
 8003028:	d122      	bne.n	8003070 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	2b10      	cmp	r3, #16
 8003036:	d11b      	bne.n	8003070 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0210 	mvn.w	r2, #16
 8003040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2208      	movs	r2, #8
 8003046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f933 	bl	80032c2 <HAL_TIM_IC_CaptureCallback>
 800305c:	e005      	b.n	800306a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f926 	bl	80032b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f935 	bl	80032d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b01      	cmp	r3, #1
 800307c:	d10e      	bne.n	800309c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b01      	cmp	r3, #1
 800308a:	d107      	bne.n	800309c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0201 	mvn.w	r2, #1
 8003094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fd ff00 	bl	8000e9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a6:	2b80      	cmp	r3, #128	; 0x80
 80030a8:	d10e      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b4:	2b80      	cmp	r3, #128	; 0x80
 80030b6:	d107      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fa77 	bl	80035b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d2:	2b40      	cmp	r3, #64	; 0x40
 80030d4:	d10e      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e0:	2b40      	cmp	r3, #64	; 0x40
 80030e2:	d107      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f8f9 	bl	80032e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d10e      	bne.n	8003120 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b20      	cmp	r3, #32
 800310e:	d107      	bne.n	8003120 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0220 	mvn.w	r2, #32
 8003118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fa42 	bl	80035a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003120:	bf00      	nop
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_TIM_ConfigClockSource+0x18>
 800313c:	2302      	movs	r3, #2
 800313e:	e0b3      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x180>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800315e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003166:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003178:	d03e      	beq.n	80031f8 <HAL_TIM_ConfigClockSource+0xd0>
 800317a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800317e:	f200 8087 	bhi.w	8003290 <HAL_TIM_ConfigClockSource+0x168>
 8003182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003186:	f000 8085 	beq.w	8003294 <HAL_TIM_ConfigClockSource+0x16c>
 800318a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800318e:	d87f      	bhi.n	8003290 <HAL_TIM_ConfigClockSource+0x168>
 8003190:	2b70      	cmp	r3, #112	; 0x70
 8003192:	d01a      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0xa2>
 8003194:	2b70      	cmp	r3, #112	; 0x70
 8003196:	d87b      	bhi.n	8003290 <HAL_TIM_ConfigClockSource+0x168>
 8003198:	2b60      	cmp	r3, #96	; 0x60
 800319a:	d050      	beq.n	800323e <HAL_TIM_ConfigClockSource+0x116>
 800319c:	2b60      	cmp	r3, #96	; 0x60
 800319e:	d877      	bhi.n	8003290 <HAL_TIM_ConfigClockSource+0x168>
 80031a0:	2b50      	cmp	r3, #80	; 0x50
 80031a2:	d03c      	beq.n	800321e <HAL_TIM_ConfigClockSource+0xf6>
 80031a4:	2b50      	cmp	r3, #80	; 0x50
 80031a6:	d873      	bhi.n	8003290 <HAL_TIM_ConfigClockSource+0x168>
 80031a8:	2b40      	cmp	r3, #64	; 0x40
 80031aa:	d058      	beq.n	800325e <HAL_TIM_ConfigClockSource+0x136>
 80031ac:	2b40      	cmp	r3, #64	; 0x40
 80031ae:	d86f      	bhi.n	8003290 <HAL_TIM_ConfigClockSource+0x168>
 80031b0:	2b30      	cmp	r3, #48	; 0x30
 80031b2:	d064      	beq.n	800327e <HAL_TIM_ConfigClockSource+0x156>
 80031b4:	2b30      	cmp	r3, #48	; 0x30
 80031b6:	d86b      	bhi.n	8003290 <HAL_TIM_ConfigClockSource+0x168>
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d060      	beq.n	800327e <HAL_TIM_ConfigClockSource+0x156>
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d867      	bhi.n	8003290 <HAL_TIM_ConfigClockSource+0x168>
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d05c      	beq.n	800327e <HAL_TIM_ConfigClockSource+0x156>
 80031c4:	2b10      	cmp	r3, #16
 80031c6:	d05a      	beq.n	800327e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80031c8:	e062      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6818      	ldr	r0, [r3, #0]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	6899      	ldr	r1, [r3, #8]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f000 f966 	bl	80034aa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	609a      	str	r2, [r3, #8]
      break;
 80031f6:	e04e      	b.n	8003296 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6818      	ldr	r0, [r3, #0]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	6899      	ldr	r1, [r3, #8]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f000 f94f 	bl	80034aa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800321a:	609a      	str	r2, [r3, #8]
      break;
 800321c:	e03b      	b.n	8003296 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6859      	ldr	r1, [r3, #4]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	461a      	mov	r2, r3
 800322c:	f000 f8c6 	bl	80033bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2150      	movs	r1, #80	; 0x50
 8003236:	4618      	mov	r0, r3
 8003238:	f000 f91d 	bl	8003476 <TIM_ITRx_SetConfig>
      break;
 800323c:	e02b      	b.n	8003296 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	6859      	ldr	r1, [r3, #4]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	461a      	mov	r2, r3
 800324c:	f000 f8e4 	bl	8003418 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2160      	movs	r1, #96	; 0x60
 8003256:	4618      	mov	r0, r3
 8003258:	f000 f90d 	bl	8003476 <TIM_ITRx_SetConfig>
      break;
 800325c:	e01b      	b.n	8003296 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6818      	ldr	r0, [r3, #0]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	6859      	ldr	r1, [r3, #4]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	461a      	mov	r2, r3
 800326c:	f000 f8a6 	bl	80033bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2140      	movs	r1, #64	; 0x40
 8003276:	4618      	mov	r0, r3
 8003278:	f000 f8fd 	bl	8003476 <TIM_ITRx_SetConfig>
      break;
 800327c:	e00b      	b.n	8003296 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4619      	mov	r1, r3
 8003288:	4610      	mov	r0, r2
 800328a:	f000 f8f4 	bl	8003476 <TIM_ITRx_SetConfig>
        break;
 800328e:	e002      	b.n	8003296 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003290:	bf00      	nop
 8003292:	e000      	b.n	8003296 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003294:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr

080032c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr

080032e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr

080032f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a29      	ldr	r2, [pc, #164]	; (80033b0 <TIM_Base_SetConfig+0xb8>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d00b      	beq.n	8003328 <TIM_Base_SetConfig+0x30>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003316:	d007      	beq.n	8003328 <TIM_Base_SetConfig+0x30>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a26      	ldr	r2, [pc, #152]	; (80033b4 <TIM_Base_SetConfig+0xbc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d003      	beq.n	8003328 <TIM_Base_SetConfig+0x30>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a25      	ldr	r2, [pc, #148]	; (80033b8 <TIM_Base_SetConfig+0xc0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d108      	bne.n	800333a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4313      	orrs	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a1c      	ldr	r2, [pc, #112]	; (80033b0 <TIM_Base_SetConfig+0xb8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00b      	beq.n	800335a <TIM_Base_SetConfig+0x62>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003348:	d007      	beq.n	800335a <TIM_Base_SetConfig+0x62>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a19      	ldr	r2, [pc, #100]	; (80033b4 <TIM_Base_SetConfig+0xbc>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d003      	beq.n	800335a <TIM_Base_SetConfig+0x62>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a18      	ldr	r2, [pc, #96]	; (80033b8 <TIM_Base_SetConfig+0xc0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d108      	bne.n	800336c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a07      	ldr	r2, [pc, #28]	; (80033b0 <TIM_Base_SetConfig+0xb8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d103      	bne.n	80033a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	615a      	str	r2, [r3, #20]
}
 80033a6:	bf00      	nop
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr
 80033b0:	40012c00 	.word	0x40012c00
 80033b4:	40000400 	.word	0x40000400
 80033b8:	40000800 	.word	0x40000800

080033bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	f023 0201 	bic.w	r2, r3, #1
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f023 030a 	bic.w	r3, r3, #10
 80033f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	4313      	orrs	r3, r2
 8003400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	621a      	str	r2, [r3, #32]
}
 800340e:	bf00      	nop
 8003410:	371c      	adds	r7, #28
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr

08003418 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	f023 0210 	bic.w	r2, r3, #16
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003442:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	031b      	lsls	r3, r3, #12
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003454:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4313      	orrs	r3, r2
 800345e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	621a      	str	r2, [r3, #32]
}
 800346c:	bf00      	nop
 800346e:	371c      	adds	r7, #28
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr

08003476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003476:	b480      	push	{r7}
 8003478:	b085      	sub	sp, #20
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	f043 0307 	orr.w	r3, r3, #7
 8003498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	609a      	str	r2, [r3, #8]
}
 80034a0:	bf00      	nop
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr

080034aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b087      	sub	sp, #28
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
 80034b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	021a      	lsls	r2, r3, #8
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	431a      	orrs	r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	609a      	str	r2, [r3, #8]
}
 80034de:	bf00      	nop
 80034e0:	371c      	adds	r7, #28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr

080034e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e046      	b.n	800358e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003526:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a16      	ldr	r2, [pc, #88]	; (8003598 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00e      	beq.n	8003562 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354c:	d009      	beq.n	8003562 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a12      	ldr	r2, [pc, #72]	; (800359c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d004      	beq.n	8003562 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a10      	ldr	r2, [pc, #64]	; (80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d10c      	bne.n	800357c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003568:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	4313      	orrs	r3, r2
 8003572:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr
 8003598:	40012c00 	.word	0x40012c00
 800359c:	40000400 	.word	0x40000400
 80035a0:	40000800 	.word	0x40000800

080035a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc80      	pop	{r7}
 80035b4:	4770      	bx	lr

080035b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr

080035c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e03f      	b.n	800365a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7fd fdee 	bl	80011d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2224      	movs	r2, #36	; 0x24
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800360a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fc85 	bl	8003f1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003620:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695a      	ldr	r2, [r3, #20]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003630:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003640:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b08a      	sub	sp, #40	; 0x28
 8003666:	af02      	add	r7, sp, #8
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	603b      	str	r3, [r7, #0]
 800366e:	4613      	mov	r3, r2
 8003670:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b20      	cmp	r3, #32
 8003680:	d17c      	bne.n	800377c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <HAL_UART_Transmit+0x2c>
 8003688:	88fb      	ldrh	r3, [r7, #6]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e075      	b.n	800377e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_UART_Transmit+0x3e>
 800369c:	2302      	movs	r3, #2
 800369e:	e06e      	b.n	800377e <HAL_UART_Transmit+0x11c>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2221      	movs	r2, #33	; 0x21
 80036b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036b6:	f7fd ff87 	bl	80015c8 <HAL_GetTick>
 80036ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	88fa      	ldrh	r2, [r7, #6]
 80036c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	88fa      	ldrh	r2, [r7, #6]
 80036c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d0:	d108      	bne.n	80036e4 <HAL_UART_Transmit+0x82>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d104      	bne.n	80036e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	61bb      	str	r3, [r7, #24]
 80036e2:	e003      	b.n	80036ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80036f4:	e02a      	b.n	800374c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2200      	movs	r2, #0
 80036fe:	2180      	movs	r1, #128	; 0x80
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 fa38 	bl	8003b76 <UART_WaitOnFlagUntilTimeout>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e036      	b.n	800377e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10b      	bne.n	800372e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003724:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	3302      	adds	r3, #2
 800372a:	61bb      	str	r3, [r7, #24]
 800372c:	e007      	b.n	800373e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	781a      	ldrb	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	3301      	adds	r3, #1
 800373c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1cf      	bne.n	80036f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2200      	movs	r2, #0
 800375e:	2140      	movs	r1, #64	; 0x40
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 fa08 	bl	8003b76 <UART_WaitOnFlagUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e006      	b.n	800377e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	e000      	b.n	800377e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800377c:	2302      	movs	r3, #2
  }
}
 800377e:	4618      	mov	r0, r3
 8003780:	3720      	adds	r7, #32
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b084      	sub	sp, #16
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	4613      	mov	r3, r2
 8003792:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b20      	cmp	r3, #32
 800379e:	d11d      	bne.n	80037dc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_UART_Receive_IT+0x26>
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e016      	b.n	80037de <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_UART_Receive_IT+0x38>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e00f      	b.n	80037de <HAL_UART_Receive_IT+0x58>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80037cc:	88fb      	ldrh	r3, [r7, #6]
 80037ce:	461a      	mov	r2, r3
 80037d0:	68b9      	ldr	r1, [r7, #8]
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 fa19 	bl	8003c0a <UART_Start_Receive_IT>
 80037d8:	4603      	mov	r3, r0
 80037da:	e000      	b.n	80037de <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80037dc:	2302      	movs	r3, #2
  }
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08a      	sub	sp, #40	; 0x28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003808:	2300      	movs	r3, #0
 800380a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10d      	bne.n	800383a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_UART_IRQHandler+0x52>
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fac9 	bl	8003dca <UART_Receive_IT>
      return;
 8003838:	e17b      	b.n	8003b32 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80b1 	beq.w	80039a4 <HAL_UART_IRQHandler+0x1bc>
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d105      	bne.n	8003858 <HAL_UART_IRQHandler+0x70>
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 80a6 	beq.w	80039a4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_UART_IRQHandler+0x90>
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d005      	beq.n	8003878 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	f043 0201 	orr.w	r2, r3, #1
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <HAL_UART_IRQHandler+0xb0>
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	f043 0202 	orr.w	r2, r3, #2
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <HAL_UART_IRQHandler+0xd0>
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	f043 0204 	orr.w	r2, r3, #4
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00f      	beq.n	80038e2 <HAL_UART_IRQHandler+0xfa>
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d104      	bne.n	80038d6 <HAL_UART_IRQHandler+0xee>
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d005      	beq.n	80038e2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	f043 0208 	orr.w	r2, r3, #8
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 811e 	beq.w	8003b28 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d007      	beq.n	8003906 <HAL_UART_IRQHandler+0x11e>
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 fa62 	bl	8003dca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003910:	2b00      	cmp	r3, #0
 8003912:	bf14      	ite	ne
 8003914:	2301      	movne	r3, #1
 8003916:	2300      	moveq	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d102      	bne.n	800392e <HAL_UART_IRQHandler+0x146>
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d031      	beq.n	8003992 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f9a4 	bl	8003c7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393e:	2b00      	cmp	r3, #0
 8003940:	d023      	beq.n	800398a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695a      	ldr	r2, [r3, #20]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003950:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003956:	2b00      	cmp	r3, #0
 8003958:	d013      	beq.n	8003982 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395e:	4a76      	ldr	r2, [pc, #472]	; (8003b38 <HAL_UART_IRQHandler+0x350>)
 8003960:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003966:	4618      	mov	r0, r3
 8003968:	f7fd ffa4 	bl	80018b4 <HAL_DMA_Abort_IT>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d016      	beq.n	80039a0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800397c:	4610      	mov	r0, r2
 800397e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003980:	e00e      	b.n	80039a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f8e3 	bl	8003b4e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003988:	e00a      	b.n	80039a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f8df 	bl	8003b4e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003990:	e006      	b.n	80039a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f8db 	bl	8003b4e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800399e:	e0c3      	b.n	8003b28 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a0:	bf00      	nop
    return;
 80039a2:	e0c1      	b.n	8003b28 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	f040 80a1 	bne.w	8003af0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 809b 	beq.w	8003af0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	f003 0310 	and.w	r3, r3, #16
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 8095 	beq.w	8003af0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d04e      	beq.n	8003a88 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80039f4:	8a3b      	ldrh	r3, [r7, #16]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 8098 	beq.w	8003b2c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a00:	8a3a      	ldrh	r2, [r7, #16]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	f080 8092 	bcs.w	8003b2c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	8a3a      	ldrh	r2, [r7, #16]
 8003a0c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	2b20      	cmp	r3, #32
 8003a16:	d02b      	beq.n	8003a70 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a26:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695a      	ldr	r2, [r3, #20]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0201 	bic.w	r2, r2, #1
 8003a36:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695a      	ldr	r2, [r3, #20]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a46:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0210 	bic.w	r2, r2, #16
 8003a64:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fd fee7 	bl	800183e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	4619      	mov	r1, r3
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f86d 	bl	8003b60 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003a86:	e051      	b.n	8003b2c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d047      	beq.n	8003b30 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003aa0:	8a7b      	ldrh	r3, [r7, #18]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d044      	beq.n	8003b30 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ab4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	695a      	ldr	r2, [r3, #20]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0201 	bic.w	r2, r2, #1
 8003ac4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0210 	bic.w	r2, r2, #16
 8003ae2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ae4:	8a7b      	ldrh	r3, [r7, #18]
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f839 	bl	8003b60 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003aee:	e01f      	b.n	8003b30 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d008      	beq.n	8003b0c <HAL_UART_IRQHandler+0x324>
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f8f9 	bl	8003cfc <UART_Transmit_IT>
    return;
 8003b0a:	e012      	b.n	8003b32 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00d      	beq.n	8003b32 <HAL_UART_IRQHandler+0x34a>
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f93a 	bl	8003d9a <UART_EndTransmit_IT>
    return;
 8003b26:	e004      	b.n	8003b32 <HAL_UART_IRQHandler+0x34a>
    return;
 8003b28:	bf00      	nop
 8003b2a:	e002      	b.n	8003b32 <HAL_UART_IRQHandler+0x34a>
      return;
 8003b2c:	bf00      	nop
 8003b2e:	e000      	b.n	8003b32 <HAL_UART_IRQHandler+0x34a>
      return;
 8003b30:	bf00      	nop
  }
}
 8003b32:	3728      	adds	r7, #40	; 0x28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	08003cd5 	.word	0x08003cd5

08003b3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr

08003b4e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr

08003b60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr

08003b76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	603b      	str	r3, [r7, #0]
 8003b82:	4613      	mov	r3, r2
 8003b84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b86:	e02c      	b.n	8003be2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8e:	d028      	beq.n	8003be2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d007      	beq.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b96:	f7fd fd17 	bl	80015c8 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d21d      	bcs.n	8003be2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003bb4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695a      	ldr	r2, [r3, #20]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0201 	bic.w	r2, r2, #1
 8003bc4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e00f      	b.n	8003c02 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	4013      	ands	r3, r2
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	bf0c      	ite	eq
 8003bf2:	2301      	moveq	r3, #1
 8003bf4:	2300      	movne	r3, #0
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d0c3      	beq.n	8003b88 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b085      	sub	sp, #20
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	4613      	mov	r3, r2
 8003c16:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	88fa      	ldrh	r2, [r7, #6]
 8003c22:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	88fa      	ldrh	r2, [r7, #6]
 8003c28:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2222      	movs	r2, #34	; 0x22
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c4e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0220 	orr.w	r2, r2, #32
 8003c6e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr

08003c7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c92:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695a      	ldr	r2, [r3, #20]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0201 	bic.w	r2, r2, #1
 8003ca2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d107      	bne.n	8003cbc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0210 	bic.w	r2, r2, #16
 8003cba:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr

08003cd4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f7ff ff2d 	bl	8003b4e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cf4:	bf00      	nop
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b21      	cmp	r3, #33	; 0x21
 8003d0e:	d13e      	bne.n	8003d8e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d18:	d114      	bne.n	8003d44 <UART_Transmit_IT+0x48>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d110      	bne.n	8003d44 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d36:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	1c9a      	adds	r2, r3, #2
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	621a      	str	r2, [r3, #32]
 8003d42:	e008      	b.n	8003d56 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	1c59      	adds	r1, r3, #1
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6211      	str	r1, [r2, #32]
 8003d4e:	781a      	ldrb	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	4619      	mov	r1, r3
 8003d64:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10f      	bne.n	8003d8a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68da      	ldr	r2, [r3, #12]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	e000      	b.n	8003d90 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d8e:	2302      	movs	r3, #2
  }
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bc80      	pop	{r7}
 8003d98:	4770      	bx	lr

08003d9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b082      	sub	sp, #8
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003db0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7ff febe 	bl	8003b3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b086      	sub	sp, #24
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b22      	cmp	r3, #34	; 0x22
 8003ddc:	f040 8099 	bne.w	8003f12 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de8:	d117      	bne.n	8003e1a <UART_Receive_IT+0x50>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d113      	bne.n	8003e1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfa:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e12:	1c9a      	adds	r2, r3, #2
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	629a      	str	r2, [r3, #40]	; 0x28
 8003e18:	e026      	b.n	8003e68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003e20:	2300      	movs	r3, #0
 8003e22:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2c:	d007      	beq.n	8003e3e <UART_Receive_IT+0x74>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10a      	bne.n	8003e4c <UART_Receive_IT+0x82>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d106      	bne.n	8003e4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	e008      	b.n	8003e5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	4619      	mov	r1, r3
 8003e76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d148      	bne.n	8003f0e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0220 	bic.w	r2, r2, #32
 8003e8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695a      	ldr	r2, [r3, #20]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0201 	bic.w	r2, r2, #1
 8003eaa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d123      	bne.n	8003f04 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0210 	bic.w	r2, r2, #16
 8003ed0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0310 	and.w	r3, r3, #16
 8003edc:	2b10      	cmp	r3, #16
 8003ede:	d10a      	bne.n	8003ef6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003efa:	4619      	mov	r1, r3
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f7ff fe2f 	bl	8003b60 <HAL_UARTEx_RxEventCallback>
 8003f02:	e002      	b.n	8003f0a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7fc fdef 	bl	8000ae8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	e002      	b.n	8003f14 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e000      	b.n	8003f14 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003f12:	2302      	movs	r3, #2
  }
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f56:	f023 030c 	bic.w	r3, r3, #12
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6812      	ldr	r2, [r2, #0]
 8003f5e:	68b9      	ldr	r1, [r7, #8]
 8003f60:	430b      	orrs	r3, r1
 8003f62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699a      	ldr	r2, [r3, #24]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a2c      	ldr	r2, [pc, #176]	; (8004030 <UART_SetConfig+0x114>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d103      	bne.n	8003f8c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f84:	f7fe fef4 	bl	8002d70 <HAL_RCC_GetPCLK2Freq>
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	e002      	b.n	8003f92 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f8c:	f7fe fedc 	bl	8002d48 <HAL_RCC_GetPCLK1Freq>
 8003f90:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	009a      	lsls	r2, r3, #2
 8003f9c:	441a      	add	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa8:	4a22      	ldr	r2, [pc, #136]	; (8004034 <UART_SetConfig+0x118>)
 8003faa:	fba2 2303 	umull	r2, r3, r2, r3
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	0119      	lsls	r1, r3, #4
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	009a      	lsls	r2, r3, #2
 8003fbc:	441a      	add	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fc8:	4b1a      	ldr	r3, [pc, #104]	; (8004034 <UART_SetConfig+0x118>)
 8003fca:	fba3 0302 	umull	r0, r3, r3, r2
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	2064      	movs	r0, #100	; 0x64
 8003fd2:	fb00 f303 	mul.w	r3, r0, r3
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	3332      	adds	r3, #50	; 0x32
 8003fdc:	4a15      	ldr	r2, [pc, #84]	; (8004034 <UART_SetConfig+0x118>)
 8003fde:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe2:	095b      	lsrs	r3, r3, #5
 8003fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fe8:	4419      	add	r1, r3
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009a      	lsls	r2, r3, #2
 8003ff4:	441a      	add	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004000:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <UART_SetConfig+0x118>)
 8004002:	fba3 0302 	umull	r0, r3, r3, r2
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	2064      	movs	r0, #100	; 0x64
 800400a:	fb00 f303 	mul.w	r3, r0, r3
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	3332      	adds	r3, #50	; 0x32
 8004014:	4a07      	ldr	r2, [pc, #28]	; (8004034 <UART_SetConfig+0x118>)
 8004016:	fba2 2303 	umull	r2, r3, r2, r3
 800401a:	095b      	lsrs	r3, r3, #5
 800401c:	f003 020f 	and.w	r2, r3, #15
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	440a      	add	r2, r1
 8004026:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004028:	bf00      	nop
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40013800 	.word	0x40013800
 8004034:	51eb851f 	.word	0x51eb851f

08004038 <__errno>:
 8004038:	4b01      	ldr	r3, [pc, #4]	; (8004040 <__errno+0x8>)
 800403a:	6818      	ldr	r0, [r3, #0]
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	2000001c 	.word	0x2000001c

08004044 <__libc_init_array>:
 8004044:	b570      	push	{r4, r5, r6, lr}
 8004046:	2600      	movs	r6, #0
 8004048:	4d0c      	ldr	r5, [pc, #48]	; (800407c <__libc_init_array+0x38>)
 800404a:	4c0d      	ldr	r4, [pc, #52]	; (8004080 <__libc_init_array+0x3c>)
 800404c:	1b64      	subs	r4, r4, r5
 800404e:	10a4      	asrs	r4, r4, #2
 8004050:	42a6      	cmp	r6, r4
 8004052:	d109      	bne.n	8004068 <__libc_init_array+0x24>
 8004054:	f000 fc9c 	bl	8004990 <_init>
 8004058:	2600      	movs	r6, #0
 800405a:	4d0a      	ldr	r5, [pc, #40]	; (8004084 <__libc_init_array+0x40>)
 800405c:	4c0a      	ldr	r4, [pc, #40]	; (8004088 <__libc_init_array+0x44>)
 800405e:	1b64      	subs	r4, r4, r5
 8004060:	10a4      	asrs	r4, r4, #2
 8004062:	42a6      	cmp	r6, r4
 8004064:	d105      	bne.n	8004072 <__libc_init_array+0x2e>
 8004066:	bd70      	pop	{r4, r5, r6, pc}
 8004068:	f855 3b04 	ldr.w	r3, [r5], #4
 800406c:	4798      	blx	r3
 800406e:	3601      	adds	r6, #1
 8004070:	e7ee      	b.n	8004050 <__libc_init_array+0xc>
 8004072:	f855 3b04 	ldr.w	r3, [r5], #4
 8004076:	4798      	blx	r3
 8004078:	3601      	adds	r6, #1
 800407a:	e7f2      	b.n	8004062 <__libc_init_array+0x1e>
 800407c:	08004a80 	.word	0x08004a80
 8004080:	08004a80 	.word	0x08004a80
 8004084:	08004a80 	.word	0x08004a80
 8004088:	08004a84 	.word	0x08004a84

0800408c <memset>:
 800408c:	4603      	mov	r3, r0
 800408e:	4402      	add	r2, r0
 8004090:	4293      	cmp	r3, r2
 8004092:	d100      	bne.n	8004096 <memset+0xa>
 8004094:	4770      	bx	lr
 8004096:	f803 1b01 	strb.w	r1, [r3], #1
 800409a:	e7f9      	b.n	8004090 <memset+0x4>

0800409c <siprintf>:
 800409c:	b40e      	push	{r1, r2, r3}
 800409e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040a2:	b500      	push	{lr}
 80040a4:	b09c      	sub	sp, #112	; 0x70
 80040a6:	ab1d      	add	r3, sp, #116	; 0x74
 80040a8:	9002      	str	r0, [sp, #8]
 80040aa:	9006      	str	r0, [sp, #24]
 80040ac:	9107      	str	r1, [sp, #28]
 80040ae:	9104      	str	r1, [sp, #16]
 80040b0:	4808      	ldr	r0, [pc, #32]	; (80040d4 <siprintf+0x38>)
 80040b2:	4909      	ldr	r1, [pc, #36]	; (80040d8 <siprintf+0x3c>)
 80040b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80040b8:	9105      	str	r1, [sp, #20]
 80040ba:	6800      	ldr	r0, [r0, #0]
 80040bc:	a902      	add	r1, sp, #8
 80040be:	9301      	str	r3, [sp, #4]
 80040c0:	f000 f868 	bl	8004194 <_svfiprintf_r>
 80040c4:	2200      	movs	r2, #0
 80040c6:	9b02      	ldr	r3, [sp, #8]
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	b01c      	add	sp, #112	; 0x70
 80040cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80040d0:	b003      	add	sp, #12
 80040d2:	4770      	bx	lr
 80040d4:	2000001c 	.word	0x2000001c
 80040d8:	ffff0208 	.word	0xffff0208

080040dc <__ssputs_r>:
 80040dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040e0:	688e      	ldr	r6, [r1, #8]
 80040e2:	4682      	mov	sl, r0
 80040e4:	429e      	cmp	r6, r3
 80040e6:	460c      	mov	r4, r1
 80040e8:	4690      	mov	r8, r2
 80040ea:	461f      	mov	r7, r3
 80040ec:	d838      	bhi.n	8004160 <__ssputs_r+0x84>
 80040ee:	898a      	ldrh	r2, [r1, #12]
 80040f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040f4:	d032      	beq.n	800415c <__ssputs_r+0x80>
 80040f6:	6825      	ldr	r5, [r4, #0]
 80040f8:	6909      	ldr	r1, [r1, #16]
 80040fa:	3301      	adds	r3, #1
 80040fc:	eba5 0901 	sub.w	r9, r5, r1
 8004100:	6965      	ldr	r5, [r4, #20]
 8004102:	444b      	add	r3, r9
 8004104:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004108:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800410c:	106d      	asrs	r5, r5, #1
 800410e:	429d      	cmp	r5, r3
 8004110:	bf38      	it	cc
 8004112:	461d      	movcc	r5, r3
 8004114:	0553      	lsls	r3, r2, #21
 8004116:	d531      	bpl.n	800417c <__ssputs_r+0xa0>
 8004118:	4629      	mov	r1, r5
 800411a:	f000 fb6f 	bl	80047fc <_malloc_r>
 800411e:	4606      	mov	r6, r0
 8004120:	b950      	cbnz	r0, 8004138 <__ssputs_r+0x5c>
 8004122:	230c      	movs	r3, #12
 8004124:	f04f 30ff 	mov.w	r0, #4294967295
 8004128:	f8ca 3000 	str.w	r3, [sl]
 800412c:	89a3      	ldrh	r3, [r4, #12]
 800412e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004132:	81a3      	strh	r3, [r4, #12]
 8004134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004138:	464a      	mov	r2, r9
 800413a:	6921      	ldr	r1, [r4, #16]
 800413c:	f000 face 	bl	80046dc <memcpy>
 8004140:	89a3      	ldrh	r3, [r4, #12]
 8004142:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800414a:	81a3      	strh	r3, [r4, #12]
 800414c:	6126      	str	r6, [r4, #16]
 800414e:	444e      	add	r6, r9
 8004150:	6026      	str	r6, [r4, #0]
 8004152:	463e      	mov	r6, r7
 8004154:	6165      	str	r5, [r4, #20]
 8004156:	eba5 0509 	sub.w	r5, r5, r9
 800415a:	60a5      	str	r5, [r4, #8]
 800415c:	42be      	cmp	r6, r7
 800415e:	d900      	bls.n	8004162 <__ssputs_r+0x86>
 8004160:	463e      	mov	r6, r7
 8004162:	4632      	mov	r2, r6
 8004164:	4641      	mov	r1, r8
 8004166:	6820      	ldr	r0, [r4, #0]
 8004168:	f000 fac6 	bl	80046f8 <memmove>
 800416c:	68a3      	ldr	r3, [r4, #8]
 800416e:	2000      	movs	r0, #0
 8004170:	1b9b      	subs	r3, r3, r6
 8004172:	60a3      	str	r3, [r4, #8]
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	4433      	add	r3, r6
 8004178:	6023      	str	r3, [r4, #0]
 800417a:	e7db      	b.n	8004134 <__ssputs_r+0x58>
 800417c:	462a      	mov	r2, r5
 800417e:	f000 fbb1 	bl	80048e4 <_realloc_r>
 8004182:	4606      	mov	r6, r0
 8004184:	2800      	cmp	r0, #0
 8004186:	d1e1      	bne.n	800414c <__ssputs_r+0x70>
 8004188:	4650      	mov	r0, sl
 800418a:	6921      	ldr	r1, [r4, #16]
 800418c:	f000 face 	bl	800472c <_free_r>
 8004190:	e7c7      	b.n	8004122 <__ssputs_r+0x46>
	...

08004194 <_svfiprintf_r>:
 8004194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004198:	4698      	mov	r8, r3
 800419a:	898b      	ldrh	r3, [r1, #12]
 800419c:	4607      	mov	r7, r0
 800419e:	061b      	lsls	r3, r3, #24
 80041a0:	460d      	mov	r5, r1
 80041a2:	4614      	mov	r4, r2
 80041a4:	b09d      	sub	sp, #116	; 0x74
 80041a6:	d50e      	bpl.n	80041c6 <_svfiprintf_r+0x32>
 80041a8:	690b      	ldr	r3, [r1, #16]
 80041aa:	b963      	cbnz	r3, 80041c6 <_svfiprintf_r+0x32>
 80041ac:	2140      	movs	r1, #64	; 0x40
 80041ae:	f000 fb25 	bl	80047fc <_malloc_r>
 80041b2:	6028      	str	r0, [r5, #0]
 80041b4:	6128      	str	r0, [r5, #16]
 80041b6:	b920      	cbnz	r0, 80041c2 <_svfiprintf_r+0x2e>
 80041b8:	230c      	movs	r3, #12
 80041ba:	603b      	str	r3, [r7, #0]
 80041bc:	f04f 30ff 	mov.w	r0, #4294967295
 80041c0:	e0d1      	b.n	8004366 <_svfiprintf_r+0x1d2>
 80041c2:	2340      	movs	r3, #64	; 0x40
 80041c4:	616b      	str	r3, [r5, #20]
 80041c6:	2300      	movs	r3, #0
 80041c8:	9309      	str	r3, [sp, #36]	; 0x24
 80041ca:	2320      	movs	r3, #32
 80041cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041d0:	2330      	movs	r3, #48	; 0x30
 80041d2:	f04f 0901 	mov.w	r9, #1
 80041d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80041da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004380 <_svfiprintf_r+0x1ec>
 80041de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041e2:	4623      	mov	r3, r4
 80041e4:	469a      	mov	sl, r3
 80041e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041ea:	b10a      	cbz	r2, 80041f0 <_svfiprintf_r+0x5c>
 80041ec:	2a25      	cmp	r2, #37	; 0x25
 80041ee:	d1f9      	bne.n	80041e4 <_svfiprintf_r+0x50>
 80041f0:	ebba 0b04 	subs.w	fp, sl, r4
 80041f4:	d00b      	beq.n	800420e <_svfiprintf_r+0x7a>
 80041f6:	465b      	mov	r3, fp
 80041f8:	4622      	mov	r2, r4
 80041fa:	4629      	mov	r1, r5
 80041fc:	4638      	mov	r0, r7
 80041fe:	f7ff ff6d 	bl	80040dc <__ssputs_r>
 8004202:	3001      	adds	r0, #1
 8004204:	f000 80aa 	beq.w	800435c <_svfiprintf_r+0x1c8>
 8004208:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800420a:	445a      	add	r2, fp
 800420c:	9209      	str	r2, [sp, #36]	; 0x24
 800420e:	f89a 3000 	ldrb.w	r3, [sl]
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 80a2 	beq.w	800435c <_svfiprintf_r+0x1c8>
 8004218:	2300      	movs	r3, #0
 800421a:	f04f 32ff 	mov.w	r2, #4294967295
 800421e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004222:	f10a 0a01 	add.w	sl, sl, #1
 8004226:	9304      	str	r3, [sp, #16]
 8004228:	9307      	str	r3, [sp, #28]
 800422a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800422e:	931a      	str	r3, [sp, #104]	; 0x68
 8004230:	4654      	mov	r4, sl
 8004232:	2205      	movs	r2, #5
 8004234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004238:	4851      	ldr	r0, [pc, #324]	; (8004380 <_svfiprintf_r+0x1ec>)
 800423a:	f000 fa41 	bl	80046c0 <memchr>
 800423e:	9a04      	ldr	r2, [sp, #16]
 8004240:	b9d8      	cbnz	r0, 800427a <_svfiprintf_r+0xe6>
 8004242:	06d0      	lsls	r0, r2, #27
 8004244:	bf44      	itt	mi
 8004246:	2320      	movmi	r3, #32
 8004248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800424c:	0711      	lsls	r1, r2, #28
 800424e:	bf44      	itt	mi
 8004250:	232b      	movmi	r3, #43	; 0x2b
 8004252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004256:	f89a 3000 	ldrb.w	r3, [sl]
 800425a:	2b2a      	cmp	r3, #42	; 0x2a
 800425c:	d015      	beq.n	800428a <_svfiprintf_r+0xf6>
 800425e:	4654      	mov	r4, sl
 8004260:	2000      	movs	r0, #0
 8004262:	f04f 0c0a 	mov.w	ip, #10
 8004266:	9a07      	ldr	r2, [sp, #28]
 8004268:	4621      	mov	r1, r4
 800426a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800426e:	3b30      	subs	r3, #48	; 0x30
 8004270:	2b09      	cmp	r3, #9
 8004272:	d94e      	bls.n	8004312 <_svfiprintf_r+0x17e>
 8004274:	b1b0      	cbz	r0, 80042a4 <_svfiprintf_r+0x110>
 8004276:	9207      	str	r2, [sp, #28]
 8004278:	e014      	b.n	80042a4 <_svfiprintf_r+0x110>
 800427a:	eba0 0308 	sub.w	r3, r0, r8
 800427e:	fa09 f303 	lsl.w	r3, r9, r3
 8004282:	4313      	orrs	r3, r2
 8004284:	46a2      	mov	sl, r4
 8004286:	9304      	str	r3, [sp, #16]
 8004288:	e7d2      	b.n	8004230 <_svfiprintf_r+0x9c>
 800428a:	9b03      	ldr	r3, [sp, #12]
 800428c:	1d19      	adds	r1, r3, #4
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	9103      	str	r1, [sp, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	bfbb      	ittet	lt
 8004296:	425b      	neglt	r3, r3
 8004298:	f042 0202 	orrlt.w	r2, r2, #2
 800429c:	9307      	strge	r3, [sp, #28]
 800429e:	9307      	strlt	r3, [sp, #28]
 80042a0:	bfb8      	it	lt
 80042a2:	9204      	strlt	r2, [sp, #16]
 80042a4:	7823      	ldrb	r3, [r4, #0]
 80042a6:	2b2e      	cmp	r3, #46	; 0x2e
 80042a8:	d10c      	bne.n	80042c4 <_svfiprintf_r+0x130>
 80042aa:	7863      	ldrb	r3, [r4, #1]
 80042ac:	2b2a      	cmp	r3, #42	; 0x2a
 80042ae:	d135      	bne.n	800431c <_svfiprintf_r+0x188>
 80042b0:	9b03      	ldr	r3, [sp, #12]
 80042b2:	3402      	adds	r4, #2
 80042b4:	1d1a      	adds	r2, r3, #4
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	9203      	str	r2, [sp, #12]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	bfb8      	it	lt
 80042be:	f04f 33ff 	movlt.w	r3, #4294967295
 80042c2:	9305      	str	r3, [sp, #20]
 80042c4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004384 <_svfiprintf_r+0x1f0>
 80042c8:	2203      	movs	r2, #3
 80042ca:	4650      	mov	r0, sl
 80042cc:	7821      	ldrb	r1, [r4, #0]
 80042ce:	f000 f9f7 	bl	80046c0 <memchr>
 80042d2:	b140      	cbz	r0, 80042e6 <_svfiprintf_r+0x152>
 80042d4:	2340      	movs	r3, #64	; 0x40
 80042d6:	eba0 000a 	sub.w	r0, r0, sl
 80042da:	fa03 f000 	lsl.w	r0, r3, r0
 80042de:	9b04      	ldr	r3, [sp, #16]
 80042e0:	3401      	adds	r4, #1
 80042e2:	4303      	orrs	r3, r0
 80042e4:	9304      	str	r3, [sp, #16]
 80042e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042ea:	2206      	movs	r2, #6
 80042ec:	4826      	ldr	r0, [pc, #152]	; (8004388 <_svfiprintf_r+0x1f4>)
 80042ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042f2:	f000 f9e5 	bl	80046c0 <memchr>
 80042f6:	2800      	cmp	r0, #0
 80042f8:	d038      	beq.n	800436c <_svfiprintf_r+0x1d8>
 80042fa:	4b24      	ldr	r3, [pc, #144]	; (800438c <_svfiprintf_r+0x1f8>)
 80042fc:	bb1b      	cbnz	r3, 8004346 <_svfiprintf_r+0x1b2>
 80042fe:	9b03      	ldr	r3, [sp, #12]
 8004300:	3307      	adds	r3, #7
 8004302:	f023 0307 	bic.w	r3, r3, #7
 8004306:	3308      	adds	r3, #8
 8004308:	9303      	str	r3, [sp, #12]
 800430a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800430c:	4433      	add	r3, r6
 800430e:	9309      	str	r3, [sp, #36]	; 0x24
 8004310:	e767      	b.n	80041e2 <_svfiprintf_r+0x4e>
 8004312:	460c      	mov	r4, r1
 8004314:	2001      	movs	r0, #1
 8004316:	fb0c 3202 	mla	r2, ip, r2, r3
 800431a:	e7a5      	b.n	8004268 <_svfiprintf_r+0xd4>
 800431c:	2300      	movs	r3, #0
 800431e:	f04f 0c0a 	mov.w	ip, #10
 8004322:	4619      	mov	r1, r3
 8004324:	3401      	adds	r4, #1
 8004326:	9305      	str	r3, [sp, #20]
 8004328:	4620      	mov	r0, r4
 800432a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800432e:	3a30      	subs	r2, #48	; 0x30
 8004330:	2a09      	cmp	r2, #9
 8004332:	d903      	bls.n	800433c <_svfiprintf_r+0x1a8>
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0c5      	beq.n	80042c4 <_svfiprintf_r+0x130>
 8004338:	9105      	str	r1, [sp, #20]
 800433a:	e7c3      	b.n	80042c4 <_svfiprintf_r+0x130>
 800433c:	4604      	mov	r4, r0
 800433e:	2301      	movs	r3, #1
 8004340:	fb0c 2101 	mla	r1, ip, r1, r2
 8004344:	e7f0      	b.n	8004328 <_svfiprintf_r+0x194>
 8004346:	ab03      	add	r3, sp, #12
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	462a      	mov	r2, r5
 800434c:	4638      	mov	r0, r7
 800434e:	4b10      	ldr	r3, [pc, #64]	; (8004390 <_svfiprintf_r+0x1fc>)
 8004350:	a904      	add	r1, sp, #16
 8004352:	f3af 8000 	nop.w
 8004356:	1c42      	adds	r2, r0, #1
 8004358:	4606      	mov	r6, r0
 800435a:	d1d6      	bne.n	800430a <_svfiprintf_r+0x176>
 800435c:	89ab      	ldrh	r3, [r5, #12]
 800435e:	065b      	lsls	r3, r3, #25
 8004360:	f53f af2c 	bmi.w	80041bc <_svfiprintf_r+0x28>
 8004364:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004366:	b01d      	add	sp, #116	; 0x74
 8004368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800436c:	ab03      	add	r3, sp, #12
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	462a      	mov	r2, r5
 8004372:	4638      	mov	r0, r7
 8004374:	4b06      	ldr	r3, [pc, #24]	; (8004390 <_svfiprintf_r+0x1fc>)
 8004376:	a904      	add	r1, sp, #16
 8004378:	f000 f87c 	bl	8004474 <_printf_i>
 800437c:	e7eb      	b.n	8004356 <_svfiprintf_r+0x1c2>
 800437e:	bf00      	nop
 8004380:	08004a4c 	.word	0x08004a4c
 8004384:	08004a52 	.word	0x08004a52
 8004388:	08004a56 	.word	0x08004a56
 800438c:	00000000 	.word	0x00000000
 8004390:	080040dd 	.word	0x080040dd

08004394 <_printf_common>:
 8004394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004398:	4616      	mov	r6, r2
 800439a:	4699      	mov	r9, r3
 800439c:	688a      	ldr	r2, [r1, #8]
 800439e:	690b      	ldr	r3, [r1, #16]
 80043a0:	4607      	mov	r7, r0
 80043a2:	4293      	cmp	r3, r2
 80043a4:	bfb8      	it	lt
 80043a6:	4613      	movlt	r3, r2
 80043a8:	6033      	str	r3, [r6, #0]
 80043aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043ae:	460c      	mov	r4, r1
 80043b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043b4:	b10a      	cbz	r2, 80043ba <_printf_common+0x26>
 80043b6:	3301      	adds	r3, #1
 80043b8:	6033      	str	r3, [r6, #0]
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	0699      	lsls	r1, r3, #26
 80043be:	bf42      	ittt	mi
 80043c0:	6833      	ldrmi	r3, [r6, #0]
 80043c2:	3302      	addmi	r3, #2
 80043c4:	6033      	strmi	r3, [r6, #0]
 80043c6:	6825      	ldr	r5, [r4, #0]
 80043c8:	f015 0506 	ands.w	r5, r5, #6
 80043cc:	d106      	bne.n	80043dc <_printf_common+0x48>
 80043ce:	f104 0a19 	add.w	sl, r4, #25
 80043d2:	68e3      	ldr	r3, [r4, #12]
 80043d4:	6832      	ldr	r2, [r6, #0]
 80043d6:	1a9b      	subs	r3, r3, r2
 80043d8:	42ab      	cmp	r3, r5
 80043da:	dc28      	bgt.n	800442e <_printf_common+0x9a>
 80043dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043e0:	1e13      	subs	r3, r2, #0
 80043e2:	6822      	ldr	r2, [r4, #0]
 80043e4:	bf18      	it	ne
 80043e6:	2301      	movne	r3, #1
 80043e8:	0692      	lsls	r2, r2, #26
 80043ea:	d42d      	bmi.n	8004448 <_printf_common+0xb4>
 80043ec:	4649      	mov	r1, r9
 80043ee:	4638      	mov	r0, r7
 80043f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043f4:	47c0      	blx	r8
 80043f6:	3001      	adds	r0, #1
 80043f8:	d020      	beq.n	800443c <_printf_common+0xa8>
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	68e5      	ldr	r5, [r4, #12]
 80043fe:	f003 0306 	and.w	r3, r3, #6
 8004402:	2b04      	cmp	r3, #4
 8004404:	bf18      	it	ne
 8004406:	2500      	movne	r5, #0
 8004408:	6832      	ldr	r2, [r6, #0]
 800440a:	f04f 0600 	mov.w	r6, #0
 800440e:	68a3      	ldr	r3, [r4, #8]
 8004410:	bf08      	it	eq
 8004412:	1aad      	subeq	r5, r5, r2
 8004414:	6922      	ldr	r2, [r4, #16]
 8004416:	bf08      	it	eq
 8004418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800441c:	4293      	cmp	r3, r2
 800441e:	bfc4      	itt	gt
 8004420:	1a9b      	subgt	r3, r3, r2
 8004422:	18ed      	addgt	r5, r5, r3
 8004424:	341a      	adds	r4, #26
 8004426:	42b5      	cmp	r5, r6
 8004428:	d11a      	bne.n	8004460 <_printf_common+0xcc>
 800442a:	2000      	movs	r0, #0
 800442c:	e008      	b.n	8004440 <_printf_common+0xac>
 800442e:	2301      	movs	r3, #1
 8004430:	4652      	mov	r2, sl
 8004432:	4649      	mov	r1, r9
 8004434:	4638      	mov	r0, r7
 8004436:	47c0      	blx	r8
 8004438:	3001      	adds	r0, #1
 800443a:	d103      	bne.n	8004444 <_printf_common+0xb0>
 800443c:	f04f 30ff 	mov.w	r0, #4294967295
 8004440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004444:	3501      	adds	r5, #1
 8004446:	e7c4      	b.n	80043d2 <_printf_common+0x3e>
 8004448:	2030      	movs	r0, #48	; 0x30
 800444a:	18e1      	adds	r1, r4, r3
 800444c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004456:	4422      	add	r2, r4
 8004458:	3302      	adds	r3, #2
 800445a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800445e:	e7c5      	b.n	80043ec <_printf_common+0x58>
 8004460:	2301      	movs	r3, #1
 8004462:	4622      	mov	r2, r4
 8004464:	4649      	mov	r1, r9
 8004466:	4638      	mov	r0, r7
 8004468:	47c0      	blx	r8
 800446a:	3001      	adds	r0, #1
 800446c:	d0e6      	beq.n	800443c <_printf_common+0xa8>
 800446e:	3601      	adds	r6, #1
 8004470:	e7d9      	b.n	8004426 <_printf_common+0x92>
	...

08004474 <_printf_i>:
 8004474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004478:	7e0f      	ldrb	r7, [r1, #24]
 800447a:	4691      	mov	r9, r2
 800447c:	2f78      	cmp	r7, #120	; 0x78
 800447e:	4680      	mov	r8, r0
 8004480:	460c      	mov	r4, r1
 8004482:	469a      	mov	sl, r3
 8004484:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004486:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800448a:	d807      	bhi.n	800449c <_printf_i+0x28>
 800448c:	2f62      	cmp	r7, #98	; 0x62
 800448e:	d80a      	bhi.n	80044a6 <_printf_i+0x32>
 8004490:	2f00      	cmp	r7, #0
 8004492:	f000 80d9 	beq.w	8004648 <_printf_i+0x1d4>
 8004496:	2f58      	cmp	r7, #88	; 0x58
 8004498:	f000 80a4 	beq.w	80045e4 <_printf_i+0x170>
 800449c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044a4:	e03a      	b.n	800451c <_printf_i+0xa8>
 80044a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044aa:	2b15      	cmp	r3, #21
 80044ac:	d8f6      	bhi.n	800449c <_printf_i+0x28>
 80044ae:	a101      	add	r1, pc, #4	; (adr r1, 80044b4 <_printf_i+0x40>)
 80044b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044b4:	0800450d 	.word	0x0800450d
 80044b8:	08004521 	.word	0x08004521
 80044bc:	0800449d 	.word	0x0800449d
 80044c0:	0800449d 	.word	0x0800449d
 80044c4:	0800449d 	.word	0x0800449d
 80044c8:	0800449d 	.word	0x0800449d
 80044cc:	08004521 	.word	0x08004521
 80044d0:	0800449d 	.word	0x0800449d
 80044d4:	0800449d 	.word	0x0800449d
 80044d8:	0800449d 	.word	0x0800449d
 80044dc:	0800449d 	.word	0x0800449d
 80044e0:	0800462f 	.word	0x0800462f
 80044e4:	08004551 	.word	0x08004551
 80044e8:	08004611 	.word	0x08004611
 80044ec:	0800449d 	.word	0x0800449d
 80044f0:	0800449d 	.word	0x0800449d
 80044f4:	08004651 	.word	0x08004651
 80044f8:	0800449d 	.word	0x0800449d
 80044fc:	08004551 	.word	0x08004551
 8004500:	0800449d 	.word	0x0800449d
 8004504:	0800449d 	.word	0x0800449d
 8004508:	08004619 	.word	0x08004619
 800450c:	682b      	ldr	r3, [r5, #0]
 800450e:	1d1a      	adds	r2, r3, #4
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	602a      	str	r2, [r5, #0]
 8004514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800451c:	2301      	movs	r3, #1
 800451e:	e0a4      	b.n	800466a <_printf_i+0x1f6>
 8004520:	6820      	ldr	r0, [r4, #0]
 8004522:	6829      	ldr	r1, [r5, #0]
 8004524:	0606      	lsls	r6, r0, #24
 8004526:	f101 0304 	add.w	r3, r1, #4
 800452a:	d50a      	bpl.n	8004542 <_printf_i+0xce>
 800452c:	680e      	ldr	r6, [r1, #0]
 800452e:	602b      	str	r3, [r5, #0]
 8004530:	2e00      	cmp	r6, #0
 8004532:	da03      	bge.n	800453c <_printf_i+0xc8>
 8004534:	232d      	movs	r3, #45	; 0x2d
 8004536:	4276      	negs	r6, r6
 8004538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800453c:	230a      	movs	r3, #10
 800453e:	485e      	ldr	r0, [pc, #376]	; (80046b8 <_printf_i+0x244>)
 8004540:	e019      	b.n	8004576 <_printf_i+0x102>
 8004542:	680e      	ldr	r6, [r1, #0]
 8004544:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004548:	602b      	str	r3, [r5, #0]
 800454a:	bf18      	it	ne
 800454c:	b236      	sxthne	r6, r6
 800454e:	e7ef      	b.n	8004530 <_printf_i+0xbc>
 8004550:	682b      	ldr	r3, [r5, #0]
 8004552:	6820      	ldr	r0, [r4, #0]
 8004554:	1d19      	adds	r1, r3, #4
 8004556:	6029      	str	r1, [r5, #0]
 8004558:	0601      	lsls	r1, r0, #24
 800455a:	d501      	bpl.n	8004560 <_printf_i+0xec>
 800455c:	681e      	ldr	r6, [r3, #0]
 800455e:	e002      	b.n	8004566 <_printf_i+0xf2>
 8004560:	0646      	lsls	r6, r0, #25
 8004562:	d5fb      	bpl.n	800455c <_printf_i+0xe8>
 8004564:	881e      	ldrh	r6, [r3, #0]
 8004566:	2f6f      	cmp	r7, #111	; 0x6f
 8004568:	bf0c      	ite	eq
 800456a:	2308      	moveq	r3, #8
 800456c:	230a      	movne	r3, #10
 800456e:	4852      	ldr	r0, [pc, #328]	; (80046b8 <_printf_i+0x244>)
 8004570:	2100      	movs	r1, #0
 8004572:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004576:	6865      	ldr	r5, [r4, #4]
 8004578:	2d00      	cmp	r5, #0
 800457a:	bfa8      	it	ge
 800457c:	6821      	ldrge	r1, [r4, #0]
 800457e:	60a5      	str	r5, [r4, #8]
 8004580:	bfa4      	itt	ge
 8004582:	f021 0104 	bicge.w	r1, r1, #4
 8004586:	6021      	strge	r1, [r4, #0]
 8004588:	b90e      	cbnz	r6, 800458e <_printf_i+0x11a>
 800458a:	2d00      	cmp	r5, #0
 800458c:	d04d      	beq.n	800462a <_printf_i+0x1b6>
 800458e:	4615      	mov	r5, r2
 8004590:	fbb6 f1f3 	udiv	r1, r6, r3
 8004594:	fb03 6711 	mls	r7, r3, r1, r6
 8004598:	5dc7      	ldrb	r7, [r0, r7]
 800459a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800459e:	4637      	mov	r7, r6
 80045a0:	42bb      	cmp	r3, r7
 80045a2:	460e      	mov	r6, r1
 80045a4:	d9f4      	bls.n	8004590 <_printf_i+0x11c>
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	d10b      	bne.n	80045c2 <_printf_i+0x14e>
 80045aa:	6823      	ldr	r3, [r4, #0]
 80045ac:	07de      	lsls	r6, r3, #31
 80045ae:	d508      	bpl.n	80045c2 <_printf_i+0x14e>
 80045b0:	6923      	ldr	r3, [r4, #16]
 80045b2:	6861      	ldr	r1, [r4, #4]
 80045b4:	4299      	cmp	r1, r3
 80045b6:	bfde      	ittt	le
 80045b8:	2330      	movle	r3, #48	; 0x30
 80045ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045c2:	1b52      	subs	r2, r2, r5
 80045c4:	6122      	str	r2, [r4, #16]
 80045c6:	464b      	mov	r3, r9
 80045c8:	4621      	mov	r1, r4
 80045ca:	4640      	mov	r0, r8
 80045cc:	f8cd a000 	str.w	sl, [sp]
 80045d0:	aa03      	add	r2, sp, #12
 80045d2:	f7ff fedf 	bl	8004394 <_printf_common>
 80045d6:	3001      	adds	r0, #1
 80045d8:	d14c      	bne.n	8004674 <_printf_i+0x200>
 80045da:	f04f 30ff 	mov.w	r0, #4294967295
 80045de:	b004      	add	sp, #16
 80045e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e4:	4834      	ldr	r0, [pc, #208]	; (80046b8 <_printf_i+0x244>)
 80045e6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80045ea:	6829      	ldr	r1, [r5, #0]
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	f851 6b04 	ldr.w	r6, [r1], #4
 80045f2:	6029      	str	r1, [r5, #0]
 80045f4:	061d      	lsls	r5, r3, #24
 80045f6:	d514      	bpl.n	8004622 <_printf_i+0x1ae>
 80045f8:	07df      	lsls	r7, r3, #31
 80045fa:	bf44      	itt	mi
 80045fc:	f043 0320 	orrmi.w	r3, r3, #32
 8004600:	6023      	strmi	r3, [r4, #0]
 8004602:	b91e      	cbnz	r6, 800460c <_printf_i+0x198>
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	f023 0320 	bic.w	r3, r3, #32
 800460a:	6023      	str	r3, [r4, #0]
 800460c:	2310      	movs	r3, #16
 800460e:	e7af      	b.n	8004570 <_printf_i+0xfc>
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	f043 0320 	orr.w	r3, r3, #32
 8004616:	6023      	str	r3, [r4, #0]
 8004618:	2378      	movs	r3, #120	; 0x78
 800461a:	4828      	ldr	r0, [pc, #160]	; (80046bc <_printf_i+0x248>)
 800461c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004620:	e7e3      	b.n	80045ea <_printf_i+0x176>
 8004622:	0659      	lsls	r1, r3, #25
 8004624:	bf48      	it	mi
 8004626:	b2b6      	uxthmi	r6, r6
 8004628:	e7e6      	b.n	80045f8 <_printf_i+0x184>
 800462a:	4615      	mov	r5, r2
 800462c:	e7bb      	b.n	80045a6 <_printf_i+0x132>
 800462e:	682b      	ldr	r3, [r5, #0]
 8004630:	6826      	ldr	r6, [r4, #0]
 8004632:	1d18      	adds	r0, r3, #4
 8004634:	6961      	ldr	r1, [r4, #20]
 8004636:	6028      	str	r0, [r5, #0]
 8004638:	0635      	lsls	r5, r6, #24
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	d501      	bpl.n	8004642 <_printf_i+0x1ce>
 800463e:	6019      	str	r1, [r3, #0]
 8004640:	e002      	b.n	8004648 <_printf_i+0x1d4>
 8004642:	0670      	lsls	r0, r6, #25
 8004644:	d5fb      	bpl.n	800463e <_printf_i+0x1ca>
 8004646:	8019      	strh	r1, [r3, #0]
 8004648:	2300      	movs	r3, #0
 800464a:	4615      	mov	r5, r2
 800464c:	6123      	str	r3, [r4, #16]
 800464e:	e7ba      	b.n	80045c6 <_printf_i+0x152>
 8004650:	682b      	ldr	r3, [r5, #0]
 8004652:	2100      	movs	r1, #0
 8004654:	1d1a      	adds	r2, r3, #4
 8004656:	602a      	str	r2, [r5, #0]
 8004658:	681d      	ldr	r5, [r3, #0]
 800465a:	6862      	ldr	r2, [r4, #4]
 800465c:	4628      	mov	r0, r5
 800465e:	f000 f82f 	bl	80046c0 <memchr>
 8004662:	b108      	cbz	r0, 8004668 <_printf_i+0x1f4>
 8004664:	1b40      	subs	r0, r0, r5
 8004666:	6060      	str	r0, [r4, #4]
 8004668:	6863      	ldr	r3, [r4, #4]
 800466a:	6123      	str	r3, [r4, #16]
 800466c:	2300      	movs	r3, #0
 800466e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004672:	e7a8      	b.n	80045c6 <_printf_i+0x152>
 8004674:	462a      	mov	r2, r5
 8004676:	4649      	mov	r1, r9
 8004678:	4640      	mov	r0, r8
 800467a:	6923      	ldr	r3, [r4, #16]
 800467c:	47d0      	blx	sl
 800467e:	3001      	adds	r0, #1
 8004680:	d0ab      	beq.n	80045da <_printf_i+0x166>
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	079b      	lsls	r3, r3, #30
 8004686:	d413      	bmi.n	80046b0 <_printf_i+0x23c>
 8004688:	68e0      	ldr	r0, [r4, #12]
 800468a:	9b03      	ldr	r3, [sp, #12]
 800468c:	4298      	cmp	r0, r3
 800468e:	bfb8      	it	lt
 8004690:	4618      	movlt	r0, r3
 8004692:	e7a4      	b.n	80045de <_printf_i+0x16a>
 8004694:	2301      	movs	r3, #1
 8004696:	4632      	mov	r2, r6
 8004698:	4649      	mov	r1, r9
 800469a:	4640      	mov	r0, r8
 800469c:	47d0      	blx	sl
 800469e:	3001      	adds	r0, #1
 80046a0:	d09b      	beq.n	80045da <_printf_i+0x166>
 80046a2:	3501      	adds	r5, #1
 80046a4:	68e3      	ldr	r3, [r4, #12]
 80046a6:	9903      	ldr	r1, [sp, #12]
 80046a8:	1a5b      	subs	r3, r3, r1
 80046aa:	42ab      	cmp	r3, r5
 80046ac:	dcf2      	bgt.n	8004694 <_printf_i+0x220>
 80046ae:	e7eb      	b.n	8004688 <_printf_i+0x214>
 80046b0:	2500      	movs	r5, #0
 80046b2:	f104 0619 	add.w	r6, r4, #25
 80046b6:	e7f5      	b.n	80046a4 <_printf_i+0x230>
 80046b8:	08004a5d 	.word	0x08004a5d
 80046bc:	08004a6e 	.word	0x08004a6e

080046c0 <memchr>:
 80046c0:	4603      	mov	r3, r0
 80046c2:	b510      	push	{r4, lr}
 80046c4:	b2c9      	uxtb	r1, r1
 80046c6:	4402      	add	r2, r0
 80046c8:	4293      	cmp	r3, r2
 80046ca:	4618      	mov	r0, r3
 80046cc:	d101      	bne.n	80046d2 <memchr+0x12>
 80046ce:	2000      	movs	r0, #0
 80046d0:	e003      	b.n	80046da <memchr+0x1a>
 80046d2:	7804      	ldrb	r4, [r0, #0]
 80046d4:	3301      	adds	r3, #1
 80046d6:	428c      	cmp	r4, r1
 80046d8:	d1f6      	bne.n	80046c8 <memchr+0x8>
 80046da:	bd10      	pop	{r4, pc}

080046dc <memcpy>:
 80046dc:	440a      	add	r2, r1
 80046de:	4291      	cmp	r1, r2
 80046e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80046e4:	d100      	bne.n	80046e8 <memcpy+0xc>
 80046e6:	4770      	bx	lr
 80046e8:	b510      	push	{r4, lr}
 80046ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046ee:	4291      	cmp	r1, r2
 80046f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046f4:	d1f9      	bne.n	80046ea <memcpy+0xe>
 80046f6:	bd10      	pop	{r4, pc}

080046f8 <memmove>:
 80046f8:	4288      	cmp	r0, r1
 80046fa:	b510      	push	{r4, lr}
 80046fc:	eb01 0402 	add.w	r4, r1, r2
 8004700:	d902      	bls.n	8004708 <memmove+0x10>
 8004702:	4284      	cmp	r4, r0
 8004704:	4623      	mov	r3, r4
 8004706:	d807      	bhi.n	8004718 <memmove+0x20>
 8004708:	1e43      	subs	r3, r0, #1
 800470a:	42a1      	cmp	r1, r4
 800470c:	d008      	beq.n	8004720 <memmove+0x28>
 800470e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004712:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004716:	e7f8      	b.n	800470a <memmove+0x12>
 8004718:	4601      	mov	r1, r0
 800471a:	4402      	add	r2, r0
 800471c:	428a      	cmp	r2, r1
 800471e:	d100      	bne.n	8004722 <memmove+0x2a>
 8004720:	bd10      	pop	{r4, pc}
 8004722:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004726:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800472a:	e7f7      	b.n	800471c <memmove+0x24>

0800472c <_free_r>:
 800472c:	b538      	push	{r3, r4, r5, lr}
 800472e:	4605      	mov	r5, r0
 8004730:	2900      	cmp	r1, #0
 8004732:	d040      	beq.n	80047b6 <_free_r+0x8a>
 8004734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004738:	1f0c      	subs	r4, r1, #4
 800473a:	2b00      	cmp	r3, #0
 800473c:	bfb8      	it	lt
 800473e:	18e4      	addlt	r4, r4, r3
 8004740:	f000 f910 	bl	8004964 <__malloc_lock>
 8004744:	4a1c      	ldr	r2, [pc, #112]	; (80047b8 <_free_r+0x8c>)
 8004746:	6813      	ldr	r3, [r2, #0]
 8004748:	b933      	cbnz	r3, 8004758 <_free_r+0x2c>
 800474a:	6063      	str	r3, [r4, #4]
 800474c:	6014      	str	r4, [r2, #0]
 800474e:	4628      	mov	r0, r5
 8004750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004754:	f000 b90c 	b.w	8004970 <__malloc_unlock>
 8004758:	42a3      	cmp	r3, r4
 800475a:	d908      	bls.n	800476e <_free_r+0x42>
 800475c:	6820      	ldr	r0, [r4, #0]
 800475e:	1821      	adds	r1, r4, r0
 8004760:	428b      	cmp	r3, r1
 8004762:	bf01      	itttt	eq
 8004764:	6819      	ldreq	r1, [r3, #0]
 8004766:	685b      	ldreq	r3, [r3, #4]
 8004768:	1809      	addeq	r1, r1, r0
 800476a:	6021      	streq	r1, [r4, #0]
 800476c:	e7ed      	b.n	800474a <_free_r+0x1e>
 800476e:	461a      	mov	r2, r3
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	b10b      	cbz	r3, 8004778 <_free_r+0x4c>
 8004774:	42a3      	cmp	r3, r4
 8004776:	d9fa      	bls.n	800476e <_free_r+0x42>
 8004778:	6811      	ldr	r1, [r2, #0]
 800477a:	1850      	adds	r0, r2, r1
 800477c:	42a0      	cmp	r0, r4
 800477e:	d10b      	bne.n	8004798 <_free_r+0x6c>
 8004780:	6820      	ldr	r0, [r4, #0]
 8004782:	4401      	add	r1, r0
 8004784:	1850      	adds	r0, r2, r1
 8004786:	4283      	cmp	r3, r0
 8004788:	6011      	str	r1, [r2, #0]
 800478a:	d1e0      	bne.n	800474e <_free_r+0x22>
 800478c:	6818      	ldr	r0, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	4401      	add	r1, r0
 8004792:	6011      	str	r1, [r2, #0]
 8004794:	6053      	str	r3, [r2, #4]
 8004796:	e7da      	b.n	800474e <_free_r+0x22>
 8004798:	d902      	bls.n	80047a0 <_free_r+0x74>
 800479a:	230c      	movs	r3, #12
 800479c:	602b      	str	r3, [r5, #0]
 800479e:	e7d6      	b.n	800474e <_free_r+0x22>
 80047a0:	6820      	ldr	r0, [r4, #0]
 80047a2:	1821      	adds	r1, r4, r0
 80047a4:	428b      	cmp	r3, r1
 80047a6:	bf01      	itttt	eq
 80047a8:	6819      	ldreq	r1, [r3, #0]
 80047aa:	685b      	ldreq	r3, [r3, #4]
 80047ac:	1809      	addeq	r1, r1, r0
 80047ae:	6021      	streq	r1, [r4, #0]
 80047b0:	6063      	str	r3, [r4, #4]
 80047b2:	6054      	str	r4, [r2, #4]
 80047b4:	e7cb      	b.n	800474e <_free_r+0x22>
 80047b6:	bd38      	pop	{r3, r4, r5, pc}
 80047b8:	20000284 	.word	0x20000284

080047bc <sbrk_aligned>:
 80047bc:	b570      	push	{r4, r5, r6, lr}
 80047be:	4e0e      	ldr	r6, [pc, #56]	; (80047f8 <sbrk_aligned+0x3c>)
 80047c0:	460c      	mov	r4, r1
 80047c2:	6831      	ldr	r1, [r6, #0]
 80047c4:	4605      	mov	r5, r0
 80047c6:	b911      	cbnz	r1, 80047ce <sbrk_aligned+0x12>
 80047c8:	f000 f8bc 	bl	8004944 <_sbrk_r>
 80047cc:	6030      	str	r0, [r6, #0]
 80047ce:	4621      	mov	r1, r4
 80047d0:	4628      	mov	r0, r5
 80047d2:	f000 f8b7 	bl	8004944 <_sbrk_r>
 80047d6:	1c43      	adds	r3, r0, #1
 80047d8:	d00a      	beq.n	80047f0 <sbrk_aligned+0x34>
 80047da:	1cc4      	adds	r4, r0, #3
 80047dc:	f024 0403 	bic.w	r4, r4, #3
 80047e0:	42a0      	cmp	r0, r4
 80047e2:	d007      	beq.n	80047f4 <sbrk_aligned+0x38>
 80047e4:	1a21      	subs	r1, r4, r0
 80047e6:	4628      	mov	r0, r5
 80047e8:	f000 f8ac 	bl	8004944 <_sbrk_r>
 80047ec:	3001      	adds	r0, #1
 80047ee:	d101      	bne.n	80047f4 <sbrk_aligned+0x38>
 80047f0:	f04f 34ff 	mov.w	r4, #4294967295
 80047f4:	4620      	mov	r0, r4
 80047f6:	bd70      	pop	{r4, r5, r6, pc}
 80047f8:	20000288 	.word	0x20000288

080047fc <_malloc_r>:
 80047fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004800:	1ccd      	adds	r5, r1, #3
 8004802:	f025 0503 	bic.w	r5, r5, #3
 8004806:	3508      	adds	r5, #8
 8004808:	2d0c      	cmp	r5, #12
 800480a:	bf38      	it	cc
 800480c:	250c      	movcc	r5, #12
 800480e:	2d00      	cmp	r5, #0
 8004810:	4607      	mov	r7, r0
 8004812:	db01      	blt.n	8004818 <_malloc_r+0x1c>
 8004814:	42a9      	cmp	r1, r5
 8004816:	d905      	bls.n	8004824 <_malloc_r+0x28>
 8004818:	230c      	movs	r3, #12
 800481a:	2600      	movs	r6, #0
 800481c:	603b      	str	r3, [r7, #0]
 800481e:	4630      	mov	r0, r6
 8004820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004824:	4e2e      	ldr	r6, [pc, #184]	; (80048e0 <_malloc_r+0xe4>)
 8004826:	f000 f89d 	bl	8004964 <__malloc_lock>
 800482a:	6833      	ldr	r3, [r6, #0]
 800482c:	461c      	mov	r4, r3
 800482e:	bb34      	cbnz	r4, 800487e <_malloc_r+0x82>
 8004830:	4629      	mov	r1, r5
 8004832:	4638      	mov	r0, r7
 8004834:	f7ff ffc2 	bl	80047bc <sbrk_aligned>
 8004838:	1c43      	adds	r3, r0, #1
 800483a:	4604      	mov	r4, r0
 800483c:	d14d      	bne.n	80048da <_malloc_r+0xde>
 800483e:	6834      	ldr	r4, [r6, #0]
 8004840:	4626      	mov	r6, r4
 8004842:	2e00      	cmp	r6, #0
 8004844:	d140      	bne.n	80048c8 <_malloc_r+0xcc>
 8004846:	6823      	ldr	r3, [r4, #0]
 8004848:	4631      	mov	r1, r6
 800484a:	4638      	mov	r0, r7
 800484c:	eb04 0803 	add.w	r8, r4, r3
 8004850:	f000 f878 	bl	8004944 <_sbrk_r>
 8004854:	4580      	cmp	r8, r0
 8004856:	d13a      	bne.n	80048ce <_malloc_r+0xd2>
 8004858:	6821      	ldr	r1, [r4, #0]
 800485a:	3503      	adds	r5, #3
 800485c:	1a6d      	subs	r5, r5, r1
 800485e:	f025 0503 	bic.w	r5, r5, #3
 8004862:	3508      	adds	r5, #8
 8004864:	2d0c      	cmp	r5, #12
 8004866:	bf38      	it	cc
 8004868:	250c      	movcc	r5, #12
 800486a:	4638      	mov	r0, r7
 800486c:	4629      	mov	r1, r5
 800486e:	f7ff ffa5 	bl	80047bc <sbrk_aligned>
 8004872:	3001      	adds	r0, #1
 8004874:	d02b      	beq.n	80048ce <_malloc_r+0xd2>
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	442b      	add	r3, r5
 800487a:	6023      	str	r3, [r4, #0]
 800487c:	e00e      	b.n	800489c <_malloc_r+0xa0>
 800487e:	6822      	ldr	r2, [r4, #0]
 8004880:	1b52      	subs	r2, r2, r5
 8004882:	d41e      	bmi.n	80048c2 <_malloc_r+0xc6>
 8004884:	2a0b      	cmp	r2, #11
 8004886:	d916      	bls.n	80048b6 <_malloc_r+0xba>
 8004888:	1961      	adds	r1, r4, r5
 800488a:	42a3      	cmp	r3, r4
 800488c:	6025      	str	r5, [r4, #0]
 800488e:	bf18      	it	ne
 8004890:	6059      	strne	r1, [r3, #4]
 8004892:	6863      	ldr	r3, [r4, #4]
 8004894:	bf08      	it	eq
 8004896:	6031      	streq	r1, [r6, #0]
 8004898:	5162      	str	r2, [r4, r5]
 800489a:	604b      	str	r3, [r1, #4]
 800489c:	4638      	mov	r0, r7
 800489e:	f104 060b 	add.w	r6, r4, #11
 80048a2:	f000 f865 	bl	8004970 <__malloc_unlock>
 80048a6:	f026 0607 	bic.w	r6, r6, #7
 80048aa:	1d23      	adds	r3, r4, #4
 80048ac:	1af2      	subs	r2, r6, r3
 80048ae:	d0b6      	beq.n	800481e <_malloc_r+0x22>
 80048b0:	1b9b      	subs	r3, r3, r6
 80048b2:	50a3      	str	r3, [r4, r2]
 80048b4:	e7b3      	b.n	800481e <_malloc_r+0x22>
 80048b6:	6862      	ldr	r2, [r4, #4]
 80048b8:	42a3      	cmp	r3, r4
 80048ba:	bf0c      	ite	eq
 80048bc:	6032      	streq	r2, [r6, #0]
 80048be:	605a      	strne	r2, [r3, #4]
 80048c0:	e7ec      	b.n	800489c <_malloc_r+0xa0>
 80048c2:	4623      	mov	r3, r4
 80048c4:	6864      	ldr	r4, [r4, #4]
 80048c6:	e7b2      	b.n	800482e <_malloc_r+0x32>
 80048c8:	4634      	mov	r4, r6
 80048ca:	6876      	ldr	r6, [r6, #4]
 80048cc:	e7b9      	b.n	8004842 <_malloc_r+0x46>
 80048ce:	230c      	movs	r3, #12
 80048d0:	4638      	mov	r0, r7
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	f000 f84c 	bl	8004970 <__malloc_unlock>
 80048d8:	e7a1      	b.n	800481e <_malloc_r+0x22>
 80048da:	6025      	str	r5, [r4, #0]
 80048dc:	e7de      	b.n	800489c <_malloc_r+0xa0>
 80048de:	bf00      	nop
 80048e0:	20000284 	.word	0x20000284

080048e4 <_realloc_r>:
 80048e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048e8:	4680      	mov	r8, r0
 80048ea:	4614      	mov	r4, r2
 80048ec:	460e      	mov	r6, r1
 80048ee:	b921      	cbnz	r1, 80048fa <_realloc_r+0x16>
 80048f0:	4611      	mov	r1, r2
 80048f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048f6:	f7ff bf81 	b.w	80047fc <_malloc_r>
 80048fa:	b92a      	cbnz	r2, 8004908 <_realloc_r+0x24>
 80048fc:	f7ff ff16 	bl	800472c <_free_r>
 8004900:	4625      	mov	r5, r4
 8004902:	4628      	mov	r0, r5
 8004904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004908:	f000 f838 	bl	800497c <_malloc_usable_size_r>
 800490c:	4284      	cmp	r4, r0
 800490e:	4607      	mov	r7, r0
 8004910:	d802      	bhi.n	8004918 <_realloc_r+0x34>
 8004912:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004916:	d812      	bhi.n	800493e <_realloc_r+0x5a>
 8004918:	4621      	mov	r1, r4
 800491a:	4640      	mov	r0, r8
 800491c:	f7ff ff6e 	bl	80047fc <_malloc_r>
 8004920:	4605      	mov	r5, r0
 8004922:	2800      	cmp	r0, #0
 8004924:	d0ed      	beq.n	8004902 <_realloc_r+0x1e>
 8004926:	42bc      	cmp	r4, r7
 8004928:	4622      	mov	r2, r4
 800492a:	4631      	mov	r1, r6
 800492c:	bf28      	it	cs
 800492e:	463a      	movcs	r2, r7
 8004930:	f7ff fed4 	bl	80046dc <memcpy>
 8004934:	4631      	mov	r1, r6
 8004936:	4640      	mov	r0, r8
 8004938:	f7ff fef8 	bl	800472c <_free_r>
 800493c:	e7e1      	b.n	8004902 <_realloc_r+0x1e>
 800493e:	4635      	mov	r5, r6
 8004940:	e7df      	b.n	8004902 <_realloc_r+0x1e>
	...

08004944 <_sbrk_r>:
 8004944:	b538      	push	{r3, r4, r5, lr}
 8004946:	2300      	movs	r3, #0
 8004948:	4d05      	ldr	r5, [pc, #20]	; (8004960 <_sbrk_r+0x1c>)
 800494a:	4604      	mov	r4, r0
 800494c:	4608      	mov	r0, r1
 800494e:	602b      	str	r3, [r5, #0]
 8004950:	f7fc fcce 	bl	80012f0 <_sbrk>
 8004954:	1c43      	adds	r3, r0, #1
 8004956:	d102      	bne.n	800495e <_sbrk_r+0x1a>
 8004958:	682b      	ldr	r3, [r5, #0]
 800495a:	b103      	cbz	r3, 800495e <_sbrk_r+0x1a>
 800495c:	6023      	str	r3, [r4, #0]
 800495e:	bd38      	pop	{r3, r4, r5, pc}
 8004960:	2000028c 	.word	0x2000028c

08004964 <__malloc_lock>:
 8004964:	4801      	ldr	r0, [pc, #4]	; (800496c <__malloc_lock+0x8>)
 8004966:	f000 b811 	b.w	800498c <__retarget_lock_acquire_recursive>
 800496a:	bf00      	nop
 800496c:	20000290 	.word	0x20000290

08004970 <__malloc_unlock>:
 8004970:	4801      	ldr	r0, [pc, #4]	; (8004978 <__malloc_unlock+0x8>)
 8004972:	f000 b80c 	b.w	800498e <__retarget_lock_release_recursive>
 8004976:	bf00      	nop
 8004978:	20000290 	.word	0x20000290

0800497c <_malloc_usable_size_r>:
 800497c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004980:	1f18      	subs	r0, r3, #4
 8004982:	2b00      	cmp	r3, #0
 8004984:	bfbc      	itt	lt
 8004986:	580b      	ldrlt	r3, [r1, r0]
 8004988:	18c0      	addlt	r0, r0, r3
 800498a:	4770      	bx	lr

0800498c <__retarget_lock_acquire_recursive>:
 800498c:	4770      	bx	lr

0800498e <__retarget_lock_release_recursive>:
 800498e:	4770      	bx	lr

08004990 <_init>:
 8004990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004992:	bf00      	nop
 8004994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004996:	bc08      	pop	{r3}
 8004998:	469e      	mov	lr, r3
 800499a:	4770      	bx	lr

0800499c <_fini>:
 800499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499e:	bf00      	nop
 80049a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049a2:	bc08      	pop	{r3}
 80049a4:	469e      	mov	lr, r3
 80049a6:	4770      	bx	lr
